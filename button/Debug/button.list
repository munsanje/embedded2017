
/home/sanje/Atollic/TrueSTUDIO/munsanje/button/Debug/button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08001004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000098  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000118  20000118  00020080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006272  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015b0  00000000  00000000  00026322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c8  00000000  00000000  000278d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006e0  00000000  00000000  000280a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002e53  00000000  00000000  00028780  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002909  00000000  00000000  0002b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002dedc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001eb8  00000000  00000000  0002df58  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002fe10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fc8 	.word	0x08000fc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08000fc8 	.word	0x08000fc8

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <DAC_SetChannel1Data+0x34>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40007400 	.word	0x40007400

080002c4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <DMA_Init+0xac>)
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000306:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000312:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000318:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 0307 	bic.w	r3, r3, #7
 8000332:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4313      	orrs	r3, r2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	f01c803f 	.word	0xf01c803f

08000374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000392:	e005      	b.n	80003a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0201 	bic.w	r2, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e001      	b.n	80003ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <DMA_GetFlagStatus+0x6c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d802      	bhi.n	80003fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <DMA_GetFlagStatus+0x70>)
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <DMA_GetFlagStatus+0x74>)
 80003fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e002      	b.n	8000418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800041e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800042e:	2301      	movs	r3, #1
 8000430:	75fb      	strb	r3, [r7, #23]
 8000432:	e001      	b.n	8000438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000438:	7dfb      	ldrb	r3, [r7, #23]
}
 800043a:	4618      	mov	r0, r3
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	4002640f 	.word	0x4002640f
 800044c:	40026000 	.word	0x40026000
 8000450:	40026400 	.word	0x40026400

08000454 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DMA_ClearFlag+0x50>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d802      	bhi.n	800046c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <DMA_ClearFlag+0x54>)
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e001      	b.n	8000470 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DMA_ClearFlag+0x58>)
 800046e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000488:	e006      	b.n	8000498 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000490:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	6093      	str	r3, [r2, #8]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	4002640f 	.word	0x4002640f
 80004a8:	40026000 	.word	0x40026000
 80004ac:	40026400 	.word	0x40026400

080004b0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <EXTI_Init+0xe0>)
 80004be:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	799b      	ldrb	r3, [r3, #6]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d04f      	beq.n	8000568 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80004c8:	4931      	ldr	r1, [pc, #196]	; (8000590 <EXTI_Init+0xe0>)
 80004ca:	4b31      	ldr	r3, [pc, #196]	; (8000590 <EXTI_Init+0xe0>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	43db      	mvns	r3, r3
 80004d4:	4013      	ands	r3, r2
 80004d6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80004d8:	492d      	ldr	r1, [pc, #180]	; (8000590 <EXTI_Init+0xe0>)
 80004da:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <EXTI_Init+0xe0>)
 80004dc:	685a      	ldr	r2, [r3, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	43db      	mvns	r3, r3
 80004e4:	4013      	ands	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	461a      	mov	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	4413      	add	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	6811      	ldr	r1, [r2, #0]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	430a      	orrs	r2, r1
 8000500:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000502:	4923      	ldr	r1, [pc, #140]	; (8000590 <EXTI_Init+0xe0>)
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <EXTI_Init+0xe0>)
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	43db      	mvns	r3, r3
 800050e:	4013      	ands	r3, r2
 8000510:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000512:	491f      	ldr	r1, [pc, #124]	; (8000590 <EXTI_Init+0xe0>)
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <EXTI_Init+0xe0>)
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	43db      	mvns	r3, r3
 800051e:	4013      	ands	r3, r2
 8000520:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b10      	cmp	r3, #16
 8000528:	d10e      	bne.n	8000548 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800052a:	4919      	ldr	r1, [pc, #100]	; (8000590 <EXTI_Init+0xe0>)
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <EXTI_Init+0xe0>)
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4313      	orrs	r3, r2
 8000536:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000538:	4915      	ldr	r1, [pc, #84]	; (8000590 <EXTI_Init+0xe0>)
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <EXTI_Init+0xe0>)
 800053c:	68da      	ldr	r2, [r3, #12]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4313      	orrs	r3, r2
 8000544:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000546:	e01d      	b.n	8000584 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <EXTI_Init+0xe0>)
 800054a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	6811      	ldr	r1, [r2, #0]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	e00d      	b.n	8000584 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	461a      	mov	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	6811      	ldr	r1, [r2, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	6812      	ldr	r2, [r2, #0]
 800057e:	43d2      	mvns	r2, r2
 8000580:	400a      	ands	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40013c00 	.word	0x40013c00

08000594 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <EXTI_GetITStatus+0x44>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <EXTI_GetITStatus+0x44>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d005      	beq.n	80005c6 <EXTI_GetITStatus+0x32>
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d002      	beq.n	80005c6 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e001      	b.n	80005ca <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40013c00 	.word	0x40013c00

080005dc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <EXTI_ClearITPendingBit+0x1c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6153      	str	r3, [r2, #20]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40013c00 	.word	0x40013c00

080005fc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e076      	b.n	8000706 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000618:	2201      	movs	r2, #1
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	4013      	ands	r3, r2
 800062a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	429a      	cmp	r2, r3
 8000632:	d165      	bne.n	8000700 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	2103      	movs	r1, #3
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	401a      	ands	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	4619      	mov	r1, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	431a      	orrs	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d003      	beq.n	8000672 <GPIO_Init+0x76>
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d12e      	bne.n	80006d0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	689a      	ldr	r2, [r3, #8]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2103      	movs	r1, #3
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	401a      	ands	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	795b      	ldrb	r3, [r3, #5]
 8000690:	4619      	mov	r1, r3
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	2301      	movs	r3, #1
 80006ac:	408b      	lsls	r3, r1
 80006ae:	43db      	mvns	r3, r3
 80006b0:	401a      	ands	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	7992      	ldrb	r2, [r2, #6]
 80006be:	4611      	mov	r1, r2
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	b292      	uxth	r2, r2
 80006c4:	fa01 f202 	lsl.w	r2, r1, r2
 80006c8:	b292      	uxth	r2, r2
 80006ca:	431a      	orrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2103      	movs	r1, #3
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	401a      	ands	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68da      	ldr	r2, [r3, #12]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	79db      	ldrb	r3, [r3, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3301      	adds	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d985      	bls.n	8000618 <GPIO_Init+0x1c>
    }
  }
}
 800070c:	bf00      	nop
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691a      	ldr	r2, [r3, #16]
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	4013      	ands	r3, r2
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e001      	b.n	800073e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d006      	beq.n	800076c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800075e:	490a      	ldr	r1, [pc, #40]	; (8000788 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4313      	orrs	r3, r2
 8000768:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800076a:	e006      	b.n	800077a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800076c:	4906      	ldr	r1, [pc, #24]	; (8000788 <RCC_AHB1PeriphClockCmd+0x3c>)
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	43db      	mvns	r3, r3
 8000776:	4013      	ands	r3, r2
 8000778:	630b      	str	r3, [r1, #48]	; 0x30
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d006      	beq.n	80007ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800079e:	490a      	ldr	r1, [pc, #40]	; (80007c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007aa:	e006      	b.n	80007ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007ac:	4906      	ldr	r1, [pc, #24]	; (80007c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4013      	ands	r3, r2
 80007b8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	819a      	strh	r2, [r3, #12]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	891b      	ldrh	r3, [r3, #8]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	887b      	ldrh	r3, [r7, #2]
 8000802:	4013      	ands	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	e001      	b.n	8000814 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000824:	b490      	push	{r4, r7}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	f003 0303 	and.w	r3, r3, #3
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	220f      	movs	r2, #15
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000848:	4916      	ldr	r1, [pc, #88]	; (80008a4 <SYSCFG_EXTILineConfig+0x80>)
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	089b      	lsrs	r3, r3, #2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <SYSCFG_EXTILineConfig+0x80>)
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3302      	adds	r3, #2
 800085c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	43db      	mvns	r3, r3
 8000864:	401a      	ands	r2, r3
 8000866:	1c83      	adds	r3, r0, #2
 8000868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <SYSCFG_EXTILineConfig+0x80>)
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461c      	mov	r4, r3
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <SYSCFG_EXTILineConfig+0x80>)
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3302      	adds	r3, #2
 8000880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000884:	79f9      	ldrb	r1, [r7, #7]
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	431a      	orrs	r2, r3
 8000894:	1ca3      	adds	r3, r4, #2
 8000896:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc90      	pop	{r4, r7}
 80008a2:	4770      	bx	lr
 80008a4:	40013800 	.word	0x40013800

080008a8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <STM_EVAL_LEDInit+0x50>)
 80008b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ba:	2101      	movs	r1, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff45 	bl	800074c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <STM_EVAL_LEDInit+0x54>)
 80008c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80008cc:	2301      	movs	r3, #1
 80008ce:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008d8:	2302      	movs	r3, #2
 80008da:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <STM_EVAL_LEDInit+0x58>)
 80008e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e4:	f107 0208 	add.w	r2, r7, #8
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe86 	bl	80005fc <GPIO_Init>
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	08000fec 	.word	0x08000fec
 80008fc:	08000fe4 	.word	0x08000fe4
 8000900:	20000000 	.word	0x20000000

08000904 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <STM_EVAL_LEDOn+0x28>)
 8000912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	4905      	ldr	r1, [pc, #20]	; (8000930 <STM_EVAL_LEDOn+0x2c>)
 800091a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800091e:	831a      	strh	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	20000000 	.word	0x20000000
 8000930:	08000fe4 	.word	0x08000fe4

08000934 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <STM_EVAL_LEDToggle+0x34>)
 8000942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <STM_EVAL_LEDToggle+0x34>)
 800094a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800094e:	6952      	ldr	r2, [r2, #20]
 8000950:	79f9      	ldrb	r1, [r7, #7]
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <STM_EVAL_LEDToggle+0x38>)
 8000954:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8000958:	404a      	eors	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	20000000 	.word	0x20000000
 800096c:	08000fe4 	.word	0x08000fe4

08000970 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000974:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <Audio_MAL_IRQHandler+0xec>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	4610      	mov	r0, r2
 8000980:	f7ff fd2c 	bl	80003dc <DMA_GetFlagStatus>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d064      	beq.n	8000a54 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <Audio_MAL_IRQHandler+0xf0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d04c      	beq.n	8000a2c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000992:	bf00      	nop
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fd07 	bl	80003ac <DMA_GetCmdStatus>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1f7      	bne.n	8000994 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <Audio_MAL_IRQHandler+0xec>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4610      	mov	r0, r2
 80009b0:	f7ff fd50 	bl	8000454 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <Audio_MAL_IRQHandler+0xf4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <Audio_MAL_IRQHandler+0xf8>)
 80009bc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <Audio_MAL_IRQHandler+0xf0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c6:	4293      	cmp	r3, r2
 80009c8:	bf28      	it	cs
 80009ca:	4613      	movcs	r3, r2
 80009cc:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <Audio_MAL_IRQHandler+0xf8>)
 80009ce:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4924      	ldr	r1, [pc, #144]	; (8000a68 <Audio_MAL_IRQHandler+0xf8>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc74 	bl	80002c4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2101      	movs	r1, #1
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fcc6 	bl	8000374 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <Audio_MAL_IRQHandler+0xf4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <Audio_MAL_IRQHandler+0xf0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009f4:	d203      	bcs.n	80009fe <Audio_MAL_IRQHandler+0x8e>
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <Audio_MAL_IRQHandler+0xf0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	e000      	b.n	8000a00 <Audio_MAL_IRQHandler+0x90>
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <Audio_MAL_IRQHandler+0xfc>)
 8000a00:	4413      	add	r3, r2
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <Audio_MAL_IRQHandler+0xf4>)
 8000a04:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <Audio_MAL_IRQHandler+0xf0>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <Audio_MAL_IRQHandler+0xf0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a12:	428b      	cmp	r3, r1
 8000a14:	bf28      	it	cs
 8000a16:	460b      	movcs	r3, r1
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <Audio_MAL_IRQHandler+0xf0>)
 8000a1c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2101      	movs	r1, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fca5 	bl	8000374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000a2a:	e013      	b.n	8000a54 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fc9e 	bl	8000374 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <Audio_MAL_IRQHandler+0xe8>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <Audio_MAL_IRQHandler+0xec>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	4610      	mov	r0, r2
 8000a44:	f7ff fd06 	bl	8000454 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <Audio_MAL_IRQHandler+0xf4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f978 	bl	8000d44 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000018 	.word	0x20000018
 8000a5c:	2000001c 	.word	0x2000001c
 8000a60:	20000010 	.word	0x20000010
 8000a64:	2000009c 	.word	0x2000009c
 8000a68:	200000dc 	.word	0x200000dc
 8000a6c:	0001fffe 	.word	0x0001fffe

08000a70 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a74:	f7ff ff7c 	bl	8000970 <Audio_MAL_IRQHandler>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a80:	f7ff ff76 	bl	8000970 <Audio_MAL_IRQHandler>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <SPI3_IRQHandler+0x3c>)
 8000a90:	f7ff feab 	bl	80007ea <SPI_I2S_GetFlagStatus>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d011      	beq.n	8000abe <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <SPI3_IRQHandler+0x40>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d106      	bne.n	8000ab0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000aa2:	f000 f95a 	bl	8000d5a <EVAL_AUDIO_GetSampleCallBack>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2004      	movs	r0, #4
 8000aac:	f7ff fbee 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000ab0:	f000 f953 	bl	8000d5a <EVAL_AUDIO_GetSampleCallBack>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <SPI3_IRQHandler+0x3c>)
 8000aba:	f7ff fe87 	bl	80007cc <SPI_I2S_SendData>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40003c00 	.word	0x40003c00
 8000ac8:	20000014 	.word	0x20000014

08000acc <PBInit>:
uint8_t GPIOEXTI_Port_Source[5] = {EXTI_PortSourceGPIOA, EXTI_PortSourceGPIOB, EXTI_PortSourceGPIOC, EXTI_PortSourceGPIOD, EXTI_PortSourceGPIOE};
uint8_t GPIOEXTI_Pin_Source[5] = {EXTI_PinSource0, EXTI_PinSource1, EXTI_PinSource2, EXTI_PinSource3, EXTI_PinSource4};
int8_t GPIOEXTI_IRQ[5] = {EXTI0_IRQn, EXTI1_IRQn, EXTI2_IRQn, EXTI3_IRQn, EXTI4_IRQn};


void PBInit(const char* pin_name, GPIO_TypeDef** button_port, uint32_t* button_pin) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	uint8_t letter = (uint8_t) pin_name[0] - (uint8_t) 'A';
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3b41      	subs	r3, #65	; 0x41
 8000ade:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t num = (uint8_t) pin_name[1] - (uint8_t) '0';
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	3b30      	subs	r3, #48	; 0x30
 8000aea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


	uint32_t PB_CLK = GPIOClock[letter];
 8000aee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000af2:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <PBInit+0xfc>)
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t PB_PIN = GPIOPins[num];
 8000afa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000afe:	4a33      	ldr	r2, [pc, #204]	; (8000bcc <PBInit+0x100>)
 8000b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b04:	86fb      	strh	r3, [r7, #54]	; 0x36
	GPIO_TypeDef *PB_PORT = GPIOPorts[letter];
 8000b06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b0a:	4a31      	ldr	r2, [pc, #196]	; (8000bd0 <PBInit+0x104>)
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t PB_EXTI_PORT_SOURCE = GPIOEXTI_Port_Source[letter];
 8000b12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b16:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <PBInit+0x108>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t PB_EXTI_LINE = GPIOEXTI_Line[num];
 8000b1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b20:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <PBInit+0x10c>)
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t PB_EXTI_PIN_SOURCE = GPIOEXTI_Pin_Source[num];
 8000b28:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b2c:	4a2b      	ldr	r2, [pc, #172]	; (8000bdc <PBInit+0x110>)
 8000b2e:	5cd3      	ldrb	r3, [r2, r3]
 8000b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t PB_EXTI_IRQn = GPIOEXTI_IRQ[num];
 8000b34:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b38:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <PBInit+0x114>)
 8000b3a:	5cd3      	ldrb	r3, [r2, r3]
 8000b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	*button_port = PB_PORT;
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b44:	601a      	str	r2, [r3, #0]
	*button_pin = PB_PIN;
 8000b46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;


	/* Enable the BUTTON Clock */
	RCC_AHB1PeriphClockCmd(PB_CLK, ENABLE);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b50:	f7ff fdfc 	bl	800074c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000b54:	2101      	movs	r1, #1
 8000b56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b5a:	f7ff fe17 	bl	800078c <RCC_APB2PeriphClockCmd>

	/* Configure Button pin as input */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	GPIO_InitStructure.GPIO_Pin = PB_PIN;
 8000b6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b6c:	61fb      	str	r3, [r7, #28]
	GPIO_Init(PB_PORT, &GPIO_InitStructure);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b76:	f7ff fd41 	bl	80005fc <GPIO_Init>

	/* Connect Button EXTI Line to Button GPIO Pin */
	SYSCFG_EXTILineConfig(PB_EXTI_PORT_SOURCE, PB_EXTI_PIN_SOURCE);
 8000b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fe4d 	bl	8000824 <SYSCFG_EXTILineConfig>

	/* Configure Button EXTI line */
	EXTI_InitStructure.EXTI_Line = PB_EXTI_LINE;
 8000b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8c:	617b      	str	r3, [r7, #20]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	763b      	strb	r3, [r7, #24]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000b92:	2308      	movs	r3, #8
 8000b94:	767b      	strb	r3, [r7, #25]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	76bb      	strb	r3, [r7, #26]
	EXTI_Init(&EXTI_InitStructure);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fc86 	bl	80004b0 <EXTI_Init>

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = PB_EXTI_IRQn;
 8000ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ba8:	743b      	strb	r3, [r7, #16]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000baa:	230f      	movs	r3, #15
 8000bac:	747b      	strb	r3, [r7, #17]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	74bb      	strb	r3, [r7, #18]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	74fb      	strb	r3, [r7, #19]

	NVIC_Init(&NVIC_InitStructure);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fb04 	bl	80001c8 <NVIC_Init>
}
 8000bc0:	bf00      	nop
 8000bc2:	3740      	adds	r7, #64	; 0x40
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000040 	.word	0x20000040
 8000bcc:	20000034 	.word	0x20000034
 8000bd0:	20000020 	.word	0x20000020
 8000bd4:	20000068 	.word	0x20000068
 8000bd8:	20000054 	.word	0x20000054
 8000bdc:	20000070 	.word	0x20000070
 8000be0:	20000078 	.word	0x20000078

08000be4 <PBGetState>:

/*Return state of push button*/
uint32_t PBGetState(GPIO_TypeDef** button_port, uint32_t* button_pin) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  return GPIO_ReadInputDataBit(*button_port, *button_pin);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f7ff fd8c 	bl	8000718 <GPIO_ReadInputDataBit>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <EXTI0_IRQHandler>:

/*External Interrupt handler for line 0*/
void EXTI0_IRQHandler(void) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fcc0 	bl	8000594 <EXTI_GetITStatus>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <EXTI0_IRQHandler+0x16>
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fcde 	bl	80005dc <EXTI_ClearITPendingBit>
    }
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff fcb3 	bl	8000594 <EXTI_GetITStatus>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <EXTI1_IRQHandler+0x16>
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line1);
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fcd1 	bl	80005dc <EXTI_ClearITPendingBit>
    }
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line2) != RESET) {
 8000c42:	2004      	movs	r0, #4
 8000c44:	f7ff fca6 	bl	8000594 <EXTI_GetITStatus>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <EXTI2_IRQHandler+0x16>
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line2);
 8000c4e:	2004      	movs	r0, #4
 8000c50:	f7ff fcc4 	bl	80005dc <EXTI_ClearITPendingBit>
    }
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line3) != RESET) {
 8000c5c:	2008      	movs	r0, #8
 8000c5e:	f7ff fc99 	bl	8000594 <EXTI_GetITStatus>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <EXTI3_IRQHandler+0x16>
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line3);
 8000c68:	2008      	movs	r0, #8
 8000c6a:	f7ff fcb7 	bl	80005dc <EXTI_ClearITPendingBit>
    }
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8000c76:	2010      	movs	r0, #16
 8000c78:	f7ff fc8c 	bl	8000594 <EXTI_GetITStatus>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <EXTI4_IRQHandler+0x16>
        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line4);
 8000c82:	2010      	movs	r0, #16
 8000c84:	f7ff fcaa 	bl	80005dc <EXTI_ClearITPendingBit>
    }
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <main>:
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
  int i = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]


  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED_BLUE);
 8000c96:	2003      	movs	r0, #3
 8000c98:	f7ff fe06 	bl	80008a8 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED_GREEN);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fe03 	bl	80008a8 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED_RED);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f7ff fe00 	bl	80008a8 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED_ORANGE);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fdfd 	bl	80008a8 <STM_EVAL_LEDInit>

  const char* pin_name = "C4";
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <main+0xb0>)
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_TypeDef* button_port;
  uint32_t button_pin;
  PBInit(pin_name, &button_port, &button_pin);
 8000cb2:	1d3a      	adds	r2, r7, #4
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6938      	ldr	r0, [r7, #16]
 8000cbc:	f7ff ff06 	bl	8000acc <PBInit>
  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED_BLUE);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff fe1f 	bl	8000904 <STM_EVAL_LEDOn>

  /* Infinite loop */
  while (1)
  {
	uint32_t state = PBGetState(&button_port, &button_pin);
 8000cc6:	1d3a      	adds	r2, r7, #4
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff88 	bl	8000be4 <PBGetState>
 8000cd4:	60f8      	str	r0, [r7, #12]
	if(state == 0) {
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d110      	bne.n	8000cfe <main+0x72>
		STM_EVAL_LEDToggle(LED_RED);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff fe29 	bl	8000934 <STM_EVAL_LEDToggle>
		for(i = 0; i < 5000000; i++);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e002      	b.n	8000cee <main+0x62>
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <main+0xb4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	ddf8      	ble.n	8000ce8 <main+0x5c>
		STM_EVAL_LEDToggle(LED_RED);
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff fe1c 	bl	8000934 <STM_EVAL_LEDToggle>
 8000cfc:	e012      	b.n	8000d24 <main+0x98>
	} else if(state == 1) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10f      	bne.n	8000d24 <main+0x98>
		STM_EVAL_LEDToggle(LED_GREEN);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fe15 	bl	8000934 <STM_EVAL_LEDToggle>
		for(i = 0; i < 5000000; i++);
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e002      	b.n	8000d16 <main+0x8a>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <main+0xb4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	ddf8      	ble.n	8000d10 <main+0x84>
		STM_EVAL_LEDToggle(LED_GREEN);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fe08 	bl	8000934 <STM_EVAL_LEDToggle>
	}
	for(i = 0; i < 5000000; i++);
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e002      	b.n	8000d30 <main+0xa4>
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <main+0xb4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	ddf8      	ble.n	8000d2a <main+0x9e>
  {
 8000d38:	e7c5      	b.n	8000cc6 <main+0x3a>
 8000d3a:	bf00      	nop
 8000d3c:	08000fe0 	.word	0x08000fe0
 8000d40:	004c4b3f 	.word	0x004c4b3f

08000d44 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000d4e:	bf00      	nop
}
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d72:	e003      	b.n	8000d7c <LoopCopyDataInit>

08000d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7a:	3104      	adds	r1, #4

08000d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d84:	d3f6      	bcc.n	8000d74 <CopyDataInit>
  ldr  r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d88:	e002      	b.n	8000d90 <LoopFillZerobss>

08000d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d8c:	f842 3b04 	str.w	r3, [r2], #4

08000d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d94:	d3f9      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d96:	f000 f841 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f000 f8f1 	bl	8000f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff ff75 	bl	8000c8c <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000da8:	08001004 	.word	0x08001004
  ldr  r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000db4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000db8:	20000118 	.word	0x20000118

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>

08000dbe <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <BusFault_Handler+0x4>

08000dde <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <UsageFault_Handler+0x4>

08000de4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <SystemInit+0x60>)
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <SystemInit+0x60>)
 8000e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <SystemInit+0x64>)
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <SystemInit+0x64>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <SystemInit+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <SystemInit+0x64>)
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SystemInit+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <SystemInit+0x64>)
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <SystemInit+0x68>)
 8000e56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e58:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <SystemInit+0x64>)
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <SystemInit+0x64>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000e6a:	f000 f80d 	bl	8000e88 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6e:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <SystemInit+0x60>)
 8000e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e74:	609a      	str	r2, [r3, #8]
#endif
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	40023800 	.word	0x40023800
 8000e84:	24003010 	.word	0x24003010

08000e88 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <SetSysClock+0xe8>)
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <SetSysClock+0xe8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <SetSysClock+0xe8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d103      	bne.n	8000ec0 <SetSysClock+0x38>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ebe:	d1f0      	bne.n	8000ea2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <SetSysClock+0xe8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	e001      	b.n	8000ed6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d142      	bne.n	8000f62 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000edc:	4a24      	ldr	r2, [pc, #144]	; (8000f70 <SetSysClock+0xe8>)
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <SetSysClock+0xe8>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000ee8:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <SetSysClock+0xec>)
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <SetSysClock+0xec>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <SetSysClock+0xe8>)
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <SetSysClock+0xe8>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <SetSysClock+0xe8>)
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <SetSysClock+0xe8>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f06:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <SetSysClock+0xe8>)
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <SetSysClock+0xe8>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000f12:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <SetSysClock+0xe8>)
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <SetSysClock+0xf0>)
 8000f18:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <SetSysClock+0xe8>)
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <SetSysClock+0xe8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f24:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f26:	bf00      	nop
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <SetSysClock+0xe8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f9      	beq.n	8000f28 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <SetSysClock+0xf4>)
 8000f36:	f240 6205 	movw	r2, #1541	; 0x605
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <SetSysClock+0xe8>)
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <SetSysClock+0xe8>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f023 0303 	bic.w	r3, r3, #3
 8000f46:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <SetSysClock+0xe8>)
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <SetSysClock+0xe8>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000f54:	bf00      	nop
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SetSysClock+0xe8>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d1f9      	bne.n	8000f56 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000
 8000f78:	07405408 	.word	0x07405408
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <__libc_init_array>:
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	4e0d      	ldr	r6, [pc, #52]	; (8000fb8 <__libc_init_array+0x38>)
 8000f84:	4c0d      	ldr	r4, [pc, #52]	; (8000fbc <__libc_init_array+0x3c>)
 8000f86:	1ba4      	subs	r4, r4, r6
 8000f88:	10a4      	asrs	r4, r4, #2
 8000f8a:	2500      	movs	r5, #0
 8000f8c:	42a5      	cmp	r5, r4
 8000f8e:	d109      	bne.n	8000fa4 <__libc_init_array+0x24>
 8000f90:	4e0b      	ldr	r6, [pc, #44]	; (8000fc0 <__libc_init_array+0x40>)
 8000f92:	4c0c      	ldr	r4, [pc, #48]	; (8000fc4 <__libc_init_array+0x44>)
 8000f94:	f000 f818 	bl	8000fc8 <_init>
 8000f98:	1ba4      	subs	r4, r4, r6
 8000f9a:	10a4      	asrs	r4, r4, #2
 8000f9c:	2500      	movs	r5, #0
 8000f9e:	42a5      	cmp	r5, r4
 8000fa0:	d105      	bne.n	8000fae <__libc_init_array+0x2e>
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fa8:	4798      	blx	r3
 8000faa:	3501      	adds	r5, #1
 8000fac:	e7ee      	b.n	8000f8c <__libc_init_array+0xc>
 8000fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb2:	4798      	blx	r3
 8000fb4:	3501      	adds	r5, #1
 8000fb6:	e7f2      	b.n	8000f9e <__libc_init_array+0x1e>
 8000fb8:	08000ffc 	.word	0x08000ffc
 8000fbc:	08000ffc 	.word	0x08000ffc
 8000fc0:	08000ffc 	.word	0x08000ffc
 8000fc4:	08001000 	.word	0x08001000

08000fc8 <_init>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	bf00      	nop
 8000fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fce:	bc08      	pop	{r3}
 8000fd0:	469e      	mov	lr, r3
 8000fd2:	4770      	bx	lr

08000fd4 <_fini>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	bf00      	nop
 8000fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fda:	bc08      	pop	{r3}
 8000fdc:	469e      	mov	lr, r3
 8000fde:	4770      	bx	lr
