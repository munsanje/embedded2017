
/home/sanje/Atollic/TrueSTUDIO/munsanje/sdcard/Debug/sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000150  20000000  08007b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
  7 .bss          00000648  20000150  20000150  00020150  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000798  20000798  00020150  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012934  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002bfb  00000000  00000000  00032ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001098  00000000  00000000  000356b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f28  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000074da  00000000  00000000  00037670  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000050bb  00000000  00000000  0003eb4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043c05  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004644  00000000  00000000  00043c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000482c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000150 	.word	0x20000150
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007508 	.word	0x08007508

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000154 	.word	0x20000154
 80001c4:	08007508 	.word	0x08007508

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <DAC_SetChannel1Data+0x34>)
 80002c6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	3308      	adds	r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	461a      	mov	r2, r3
 80002d6:	887b      	ldrh	r3, [r7, #2]
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40007400 	.word	0x40007400

080002ec <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f023 0201 	bic.w	r2, r3, #1
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2221      	movs	r2, #33	; 0x21
 8000322:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a46      	ldr	r2, [pc, #280]	; (8000440 <DMA_DeInit+0x154>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d103      	bne.n	8000334 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800032c:	4b45      	ldr	r3, [pc, #276]	; (8000444 <DMA_DeInit+0x158>)
 800032e:	223d      	movs	r2, #61	; 0x3d
 8000330:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000332:	e07e      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a44      	ldr	r2, [pc, #272]	; (8000448 <DMA_DeInit+0x15c>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d104      	bne.n	8000346 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800033c:	4b41      	ldr	r3, [pc, #260]	; (8000444 <DMA_DeInit+0x158>)
 800033e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000342:	609a      	str	r2, [r3, #8]
}
 8000344:	e075      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a40      	ldr	r2, [pc, #256]	; (800044c <DMA_DeInit+0x160>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d104      	bne.n	8000358 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800034e:	4b3d      	ldr	r3, [pc, #244]	; (8000444 <DMA_DeInit+0x158>)
 8000350:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	e06c      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a3d      	ldr	r2, [pc, #244]	; (8000450 <DMA_DeInit+0x164>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d104      	bne.n	800036a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000360:	4b38      	ldr	r3, [pc, #224]	; (8000444 <DMA_DeInit+0x158>)
 8000362:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000366:	609a      	str	r2, [r3, #8]
}
 8000368:	e063      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a39      	ldr	r2, [pc, #228]	; (8000454 <DMA_DeInit+0x168>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d103      	bne.n	800037a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000372:	4b34      	ldr	r3, [pc, #208]	; (8000444 <DMA_DeInit+0x158>)
 8000374:	4a38      	ldr	r2, [pc, #224]	; (8000458 <DMA_DeInit+0x16c>)
 8000376:	60da      	str	r2, [r3, #12]
}
 8000378:	e05b      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a37      	ldr	r2, [pc, #220]	; (800045c <DMA_DeInit+0x170>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d103      	bne.n	800038a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000382:	4b30      	ldr	r3, [pc, #192]	; (8000444 <DMA_DeInit+0x158>)
 8000384:	4a36      	ldr	r2, [pc, #216]	; (8000460 <DMA_DeInit+0x174>)
 8000386:	60da      	str	r2, [r3, #12]
}
 8000388:	e053      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a35      	ldr	r2, [pc, #212]	; (8000464 <DMA_DeInit+0x178>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d103      	bne.n	800039a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000392:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <DMA_DeInit+0x158>)
 8000394:	4a34      	ldr	r2, [pc, #208]	; (8000468 <DMA_DeInit+0x17c>)
 8000396:	60da      	str	r2, [r3, #12]
}
 8000398:	e04b      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a33      	ldr	r2, [pc, #204]	; (800046c <DMA_DeInit+0x180>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d104      	bne.n	80003ac <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80003a2:	4b28      	ldr	r3, [pc, #160]	; (8000444 <DMA_DeInit+0x158>)
 80003a4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003a8:	60da      	str	r2, [r3, #12]
}
 80003aa:	e042      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a30      	ldr	r2, [pc, #192]	; (8000470 <DMA_DeInit+0x184>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d103      	bne.n	80003bc <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80003b4:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <DMA_DeInit+0x188>)
 80003b6:	223d      	movs	r2, #61	; 0x3d
 80003b8:	609a      	str	r2, [r3, #8]
}
 80003ba:	e03a      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a2e      	ldr	r2, [pc, #184]	; (8000478 <DMA_DeInit+0x18c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d104      	bne.n	80003ce <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <DMA_DeInit+0x188>)
 80003c6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80003ca:	609a      	str	r2, [r3, #8]
}
 80003cc:	e031      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a2a      	ldr	r2, [pc, #168]	; (800047c <DMA_DeInit+0x190>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d104      	bne.n	80003e0 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80003d6:	4b27      	ldr	r3, [pc, #156]	; (8000474 <DMA_DeInit+0x188>)
 80003d8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80003dc:	609a      	str	r2, [r3, #8]
}
 80003de:	e028      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a27      	ldr	r2, [pc, #156]	; (8000480 <DMA_DeInit+0x194>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d104      	bne.n	80003f2 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80003e8:	4b22      	ldr	r3, [pc, #136]	; (8000474 <DMA_DeInit+0x188>)
 80003ea:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80003ee:	609a      	str	r2, [r3, #8]
}
 80003f0:	e01f      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a23      	ldr	r2, [pc, #140]	; (8000484 <DMA_DeInit+0x198>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d103      	bne.n	8000402 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80003fa:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <DMA_DeInit+0x188>)
 80003fc:	4a16      	ldr	r2, [pc, #88]	; (8000458 <DMA_DeInit+0x16c>)
 80003fe:	60da      	str	r2, [r3, #12]
}
 8000400:	e017      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <DMA_DeInit+0x19c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d103      	bne.n	8000412 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <DMA_DeInit+0x188>)
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <DMA_DeInit+0x174>)
 800040e:	60da      	str	r2, [r3, #12]
}
 8000410:	e00f      	b.n	8000432 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a1d      	ldr	r2, [pc, #116]	; (800048c <DMA_DeInit+0x1a0>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d103      	bne.n	8000422 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <DMA_DeInit+0x188>)
 800041c:	4a12      	ldr	r2, [pc, #72]	; (8000468 <DMA_DeInit+0x17c>)
 800041e:	60da      	str	r2, [r3, #12]
}
 8000420:	e007      	b.n	8000432 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <DMA_DeInit+0x1a4>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d103      	bne.n	8000432 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <DMA_DeInit+0x188>)
 800042c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000430:	60da      	str	r2, [r3, #12]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40026010 	.word	0x40026010
 8000444:	40026000 	.word	0x40026000
 8000448:	40026028 	.word	0x40026028
 800044c:	40026040 	.word	0x40026040
 8000450:	40026058 	.word	0x40026058
 8000454:	40026070 	.word	0x40026070
 8000458:	2000003d 	.word	0x2000003d
 800045c:	40026088 	.word	0x40026088
 8000460:	20000f40 	.word	0x20000f40
 8000464:	400260a0 	.word	0x400260a0
 8000468:	203d0000 	.word	0x203d0000
 800046c:	400260b8 	.word	0x400260b8
 8000470:	40026410 	.word	0x40026410
 8000474:	40026400 	.word	0x40026400
 8000478:	40026428 	.word	0x40026428
 800047c:	40026440 	.word	0x40026440
 8000480:	40026458 	.word	0x40026458
 8000484:	40026470 	.word	0x40026470
 8000488:	40026488 	.word	0x40026488
 800048c:	400264a0 	.word	0x400264a0
 8000490:	400264b8 	.word	0x400264b8

08000494 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <DMA_Init+0xac>)
 80004ac:	4013      	ands	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80004be:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004ca:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004d6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004dc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004e2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 0307 	bic.w	r3, r3, #7
 8000502:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4313      	orrs	r3, r2
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	4313      	orrs	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	691a      	ldr	r2, [r3, #16]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	60da      	str	r2, [r3, #12]
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	f01c803f 	.word	0xf01c803f

08000544 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0201 	orr.w	r2, r3, #1
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000562:	e005      	b.n	8000570 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f023 0201 	bic.w	r2, r3, #1
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	601a      	str	r2, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f043 0220 	orr.w	r2, r3, #32
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
  }
}
 8000598:	e005      	b.n	80005a6 <DMA_FlowControllerConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f023 0220 	bic.w	r2, r3, #32
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e001      	b.n	80005d4 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a15      	ldr	r2, [pc, #84]	; (8000650 <DMA_GetFlagStatus+0x6c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d802      	bhi.n	8000604 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <DMA_GetFlagStatus+0x70>)
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	e001      	b.n	8000608 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <DMA_GetFlagStatus+0x74>)
 8000606:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e002      	b.n	8000620 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000626:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800062a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	4013      	ands	r3, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000636:	2301      	movs	r3, #1
 8000638:	75fb      	strb	r3, [r7, #23]
 800063a:	e001      	b.n	8000640 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000640:	7dfb      	ldrb	r3, [r7, #23]
}
 8000642:	4618      	mov	r0, r3
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	4002640f 	.word	0x4002640f
 8000654:	40026000 	.word	0x40026000
 8000658:	40026400 	.word	0x40026400

0800065c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a10      	ldr	r2, [pc, #64]	; (80006ac <DMA_ClearFlag+0x50>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d802      	bhi.n	8000674 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <DMA_ClearFlag+0x54>)
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	e001      	b.n	8000678 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <DMA_ClearFlag+0x58>)
 8000676:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800067e:	2b00      	cmp	r3, #0
 8000680:	d007      	beq.n	8000692 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000688:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000690:	e006      	b.n	80006a0 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000698:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	6093      	str	r3, [r2, #8]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	4002640f 	.word	0x4002640f
 80006b0:	40026000 	.word	0x40026000
 80006b4:	40026400 	.word	0x40026400

080006b8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00f      	beq.n	80006f0 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	e005      	b.n	80006f0 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2b80      	cmp	r3, #128	; 0x80
 80006f4:	d014      	beq.n	8000720 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	f003 031e 	and.w	r3, r3, #30
 8000706:	431a      	orrs	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 800070c:	e008      	b.n	8000720 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	f003 031e 	and.w	r3, r3, #30
 8000718:	43db      	mvns	r3, r3
 800071a:	401a      	ands	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e076      	b.n	8000836 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000748:	2201      	movs	r2, #1
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d165      	bne.n	8000830 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	2103      	movs	r1, #3
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	401a      	ands	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	4619      	mov	r1, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	431a      	orrs	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d003      	beq.n	80007a2 <GPIO_Init+0x76>
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d12e      	bne.n	8000800 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	2103      	movs	r1, #3
 80007ac:	fa01 f303 	lsl.w	r3, r1, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	401a      	ands	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	795b      	ldrb	r3, [r3, #5]
 80007c0:	4619      	mov	r1, r3
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	431a      	orrs	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	2301      	movs	r3, #1
 80007dc:	408b      	lsls	r3, r1
 80007de:	43db      	mvns	r3, r3
 80007e0:	401a      	ands	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	7992      	ldrb	r2, [r2, #6]
 80007ee:	4611      	mov	r1, r2
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	b292      	uxth	r2, r2
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	b292      	uxth	r2, r2
 80007fa:	431a      	orrs	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	b29b      	uxth	r3, r3
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	2103      	movs	r1, #3
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	401a      	ands	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	79db      	ldrb	r3, [r3, #7]
 8000820:	4619      	mov	r1, r3
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	431a      	orrs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3301      	adds	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d985      	bls.n	8000748 <GPIO_Init+0x1c>
    }
  }
}
 800083c:	bf00      	nop
 800083e:	371c      	adds	r7, #28
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	71da      	strb	r2, [r3, #7]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	887a      	ldrh	r2, [r7, #2]
 800088c:	831a      	strh	r2, [r3, #24]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	887a      	ldrh	r2, [r7, #2]
 80008aa:	835a      	strh	r2, [r3, #26]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008d0:	787a      	ldrb	r2, [r7, #1]
 80008d2:	887b      	ldrh	r3, [r7, #2]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	887b      	ldrh	r3, [r7, #2]
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3208      	adds	r2, #8
 80008f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008f8:	887b      	ldrh	r3, [r7, #2]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	210f      	movs	r1, #15
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	ea02 0103 	and.w	r1, r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f100 0208 	add.w	r2, r0, #8
 8000912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b29b      	uxth	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3208      	adds	r2, #8
 8000922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4313      	orrs	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	b29b      	uxth	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3208      	adds	r2, #8
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <I2C_DeInit+0x68>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d10a      	bne.n	8000972 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800095c:	2101      	movs	r1, #1
 800095e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000962:	f000 fb07 	bl	8000f74 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000966:	2100      	movs	r1, #0
 8000968:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800096c:	f000 fb02 	bl	8000f74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000970:	e01c      	b.n	80009ac <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <I2C_DeInit+0x6c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10a      	bne.n	8000990 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800097a:	2101      	movs	r1, #1
 800097c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000980:	f000 faf8 	bl	8000f74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000984:	2100      	movs	r1, #0
 8000986:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800098a:	f000 faf3 	bl	8000f74 <RCC_APB1PeriphResetCmd>
}
 800098e:	e00d      	b.n	80009ac <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <I2C_DeInit+0x70>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d109      	bne.n	80009ac <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000998:	2101      	movs	r1, #1
 800099a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800099e:	f000 fae9 	bl	8000f74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80009a2:	2100      	movs	r1, #0
 80009a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009a8:	f000 fae4 	bl	8000f74 <RCC_APB1PeriphResetCmd>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40005800 	.word	0x40005800
 80009bc:	40005c00 	.word	0x40005c00

080009c0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80009ce:	2300      	movs	r3, #0
 80009d0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80009d2:	2304      	movs	r3, #4
 80009d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80009d6:	4b57      	ldr	r3, [pc, #348]	; (8000b34 <I2C_Init+0x174>)
 80009d8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80009e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009e6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f9d9 	bl	8000da4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <I2C_Init+0x178>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0c9b      	lsrs	r3, r3, #18
 8000a00:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000a02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a06:	4313      	orrs	r3, r2
 8000a08:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a0e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <I2C_Init+0x17c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d815      	bhi.n	8000a5a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d801      	bhi.n	8000a46 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000a42:	2304      	movs	r3, #4
 8000a44:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000a46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000a4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a50:	3301      	adds	r3, #1
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	841a      	strh	r2, [r3, #32]
 8000a58:	e040      	b.n	8000adc <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	88db      	ldrh	r3, [r3, #6]
 8000a5e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d109      	bne.n	8000a7a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000a78:	e00e      	b.n	8000a98 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	009a      	lsls	r2, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	69fa      	ldr	r2, [r7, #28]
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a96:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000aaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000aac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000aba:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ac2:	fb02 f303 	mul.w	r3, r2, r3
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <I2C_Init+0x180>)
 8000ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8000acc:	1192      	asrs	r2, r2, #6
 8000ace:	17db      	asrs	r3, r3, #31
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ae0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000af8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000afa:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000afe:	f023 0302 	bic.w	r3, r3, #2
 8000b02:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	889a      	ldrh	r2, [r3, #4]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	895b      	ldrh	r3, [r3, #10]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b12:	4313      	orrs	r3, r2
 8000b14:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b1a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	899a      	ldrh	r2, [r3, #12]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	891b      	ldrh	r3, [r3, #8]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	811a      	strh	r2, [r3, #8]
}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	007a1200 	.word	0x007a1200
 8000b38:	431bde83 	.word	0x431bde83
 8000b3c:	000186a0 	.word	0x000186a0
 8000b40:	10624dd3 	.word	0x10624dd3

08000b44 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000b66:	e007      	b.n	8000b78 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f023 0301 	bic.w	r3, r3, #1
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	801a      	strh	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d008      	beq.n	8000ba8 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000ba6:	e007      	b.n	8000bb8 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	801a      	strh	r2, [r3, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d008      	beq.n	8000be8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000be6:	e007      	b.n	8000bf8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	801a      	strh	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
 8000c10:	4613      	mov	r3, r2
 8000c12:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000c14:	78bb      	ldrb	r3, [r7, #2]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	70fb      	strb	r3, [r7, #3]
 8000c22:	e003      	b.n	8000c2c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	f023 0301 	bic.w	r3, r3, #1
 8000c2a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	821a      	strh	r2, [r3, #16]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d008      	beq.n	8000c64 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8000c62:	e007      	b.n	8000c74 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	801a      	strh	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	821a      	strh	r2, [r3, #16]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	8a1b      	ldrh	r3, [r3, #16]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	8a9b      	ldrh	r3, [r3, #20]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	8b1b      	ldrh	r3, [r3, #24]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cf6:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d102      	bne.n	8000d0a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000d04:	2301      	movs	r3, #1
 8000d06:	75fb      	strb	r3, [r7, #23]
 8000d08:	e001      	b.n	8000d0e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	0f1b      	lsrs	r3, r3, #28
 8000d3a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d42:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3314      	adds	r3, #20
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	e005      	b.n	8000d5e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	0c1b      	lsrs	r3, r3, #16
 8000d56:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3318      	adds	r3, #24
 8000d5c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	75fb      	strb	r3, [r7, #23]
 8000d6e:	e001      	b.n	8000d74 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <RCC_PLLI2SCmd+0x1c>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	42470068 	.word	0x42470068

08000da4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
 8000dcc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d007      	beq.n	8000de4 <RCC_GetClocksFreq+0x40>
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d009      	beq.n	8000dec <RCC_GetClocksFreq+0x48>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d13d      	bne.n	8000e58 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a42      	ldr	r2, [pc, #264]	; (8000ee8 <RCC_GetClocksFreq+0x144>)
 8000de0:	601a      	str	r2, [r3, #0]
      break;
 8000de2:	e03d      	b.n	8000e60 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a41      	ldr	r2, [pc, #260]	; (8000eec <RCC_GetClocksFreq+0x148>)
 8000de8:	601a      	str	r2, [r3, #0]
      break;
 8000dea:	e039      	b.n	8000e60 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000dec:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	0d9b      	lsrs	r3, r3, #22
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000df8:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e00:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00c      	beq.n	8000e22 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e08:	4a38      	ldr	r2, [pc, #224]	; (8000eec <RCC_GetClocksFreq+0x148>)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e10:	4a34      	ldr	r2, [pc, #208]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000e12:	6852      	ldr	r2, [r2, #4]
 8000e14:	0992      	lsrs	r2, r2, #6
 8000e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	e00b      	b.n	8000e3a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <RCC_GetClocksFreq+0x144>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000e2c:	6852      	ldr	r2, [r2, #4]
 8000e2e:	0992      	lsrs	r2, r2, #6
 8000e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	0c1b      	lsrs	r3, r3, #16
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	3301      	adds	r3, #1
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
      break;
 8000e56:	e003      	b.n	8000e60 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <RCC_GetClocksFreq+0x144>)
 8000e5c:	601a      	str	r2, [r3, #0]
      break;
 8000e5e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e60:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e68:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <RCC_GetClocksFreq+0x14c>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000e90:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	0a9b      	lsrs	r3, r3, #10
 8000e96:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e98:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <RCC_GetClocksFreq+0x14c>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <RCC_GetClocksFreq+0x140>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000eb8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	0b5b      	lsrs	r3, r3, #13
 8000ebe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <RCC_GetClocksFreq+0x14c>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3724      	adds	r7, #36	; 0x24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	00f42400 	.word	0x00f42400
 8000eec:	007a1200 	.word	0x007a1200
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000f06:	490a      	ldr	r1, [pc, #40]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000f12:	e006      	b.n	8000f22 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000f14:	4906      	ldr	r1, [pc, #24]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f46:	490a      	ldr	r1, [pc, #40]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000f52:	e006      	b.n	8000f62 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f54:	4906      	ldr	r1, [pc, #24]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f86:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f8a:	6a1a      	ldr	r2, [r3, #32]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000f92:	e006      	b.n	8000fa2 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f94:	4906      	ldr	r1, [pc, #24]	; (8000fb0 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f98:	6a1a      	ldr	r2, [r3, #32]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	620b      	str	r3, [r1, #32]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000fc6:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000fd2:	e006      	b.n	8000fe2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000fd4:	4906      	ldr	r1, [pc, #24]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ffe:	f7ff ffd9 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8001002:	2100      	movs	r1, #0
 8001004:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001008:	f7ff ffd4 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <SDIO_Init+0x5c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8001028:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800102c:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7d1b      	ldrb	r3, [r3, #20]
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800103e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800104a:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4313      	orrs	r3, r2
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <SDIO_Init+0x5c>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6053      	str	r3, [r2, #4]
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40012c00 	.word	0x40012c00

08001070 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <SDIO_ClockCmd+0x1c>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	422580a0 	.word	0x422580a0

08001090 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <SDIO_SetPowerState+0x1c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40012c00 	.word	0x40012c00

080010b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SDIO_GetPowerState+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0303 	and.w	r3, r3, #3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40012c00 	.word	0x40012c00

080010cc <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <SDIO_SendCommand+0x54>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6093      	str	r3, [r2, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <SDIO_SendCommand+0x54>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <SDIO_SendCommand+0x54>)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40012c00 	.word	0x40012c00

08001124 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <SDIO_GetCommandResponse+0x14>)
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40012c00 	.word	0x40012c00

0800113c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SDIO_GetResponse+0x24>)
 800114c:	4413      	add	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40012c14 	.word	0x40012c14

08001164 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <SDIO_DataConfig+0x58>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6253      	str	r3, [r2, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <SDIO_DataConfig+0x58>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	6293      	str	r3, [r2, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <SDIO_DataConfig+0x58>)
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800118c:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <SDIO_DataConfig+0x58>)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40012c00 	.word	0x40012c00

080011c0 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <SDIO_ReadData+0x14>)
 80011c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40012c00 	.word	0x40012c00

080011d8 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <SDIO_DMACmd+0x1c>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	4225858c 	.word	0x4225858c

080011f8 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SDIO_GetFlagStatus+0x30>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e001      	b.n	800121a <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40012c00 	.word	0x40012c00

0800122c <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <SDIO_GetITStatus+0x30>)
 800123a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e001      	b.n	800124e <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40012c00 	.word	0x40012c00

08001260 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <SDIO_ClearITPendingBit+0x1c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40012c00 	.word	0x40012c00

08001280 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <SPI_I2S_DeInit+0xc4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d10a      	bne.n	80012a6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001290:	2101      	movs	r1, #1
 8001292:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001296:	f7ff fe8d 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800129a:	2100      	movs	r1, #0
 800129c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012a0:	f7ff fe88 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80012a4:	e049      	b.n	800133a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <SPI_I2S_DeInit+0xc8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10a      	bne.n	80012c4 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80012ae:	2101      	movs	r1, #1
 80012b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012b4:	f7ff fe5e 	bl	8000f74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80012b8:	2100      	movs	r1, #0
 80012ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012be:	f7ff fe59 	bl	8000f74 <RCC_APB1PeriphResetCmd>
}
 80012c2:	e03a      	b.n	800133a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a21      	ldr	r2, [pc, #132]	; (800134c <SPI_I2S_DeInit+0xcc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d10a      	bne.n	80012e2 <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80012cc:	2101      	movs	r1, #1
 80012ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012d2:	f7ff fe4f 	bl	8000f74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80012d6:	2100      	movs	r1, #0
 80012d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012dc:	f7ff fe4a 	bl	8000f74 <RCC_APB1PeriphResetCmd>
}
 80012e0:	e02b      	b.n	800133a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <SPI_I2S_DeInit+0xd0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10a      	bne.n	8001300 <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80012ea:	2101      	movs	r1, #1
 80012ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012f0:	f7ff fe60 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80012f4:	2100      	movs	r1, #0
 80012f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012fa:	f7ff fe5b 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
}
 80012fe:	e01c      	b.n	800133a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <SPI_I2S_DeInit+0xd4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d10a      	bne.n	800131e <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001308:	2101      	movs	r1, #1
 800130a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800130e:	f7ff fe51 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001312:	2100      	movs	r1, #0
 8001314:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001318:	f7ff fe4c 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
}
 800131c:	e00d      	b.n	800133a <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <SPI_I2S_DeInit+0xd8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d109      	bne.n	800133a <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001326:	2101      	movs	r1, #1
 8001328:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800132c:	f7ff fe42 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001330:	2100      	movs	r1, #0
 8001332:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001336:	f7ff fe3d 	bl	8000fb4 <RCC_APB2PeriphResetCmd>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40013000 	.word	0x40013000
 8001348:	40003800 	.word	0x40003800
 800134c:	40003c00 	.word	0x40003c00
 8001350:	40013400 	.word	0x40013400
 8001354:	40015000 	.word	0x40015000
 8001358:	40015400 	.word	0x40015400

0800135c <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800135c:	b480      	push	{r7}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8001366:	2300      	movs	r3, #0
 8001368:	837b      	strh	r3, [r7, #26]
 800136a:	2302      	movs	r3, #2
 800136c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800136e:	2300      	movs	r3, #0
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001372:	2301      	movs	r3, #1
 8001374:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8b9b      	ldrh	r3, [r3, #28]
 800138e:	b29b      	uxth	r3, r3
 8001390:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001394:	f023 030f 	bic.w	r3, r3, #15
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2202      	movs	r2, #2
 80013a2:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	8b9b      	ldrh	r3, [r3, #28]
 80013a8:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d104      	bne.n	80013bc <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80013b6:	2302      	movs	r3, #2
 80013b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013ba:	e06d      	b.n	8001498 <I2S_Init+0x13c>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	889b      	ldrh	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80013c8:	e001      	b.n	80013ce <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <I2S_Init+0x1a0>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80013da:	4a48      	ldr	r2, [pc, #288]	; (80014fc <I2S_Init+0x1a0>)
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <I2S_Init+0x1a0>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013e4:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <I2S_Init+0x1a0>)
 80013e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f2:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80013f4:	4b41      	ldr	r3, [pc, #260]	; (80014fc <I2S_Init+0x1a0>)
 80013f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013fa:	0f1b      	lsrs	r3, r3, #28
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <I2S_Init+0x1a0>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800140a:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800140c:	4a3c      	ldr	r2, [pc, #240]	; (8001500 <I2S_Init+0x1a4>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	fb02 f203 	mul.w	r2, r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	88db      	ldrh	r3, [r3, #6]
 8001426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142a:	d10f      	bne.n	800144c <I2S_Init+0xf0>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	0a1a      	lsrs	r2, r3, #8
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	461a      	mov	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	3305      	adds	r3, #5
 8001446:	b29b      	uxth	r3, r3
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e012      	b.n	8001472 <I2S_Init+0x116>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800144c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800144e:	015b      	lsls	r3, r3, #5
 8001450:	461a      	mov	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fbb3 f2f2 	udiv	r2, r3, r2
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	461a      	mov	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	3305      	adds	r3, #5
 800146e:	b29b      	uxth	r3, r3
 8001470:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4a23      	ldr	r2, [pc, #140]	; (8001504 <I2S_Init+0x1a8>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	b29b      	uxth	r3, r3
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800149a:	2b01      	cmp	r3, #1
 800149c:	d902      	bls.n	80014a4 <I2S_Init+0x148>
 800149e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d903      	bls.n	80014ac <I2S_Init+0x150>
  {
    /* Set the default values */
    i2sdiv = 2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	88da      	ldrh	r2, [r3, #6]
 80014b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	8859      	ldrh	r1, [r3, #2]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80014d0:	4303      	orrs	r3, r0
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	430b      	orrs	r3, r1
 80014d6:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80014d8:	4313      	orrs	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	8b7b      	ldrh	r3, [r7, #26]
 80014de:	4313      	orrs	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e6:	837b      	strh	r3, [r7, #26]
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	8b7a      	ldrh	r2, [r7, #26]
 80014ec:	839a      	strh	r2, [r3, #28]
}
 80014ee:	bf00      	nop
 80014f0:	372c      	adds	r7, #44	; 0x2c
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	007a1200 	.word	0x007a1200
 8001504:	cccccccd 	.word	0xcccccccd

08001508 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	8b9b      	ldrh	r3, [r3, #28]
 800151e:	b29b      	uxth	r3, r3
 8001520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001524:	b29a      	uxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800152a:	e007      	b.n	800153c <I2S_Cmd+0x34>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	8b9b      	ldrh	r3, [r3, #28]
 8001530:	b29b      	uxth	r3, r3
 8001532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	839a      	strh	r2, [r3, #28]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	819a      	strh	r2, [r3, #12]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	891b      	ldrh	r3, [r3, #8]
 800157a:	b29a      	uxth	r2, r3
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	4013      	ands	r3, r2
 8001580:	b29b      	uxth	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e001      	b.n	8001590 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <SysTick_Handler+0xe4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a35      	ldr	r2, [pc, #212]	; (8001684 <SysTick_Handler+0xe4>)
 80015ae:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <SysTick_Handler+0xe8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d004      	beq.n	80015c2 <SysTick_Handler+0x22>
		TM_Time2--;
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <SysTick_Handler+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	4a32      	ldr	r2, [pc, #200]	; (8001688 <SysTick_Handler+0xe8>)
 80015c0:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 80015c2:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	e052      	b.n	8001672 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4a2f      	ldr	r2, [pc, #188]	; (800168c <SysTick_Handler+0xec>)
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	685b      	ldr	r3, [r3, #4]
		if (
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d048      	beq.n	800166c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4a2b      	ldr	r2, [pc, #172]	; (800168c <SysTick_Handler+0xec>)
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <SysTick_Handler+0xec>)
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d038      	beq.n	800166c <SysTick_Handler+0xcc>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4a23      	ldr	r2, [pc, #140]	; (800168c <SysTick_Handler+0xec>)
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	3a01      	subs	r2, #1
 8001608:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4a1f      	ldr	r2, [pc, #124]	; (800168c <SysTick_Handler+0xec>)
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d128      	bne.n	800166c <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <SysTick_Handler+0xec>)
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4918      	ldr	r1, [pc, #96]	; (800168c <SysTick_Handler+0xec>)
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4618      	mov	r0, r3
 8001634:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <SysTick_Handler+0xec>)
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4912      	ldr	r1, [pc, #72]	; (800168c <SysTick_Handler+0xec>)
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <SysTick_Handler+0xec>)
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d106      	bne.n	800166c <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Handler+0xec>)
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3301      	adds	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <SysTick_Handler+0xec>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3a7      	bcc.n	80015cc <SysTick_Handler+0x2c>
				}
			}
		}
	}
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000016c 	.word	0x2000016c
 8001688:	20000170 	.word	0x20000170
 800168c:	20000174 	.word	0x20000174

08001690 <disk_initialize>:
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber (0..) */
)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_initialize) {
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <disk_initialize+0x40>)
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00a      	beq.n	80016c4 <disk_initialize+0x34>
		return FATFS_LowLevelDrivers[pdrv].disk_initialize();
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <disk_initialize+0x40>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4798      	blx	r3
 80016c0:	4603      	mov	r3, r0
 80016c2:	e000      	b.n	80016c6 <disk_initialize+0x36>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80016c4:	2304      	movs	r3, #4
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000010 	.word	0x20000010

080016d4 <disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0..) */
)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_status) {
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	490d      	ldr	r1, [pc, #52]	; (8001718 <disk_status+0x44>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <disk_status+0x38>
		return FATFS_LowLevelDrivers[pdrv].disk_status();
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <disk_status+0x44>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3304      	adds	r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4798      	blx	r3
 8001708:	4603      	mov	r3, r0
 800170a:	e000      	b.n	800170e <disk_status+0x3a>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 800170c:	2304      	movs	r3, #4
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000010 	.word	0x20000010

0800171c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <disk_read+0x1a>
		return RES_PARERR;
 8001732:	2304      	movs	r3, #4
 8001734:	e01a      	b.n	800176c <disk_read+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_read) {
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <disk_read+0x58>)
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3310      	adds	r3, #16
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00e      	beq.n	800176a <disk_read+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_read(buff, sector, count);
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	4909      	ldr	r1, [pc, #36]	; (8001774 <disk_read+0x58>)
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3310      	adds	r3, #16
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	68b8      	ldr	r0, [r7, #8]
 8001764:	4798      	blx	r3
 8001766:	4603      	mov	r3, r0
 8001768:	e000      	b.n	800176c <disk_read+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 800176a:	2304      	movs	r3, #4
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000010 	.word	0x20000010

08001778 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <disk_write+0x1a>
		return RES_PARERR;
 800178e:	2304      	movs	r3, #4
 8001790:	e01a      	b.n	80017c8 <disk_write+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_write) {
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <disk_write+0x58>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	330c      	adds	r3, #12
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <disk_write+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_write(buff, sector, count);
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	4909      	ldr	r1, [pc, #36]	; (80017d0 <disk_write+0x58>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	330c      	adds	r3, #12
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	4798      	blx	r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	e000      	b.n	80017c8 <disk_write+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80017c6:	2304      	movs	r3, #4
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000010 	.word	0x20000010

080017d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	603a      	str	r2, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
 80017e0:	460b      	mov	r3, r1
 80017e2:	71bb      	strb	r3, [r7, #6]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_ioctl) {
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	490f      	ldr	r1, [pc, #60]	; (8001824 <disk_ioctl+0x50>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	3308      	adds	r3, #8
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00e      	beq.n	8001818 <disk_ioctl+0x44>
		return FATFS_LowLevelDrivers[pdrv].disk_ioctl(cmd, buff);
 80017fa:	79fa      	ldrb	r2, [r7, #7]
 80017fc:	4909      	ldr	r1, [pc, #36]	; (8001824 <disk_ioctl+0x50>)
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3308      	adds	r3, #8
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	79ba      	ldrb	r2, [r7, #6]
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	4610      	mov	r0, r2
 8001812:	4798      	blx	r3
 8001814:	4603      	mov	r3, r0
 8001816:	e000      	b.n	800181a <disk_ioctl+0x46>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 8001818:	2304      	movs	r3, #4
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000010 	.word	0x20000010

08001828 <get_fattime>:
#endif

/*-----------------------------------------------------------------------*/
/* Get time for fatfs for files                                          */
/*-----------------------------------------------------------------------*/
__weak DWORD get_fattime(void) {
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	/* Returns current time packed into a DWORD variable */
	return	  ((DWORD)(2013 - 1980) << 25)	/* Year 2013 */
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <get_fattime+0x10>)
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	42fc0000 	.word	0x42fc0000

0800183c <TM_FATFS_USB_disk_initialize>:

/* Function declarations to prevent link errors if functions are not found */
__weak DSTATUS TM_FATFS_SD_SDIO_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_USB_disk_initialize(void) {return RES_ERROR;}
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
 8001840:	2301      	movs	r3, #1
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <TM_FATFS_SDRAM_disk_initialize>:
__weak DSTATUS TM_FATFS_SDRAM_disk_initialize(void) {return RES_ERROR;}
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
 8001850:	2301      	movs	r3, #1
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <TM_FATFS_SPI_FLASH_disk_initialize>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_initialize(void) {return RES_ERROR;}
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
 8001860:	2301      	movs	r3, #1
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <TM_FATFS_USB_disk_status>:

__weak DSTATUS TM_FATFS_SD_SDIO_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_USB_disk_status(void) {return RES_ERROR;}
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
 8001870:	2301      	movs	r3, #1
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <TM_FATFS_SDRAM_disk_status>:
__weak DSTATUS TM_FATFS_SDRAM_disk_status(void) {return RES_ERROR;}
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
 8001880:	2301      	movs	r3, #1
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <TM_FATFS_SPI_FLASH_disk_status>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_status(void) {return RES_ERROR;}
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
 8001890:	2301      	movs	r3, #1
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <TM_FATFS_USB_disk_ioctl>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	2301      	movs	r3, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <TM_FATFS_SDRAM_disk_ioctl>:
__weak DRESULT TM_FATFS_SDRAM_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	6039      	str	r1, [r7, #0]
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	2301      	movs	r3, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <TM_FATFS_SPI_FLASH_disk_ioctl>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	2301      	movs	r3, #1
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <TM_FATFS_USB_disk_read>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	2301      	movs	r3, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <TM_FATFS_SDRAM_disk_read>:
__weak DRESULT TM_FATFS_SDRAM_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	2301      	movs	r3, #1
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <TM_FATFS_SPI_FLASH_disk_read>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	2301      	movs	r3, #1
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <TM_FATFS_USB_disk_write>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	2301      	movs	r3, #1
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <TM_FATFS_SDRAM_disk_write>:
__weak DRESULT TM_FATFS_SDRAM_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	2301      	movs	r3, #1
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <TM_FATFS_SPI_FLASH_disk_write>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	2301      	movs	r3, #1
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <TM_FATFS_SDIO_WriteEnabled>:

static volatile DSTATUS TM_FATFS_SD_SDIO_Stat = STA_NOINIT;	/* Physical drive status */

#define BLOCK_SIZE            512

uint8_t TM_FATFS_SDIO_WriteEnabled(void) {
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
#if FATFS_USE_WRITEPROTECT_PIN > 0
	return !TM_GPIO_GetInputPinValue(FATFS_USE_WRITEPROTECT_PIN_PORT, FATFS_USE_WRITEPROTECT_PIN_PIN);
#else
	return 1;
 800198a:	2301      	movs	r3, #1
#endif
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <TM_FATFS_SD_SDIO_disk_initialize>:

DSTATUS TM_FATFS_SD_SDIO_disk_initialize(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
#if FATFS_USE_WRITEPROTECT_PIN > 0
	TM_GPIO_Init(FATFS_USE_WRITEPROTECT_PIN_PORT, FATFS_USE_WRITEPROTECT_PIN_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
#endif
	
	// Configure the NVIC Preemption Priority Bits 
	NVIC_PriorityGroupConfig (NVIC_PriorityGroup_1);
 800199e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80019a2:	f7fe fc11 	bl	80001c8 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
 80019a6:	2331      	movs	r3, #49	; 0x31
 80019a8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init (&NVIC_InitStructure);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fc19 	bl	80001f0 <NVIC_Init>
	NVIC_InitStructure.NVIC_IRQChannel = SD_SDIO_DMA_IRQn;
 80019be:	233b      	movs	r3, #59	; 0x3b
 80019c0:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	717b      	strb	r3, [r7, #5]
	NVIC_Init (&NVIC_InitStructure);
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fc11 	bl	80001f0 <NVIC_Init>
	
	SD_LowLevel_DeInit();
 80019ce:	f001 fe5b 	bl	8003688 <SD_LowLevel_DeInit>
	SD_LowLevel_Init();
 80019d2:	f001 fe85 	bl	80036e0 <SD_LowLevel_Init>
	
	//Check disk initialized
	if (SD_Init() == SD_OK) {
 80019d6:	f000 f9af 	bl	8001d38 <SD_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d108      	bne.n	80019f2 <TM_FATFS_SD_SDIO_disk_initialize+0x5a>
		TM_FATFS_SD_SDIO_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e007      	b.n	8001a02 <TM_FATFS_SD_SDIO_disk_initialize+0x6a>
	} else {
		TM_FATFS_SD_SDIO_Stat |= STA_NOINIT;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 8001a00:	701a      	strb	r2, [r3, #0]
	}
	//Check write protected
	if (!TM_FATFS_SDIO_WriteEnabled()) {
 8001a02:	f7ff ffc0 	bl	8001986 <TM_FATFS_SDIO_WriteEnabled>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d108      	bne.n	8001a1e <TM_FATFS_SD_SDIO_disk_initialize+0x86>
		TM_FATFS_SD_SDIO_Stat |= STA_PROTECT;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e007      	b.n	8001a2e <TM_FATFS_SD_SDIO_disk_initialize+0x96>
	} else {
		TM_FATFS_SD_SDIO_Stat &= ~STA_PROTECT;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 8001a2c:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_SDIO_Stat;
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <TM_FATFS_SD_SDIO_disk_initialize+0xa4>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200000c4 	.word	0x200000c4

08001a40 <TM_FATFS_SD_SDIO_disk_status>:

DSTATUS TM_FATFS_SD_SDIO_disk_status(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	if (SD_Detect() != SD_PRESENT) {
 8001a44:	f000 fa0b 	bl	8001e5e <SD_Detect>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <TM_FATFS_SD_SDIO_disk_status+0x12>
		return STA_NOINIT;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e018      	b.n	8001a84 <TM_FATFS_SD_SDIO_disk_status+0x44>
	}
	
	if (!TM_FATFS_SDIO_WriteEnabled()) {
 8001a52:	f7ff ff98 	bl	8001986 <TM_FATFS_SDIO_WriteEnabled>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d108      	bne.n	8001a6e <TM_FATFS_SD_SDIO_disk_status+0x2e>
		TM_FATFS_SD_SDIO_Stat |= STA_PROTECT;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <TM_FATFS_SD_SDIO_disk_status+0x48>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <TM_FATFS_SD_SDIO_disk_status+0x48>)
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e007      	b.n	8001a7e <TM_FATFS_SD_SDIO_disk_status+0x3e>
	} else {
		TM_FATFS_SD_SDIO_Stat &= ~STA_PROTECT;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <TM_FATFS_SD_SDIO_disk_status+0x48>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <TM_FATFS_SD_SDIO_disk_status+0x48>)
 8001a7c:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_SDIO_Stat;
 8001a7e:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <TM_FATFS_SD_SDIO_disk_status+0x48>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200000c4 	.word	0x200000c4

08001a8c <TM_FATFS_SD_SDIO_disk_read>:

DRESULT TM_FATFS_SD_SDIO_disk_read(BYTE *buff, DWORD sector, UINT count) {
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001a92:	af02      	add	r7, sp, #8
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	6018      	str	r0, [r3, #0]
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	6019      	str	r1, [r3, #0]
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	601a      	str	r2, [r3, #0]
	SD_Error Status = SD_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216

	if ((TM_FATFS_SD_SDIO_Stat & STA_NOINIT)) {
 8001aaa:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <TM_FATFS_SD_SDIO_disk_read+0x11c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <TM_FATFS_SD_SDIO_disk_read+0x30>
		return RES_NOTRDY;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e070      	b.n	8001b9e <TM_FATFS_SD_SDIO_disk_read+0x112>
	}
	
	if ((DWORD)buff & 3) {
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d034      	beq.n	8001b34 <TM_FATFS_SD_SDIO_disk_read+0xa8>
		DRESULT res = RES_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		DWORD scratch[BLOCK_SIZE / 4];

		while (count--) {
 8001ad0:	e024      	b.n	8001b1c <TM_FATFS_SD_SDIO_disk_read+0x90>
			res = TM_FATFS_SD_SDIO_disk_read((void *)scratch, sector++, 1);
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f107 0208 	add.w	r2, r7, #8
 8001adc:	1c59      	adds	r1, r3, #1
 8001ade:	6011      	str	r1, [r2, #0]
 8001ae0:	f107 0014 	add.w	r0, r7, #20
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff ffd0 	bl	8001a8c <TM_FATFS_SD_SDIO_disk_read>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

			if (res != RES_OK) {
 8001af2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <TM_FATFS_SD_SDIO_disk_read+0xa0>
				break;
			}

			memcpy(buff, scratch, BLOCK_SIZE);
 8001afa:	f107 0114 	add.w	r1, r7, #20
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f005 fc26 	bl	8007358 <memcpy>

			buff += BLOCK_SIZE;
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	f107 020c 	add.w	r2, r7, #12
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001b1a:	601a      	str	r2, [r3, #0]
		while (count--) {
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	1d3a      	adds	r2, r7, #4
 8001b22:	1e59      	subs	r1, r3, #1
 8001b24:	6011      	str	r1, [r2, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1d3      	bne.n	8001ad2 <TM_FATFS_SD_SDIO_disk_read+0x46>
 8001b2a:	e000      	b.n	8001b2e <TM_FATFS_SD_SDIO_disk_read+0xa2>
				break;
 8001b2c:	bf00      	nop
		}

		return res;
 8001b2e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8001b32:	e034      	b.n	8001b9e <TM_FATFS_SD_SDIO_disk_read+0x112>
	}

	Status = SD_ReadMultiBlocks(buff, sector << 9, BLOCK_SIZE, count);
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	f04f 0400 	mov.w	r4, #0
 8001b40:	f107 010c 	add.w	r1, r7, #12
 8001b44:	1d3a      	adds	r2, r7, #4
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	9201      	str	r2, [sp, #4]
 8001b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	6808      	ldr	r0, [r1, #0]
 8001b56:	f000 fec1 	bl	80028dc <SD_ReadMultiBlocks>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216

	if (Status == SD_OK) {
 8001b60:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d119      	bne.n	8001b9c <TM_FATFS_SD_SDIO_disk_read+0x110>
		SDTransferState State;

		Status = SD_WaitReadOperation();
 8001b68:	f000 ff54 	bl	8002a14 <SD_WaitReadOperation>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216

		while ((State = SD_GetStatus()) == SD_TRANSFER_BUSY);
 8001b72:	f000 f93d 	bl	8001df0 <SD_GetStatus>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8001b7c:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d0f6      	beq.n	8001b72 <TM_FATFS_SD_SDIO_disk_read+0xe6>

		if ((State == SD_TRANSFER_ERROR) || (Status != SD_OK)) {
 8001b84:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d003      	beq.n	8001b94 <TM_FATFS_SD_SDIO_disk_read+0x108>
 8001b8c:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <TM_FATFS_SD_SDIO_disk_read+0x10c>
			return RES_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e002      	b.n	8001b9e <TM_FATFS_SD_SDIO_disk_read+0x112>
		} else {
			return RES_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <TM_FATFS_SD_SDIO_disk_read+0x112>
		}			
	} else {
		return RES_ERROR;
 8001b9c:	2301      	movs	r3, #1
	}
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	200000c4 	.word	0x200000c4

08001bac <TM_FATFS_SD_SDIO_disk_write>:

DRESULT TM_FATFS_SD_SDIO_disk_write(const BYTE *buff, DWORD sector, UINT count) {
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	6018      	str	r0, [r3, #0]
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	6019      	str	r1, [r3, #0]
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	601a      	str	r2, [r3, #0]
	SD_Error Status = SD_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216

	if (!TM_FATFS_SDIO_WriteEnabled()) {
 8001bca:	f7ff fedc 	bl	8001986 <TM_FATFS_SDIO_WriteEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <TM_FATFS_SD_SDIO_disk_write+0x2c>
		return RES_WRPRT;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e077      	b.n	8001cc8 <TM_FATFS_SD_SDIO_disk_write+0x11c>
	}

	if (SD_Detect() != SD_PRESENT) {
 8001bd8:	f000 f941 	bl	8001e5e <SD_Detect>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <TM_FATFS_SD_SDIO_disk_write+0x3a>
		return RES_NOTRDY;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e070      	b.n	8001cc8 <TM_FATFS_SD_SDIO_disk_write+0x11c>
	}

	if ((DWORD)buff & 3) {
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d034      	beq.n	8001c5e <TM_FATFS_SD_SDIO_disk_write+0xb2>
		DRESULT res = RES_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		DWORD scratch[BLOCK_SIZE / 4];

		while (count--) {
 8001bfa:	e024      	b.n	8001c46 <TM_FATFS_SD_SDIO_disk_write+0x9a>
			memcpy(scratch, buff, BLOCK_SIZE);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	f107 0014 	add.w	r0, r7, #20
 8001c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	f005 fba5 	bl	8007358 <memcpy>
			res = TM_FATFS_SD_SDIO_disk_write((void *)scratch, sector++, 1);
 8001c0e:	f107 0308 	add.w	r3, r7, #8
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f107 0208 	add.w	r2, r7, #8
 8001c18:	1c59      	adds	r1, r3, #1
 8001c1a:	6011      	str	r1, [r2, #0]
 8001c1c:	f107 0014 	add.w	r0, r7, #20
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7ff ffc2 	bl	8001bac <TM_FATFS_SD_SDIO_disk_write>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

			if (res != RES_OK) {
 8001c2e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <TM_FATFS_SD_SDIO_disk_write+0xaa>
				break;
			}

			buff += BLOCK_SIZE;
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	f107 020c 	add.w	r2, r7, #12
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001c44:	601a      	str	r2, [r3, #0]
		while (count--) {
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1d3a      	adds	r2, r7, #4
 8001c4c:	1e59      	subs	r1, r3, #1
 8001c4e:	6011      	str	r1, [r2, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1d3      	bne.n	8001bfc <TM_FATFS_SD_SDIO_disk_write+0x50>
 8001c54:	e000      	b.n	8001c58 <TM_FATFS_SD_SDIO_disk_write+0xac>
				break;
 8001c56:	bf00      	nop
		}

		return(res);
 8001c58:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8001c5c:	e034      	b.n	8001cc8 <TM_FATFS_SD_SDIO_disk_write+0x11c>
	}

	Status = SD_WriteMultiBlocks((uint8_t *)buff, sector << 9, BLOCK_SIZE, count); // 4GB Compliant
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	f04f 0400 	mov.w	r4, #0
 8001c6a:	f107 010c 	add.w	r1, r7, #12
 8001c6e:	1d3a      	adds	r2, r7, #4
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	9201      	str	r2, [sp, #4]
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	9200      	str	r2, [sp, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	6808      	ldr	r0, [r1, #0]
 8001c80:	f000 ff26 	bl	8002ad0 <SD_WriteMultiBlocks>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216

	if (Status == SD_OK) {
 8001c8a:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d119      	bne.n	8001cc6 <TM_FATFS_SD_SDIO_disk_write+0x11a>
		SDTransferState State;

		Status = SD_WaitWriteOperation(); // Check if the Transfer is finished
 8001c92:	f000 fff7 	bl	8002c84 <SD_WaitWriteOperation>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216

		while ((State = SD_GetStatus()) == SD_TRANSFER_BUSY); // BUSY, OK (DONE), ERROR (FAIL)
 8001c9c:	f000 f8a8 	bl	8001df0 <SD_GetStatus>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8001ca6:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d0f6      	beq.n	8001c9c <TM_FATFS_SD_SDIO_disk_write+0xf0>

		if ((State == SD_TRANSFER_ERROR) || (Status != SD_OK)) {
 8001cae:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <TM_FATFS_SD_SDIO_disk_write+0x112>
 8001cb6:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <TM_FATFS_SD_SDIO_disk_write+0x116>
			return RES_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e002      	b.n	8001cc8 <TM_FATFS_SD_SDIO_disk_write+0x11c>
		} else {
			return RES_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <TM_FATFS_SD_SDIO_disk_write+0x11c>
		}
	} else {
		return RES_ERROR;
 8001cc6:	2301      	movs	r3, #1
	}
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
	...

08001cd4 <TM_FATFS_SD_SDIO_disk_ioctl>:

DRESULT TM_FATFS_SD_SDIO_disk_ioctl(BYTE cmd, void *buff) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
	switch (cmd) {
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d815      	bhi.n	8001d12 <TM_FATFS_SD_SDIO_disk_ioctl+0x3e>
 8001ce6:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <TM_FATFS_SD_SDIO_disk_ioctl+0x18>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d13 	.word	0x08001d13
 8001cf0:	08001d13 	.word	0x08001d13
 8001cf4:	08001d01 	.word	0x08001d01
 8001cf8:	08001d0b 	.word	0x08001d0b
 8001cfc:	08001d13 	.word	0x08001d13
		case GET_SECTOR_SIZE :     // Get R/W sector size (WORD) 
			*(WORD *) buff = 512;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	801a      	strh	r2, [r3, #0]
		break;
 8001d08:	e003      	b.n	8001d12 <TM_FATFS_SD_SDIO_disk_ioctl+0x3e>
		case GET_BLOCK_SIZE :      // Get erase block size in unit of sector (DWORD)
			*(DWORD *) buff = 32;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	601a      	str	r2, [r3, #0]
		break;
 8001d10:	bf00      	nop
		case CTRL_SYNC :
		case CTRL_ERASE_SECTOR :
		break;
	}

	return RES_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	SD_ProcessIRQSrc();
 8001d24:	f001 f86c 	bl	8002e00 <SD_ProcessIRQSrc>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <DMA2_Stream3_IRQHandler>:

#ifdef SD_SDIO_DMA_STREAM3
void DMA2_Stream3_IRQHandler(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	SD_ProcessDMAIRQ();
 8001d30:	f001 f8d0 	bl	8002ed4 <SD_ProcessDMAIRQ>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <SD_Init>:
 *         transfer).
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_Init (void)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
	__IO SD_Error errorstatus = SD_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	71fb      	strb	r3, [r7, #7]

	/* SDIO Peripheral Low Level Init */
	//SD_LowLevel_Init();
	SDIO_DeInit ();
 8001d42:	f7ff f957 	bl	8000ff4 <SDIO_DeInit>
	errorstatus = SD_PowerON ();
 8001d46:	f000 f89d 	bl	8001e84 <SD_PowerON>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]

	if (errorstatus != SD_OK) {
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <SD_Init+0x24>
		logf ("SD_PowerON failed\r\n");
		/*!< CMD Response TimeOut (wait for CMDSENT flag) */
		return (errorstatus);
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	e041      	b.n	8001de0 <SD_Init+0xa8>
	}

	logf ("SD_PowerON OK\r\n");

	errorstatus = SD_InitializeCards ();
 8001d5c:	f000 f9a8 	bl	80020b0 <SD_InitializeCards>
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]

	if (errorstatus != SD_OK) {
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <SD_Init+0x3a>
		logf ("SD_InitializeCards failed\r\n");
		/*!< CMD Response TimeOut (wait for CMDSENT flag) */
		return (errorstatus);
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	e036      	b.n	8001de0 <SD_Init+0xa8>
	logf ("SD_InitializeCards OK\r\n");

	/*!< Configure the SDIO peripheral */
	/*!< SDIO_CK = SDIOCLK / (SDIO_TRANSFER_CLK_DIV + 2) */
	/*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
	SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <SD_Init+0xb0>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	751a      	strb	r2, [r3, #20]
	SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <SD_Init+0xb0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
	SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <SD_Init+0xb0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
	SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <SD_Init+0xb0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
	SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <SD_Init+0xb0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
	SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <SD_Init+0xb0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
	SDIO_Init (&SDIO_InitStructure);
 8001d96:	4814      	ldr	r0, [pc, #80]	; (8001de8 <SD_Init+0xb0>)
 8001d98:	f7ff f93a 	bl	8001010 <SDIO_Init>

	/*----------------- Read CSD/CID MSD registers ------------------*/
	errorstatus = SD_GetCardInfo (&SDCardInfo);
 8001d9c:	4813      	ldr	r0, [pc, #76]	; (8001dec <SD_Init+0xb4>)
 8001d9e:	f000 fa4b 	bl	8002238 <SD_GetCardInfo>
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]

	if (errorstatus == SD_OK) {
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10b      	bne.n	8001dc6 <SD_Init+0x8e>
		/*----------------- Select Card --------------------------------*/
		logf ("SD_GetCardInfo OK\r\n");
		errorstatus = SD_SelectDeselect ((uint32_t) (SDCardInfo.RCA << 16));
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <SD_Init+0xb4>)
 8001db0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	f04f 0400 	mov.w	r4, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f000 fd67 	bl	8002890 <SD_SelectDeselect>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	}
	else {
		logf ("SD_SelectDeselect failed\r\n");
	}

	if (errorstatus == SD_OK) {
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <SD_Init+0xa2>
		logf ("SD_SelectDeselect OK\r\n");
#if FATFS_SDIO_4BIT == 1
		//4 bit mode
		errorstatus = SD_EnableWideBusOperation (SDIO_BusWide_4b);
 8001dce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001dd2:	f000 fcf1 	bl	80027b8 <SD_EnableWideBusOperation>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	}
	else {
		logf ("SD_EnableWideBusOperation failed\r\n");
	}

	if (errorstatus == SD_OK) {
 8001dda:	79fb      	ldrb	r3, [r7, #7]
		logf ("SD_EnableWideBusOperation OK\r\n");
	}

	return (errorstatus);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	b2db      	uxtb	r3, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	200006e0 	.word	0x200006e0
 8001dec:	20000688 	.word	0x20000688

08001df0 <SD_GetStatus>:
 *   This value can be:
 *        - SD_TRANSFER_OK: No data transfer is acting
 *        - SD_TRANSFER_BUSY: Data transfer is acting
 */
SDTransferState SD_GetStatus (void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
	SDCardState cardstate = SD_CARD_TRANSFER;
 8001df6:	2304      	movs	r3, #4
 8001df8:	71fb      	strb	r3, [r7, #7]

	cardstate = SD_GetState ();
 8001dfa:	f000 f811 	bl	8001e20 <SD_GetState>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]

	if (cardstate == SD_CARD_TRANSFER) {
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d101      	bne.n	8001e0c <SD_GetStatus+0x1c>
		return (SD_TRANSFER_OK);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e005      	b.n	8001e18 <SD_GetStatus+0x28>
	} else if (cardstate == SD_CARD_ERROR) {
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d101      	bne.n	8001e16 <SD_GetStatus+0x26>
		return (SD_TRANSFER_ERROR);
 8001e12:	2302      	movs	r3, #2
 8001e14:	e000      	b.n	8001e18 <SD_GetStatus+0x28>
	} else {
		return (SD_TRANSFER_BUSY);
 8001e16:	2301      	movs	r3, #1
	}
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <SD_GetState>:
/**
 * @brief  Returns the current card's state.
 * @param  None
 * @retval SDCardState: SD Card Error or SD Card Current State.
 */
SDCardState SD_GetState(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	uint32_t resp1 = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]

	if (SD_Detect () == SD_PRESENT ) {
 8001e2a:	f000 f818 	bl	8001e5e <SD_Detect>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10f      	bne.n	8001e54 <SD_GetState+0x34>
		if (SD_SendStatus (&resp1) != SD_OK) {
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 ffa6 	bl	8002d88 <SD_SendStatus>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <SD_GetState+0x26>
			return SD_CARD_ERROR;
 8001e42:	23ff      	movs	r3, #255	; 0xff
 8001e44:	e007      	b.n	8001e56 <SD_GetState+0x36>
		} else {
			return (SDCardState) ((resp1 >> 9) & 0x0F);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0a5b      	lsrs	r3, r3, #9
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e000      	b.n	8001e56 <SD_GetState+0x36>
		}
	}
	
	return SD_CARD_ERROR;
 8001e54:	23ff      	movs	r3, #255	; 0xff
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <SD_Detect>:
/**
 * @brief  Detect if SD card is correctly plugged in the memory slot.
 * @param  None
 * @retval Return if SD is detected or not
 */
uint8_t SD_Detect(void) {
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
	__IO uint8_t status = SD_PRESENT;
 8001e64:	2301      	movs	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]

	/* Check status */
	if (!TM_FATFS_CheckCardDetectPin()) {
 8001e68:	f004 fa25 	bl	80062b6 <TM_FATFS_CheckCardDetectPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <SD_Detect+0x18>
		status = SD_NOT_PRESENT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
	}

	/* Return status */
	return status;
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	b2db      	uxtb	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <SD_PowerON>:
 *   clock controls.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_PowerON (void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
	__IO SD_Error errorstatus = SD_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	uint32_t response = 0, count = 0, validvoltage = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
	uint32_t SDType = SD_STD_CAPACITY;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
	/*!< Power ON Sequence -----------------------------------------------------*/
	/*!< Configure the SDIO peripheral */
	/*!< SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) */
	/*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
	/*!< SDIO_CK for initialization should not exceed 400 KHz */
	SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
 8001e9e:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <SD_PowerON+0x220>)
 8001ea0:	2276      	movs	r2, #118	; 0x76
 8001ea2:	751a      	strb	r2, [r3, #20]
	SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8001ea4:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <SD_PowerON+0x220>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
	SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8001eaa:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <SD_PowerON+0x220>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
	SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8001eb0:	4b7c      	ldr	r3, [pc, #496]	; (80020a4 <SD_PowerON+0x220>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
	SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <SD_PowerON+0x220>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
	SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8001ebc:	4b79      	ldr	r3, [pc, #484]	; (80020a4 <SD_PowerON+0x220>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
	SDIO_Init (&SDIO_InitStructure);
 8001ec2:	4878      	ldr	r0, [pc, #480]	; (80020a4 <SD_PowerON+0x220>)
 8001ec4:	f7ff f8a4 	bl	8001010 <SDIO_Init>

	/*!< Set Power State to ON */
	SDIO_SetPowerState (SDIO_PowerState_ON);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f7ff f8e1 	bl	8001090 <SDIO_SetPowerState>

	/*!< Enable SDIO Clock */
	SDIO_ClockCmd (ENABLE);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff f8ce 	bl	8001070 <SDIO_ClockCmd>

	/*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
	/*!< No CMD response required */
	SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001ed4:	4b74      	ldr	r3, [pc, #464]	; (80020a8 <SD_PowerON+0x224>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <SD_PowerON+0x224>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
 8001ee0:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <SD_PowerON+0x224>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <SD_PowerON+0x224>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001eec:	4b6e      	ldr	r3, [pc, #440]	; (80020a8 <SD_PowerON+0x224>)
 8001eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef2:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8001ef4:	486c      	ldr	r0, [pc, #432]	; (80020a8 <SD_PowerON+0x224>)
 8001ef6:	f7ff f8e9 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdError ();
 8001efa:	f001 f803 	bl	8002f04 <CmdError>
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]

	if (errorstatus != SD_OK) {
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <SD_PowerON+0x8c>
		/*!< CMD Response TimeOut (wait for CMDSENT flag) */
		return (errorstatus);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	e0c5      	b.n	800209c <SD_PowerON+0x218>
	/*!< Send CMD8 to verify SD card interface operating condition */
	/*!< Argument: - [31:12]: Reserved (shall be set to '0')
	- [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
	- [7:0]: Check Pattern (recommended 0xAA) */
	/*!< CMD Response: R7 */
	SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
 8001f10:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <SD_PowerON+0x224>)
 8001f12:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8001f16:	601a      	str	r2, [r3, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
 8001f18:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <SD_PowerON+0x224>)
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001f1e:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <SD_PowerON+0x224>)
 8001f20:	2240      	movs	r2, #64	; 0x40
 8001f22:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <SD_PowerON+0x224>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001f2a:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <SD_PowerON+0x224>)
 8001f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f30:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8001f32:	485d      	ldr	r0, [pc, #372]	; (80020a8 <SD_PowerON+0x224>)
 8001f34:	f7ff f8ca 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp7Error ();
 8001f38:	f001 f80c 	bl	8002f54 <CmdResp7Error>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]

	if (errorstatus == SD_OK) {
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <SD_PowerON+0xd2>
		CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
 8001f48:	4b58      	ldr	r3, [pc, #352]	; (80020ac <SD_PowerON+0x228>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
		SDType = SD_HIGH_CAPACITY;
 8001f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	e017      	b.n	8001f86 <SD_PowerON+0x102>
	} else {
		/*!< CMD55 */
		SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8001f56:	4b54      	ldr	r3, [pc, #336]	; (80020a8 <SD_PowerON+0x224>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001f5c:	4b52      	ldr	r3, [pc, #328]	; (80020a8 <SD_PowerON+0x224>)
 8001f5e:	2237      	movs	r2, #55	; 0x37
 8001f60:	605a      	str	r2, [r3, #4]
		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <SD_PowerON+0x224>)
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	609a      	str	r2, [r3, #8]
		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001f68:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <SD_PowerON+0x224>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001f6e:	4b4e      	ldr	r3, [pc, #312]	; (80020a8 <SD_PowerON+0x224>)
 8001f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f74:	611a      	str	r2, [r3, #16]
		SDIO_SendCommand (&SDIO_CmdInitStructure);
 8001f76:	484c      	ldr	r0, [pc, #304]	; (80020a8 <SD_PowerON+0x224>)
 8001f78:	f7ff f8a8 	bl	80010cc <SDIO_SendCommand>
		errorstatus = CmdResp1Error (SD_CMD_APP_CMD );
 8001f7c:	2037      	movs	r0, #55	; 0x37
 8001f7e:	f001 f827 	bl	8002fd0 <CmdResp1Error>
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
	}
	
	/*!< CMD55 */
	SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <SD_PowerON+0x224>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <SD_PowerON+0x224>)
 8001f8e:	2237      	movs	r2, #55	; 0x37
 8001f90:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001f92:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <SD_PowerON+0x224>)
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <SD_PowerON+0x224>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001f9e:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <SD_PowerON+0x224>)
 8001fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa4:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8001fa6:	4840      	ldr	r0, [pc, #256]	; (80020a8 <SD_PowerON+0x224>)
 8001fa8:	f7ff f890 	bl	80010cc <SDIO_SendCommand>
	errorstatus = CmdResp1Error (SD_CMD_APP_CMD );
 8001fac:	2037      	movs	r0, #55	; 0x37
 8001fae:	f001 f80f 	bl	8002fd0 <CmdResp1Error>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]

	/*!< If errorstatus is Command TimeOut, it is a MMC card */
	/*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
	or SD card 1.x */
	if (errorstatus == SD_OK) {
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d16c      	bne.n	8002098 <SD_PowerON+0x214>
		/*!< SD CARD */
		/*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
		while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL )) {
 8001fbe:	e04f      	b.n	8002060 <SD_PowerON+0x1dc>
			/*!< SEND CMD55 APP_CMD with RCA as 0 */
			SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <SD_PowerON+0x224>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <SD_PowerON+0x224>)
 8001fc8:	2237      	movs	r2, #55	; 0x37
 8001fca:	605a      	str	r2, [r3, #4]
			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <SD_PowerON+0x224>)
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	609a      	str	r2, [r3, #8]
			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001fd2:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <SD_PowerON+0x224>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001fd8:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <SD_PowerON+0x224>)
 8001fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fde:	611a      	str	r2, [r3, #16]
			SDIO_SendCommand (&SDIO_CmdInitStructure);
 8001fe0:	4831      	ldr	r0, [pc, #196]	; (80020a8 <SD_PowerON+0x224>)
 8001fe2:	f7ff f873 	bl	80010cc <SDIO_SendCommand>

			errorstatus = CmdResp1Error (SD_CMD_APP_CMD );
 8001fe6:	2037      	movs	r0, #55	; 0x37
 8001fe8:	f000 fff2 	bl	8002fd0 <CmdResp1Error>
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]

			if (errorstatus != SD_OK) {
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <SD_PowerON+0x17a>
				return (errorstatus);
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	e04e      	b.n	800209c <SD_PowerON+0x218>
			}
			SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <SD_PowerON+0x224>)
 800200a:	6013      	str	r3, [r2, #0]
			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <SD_PowerON+0x224>)
 800200e:	2229      	movs	r2, #41	; 0x29
 8002010:	605a      	str	r2, [r3, #4]
			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002012:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <SD_PowerON+0x224>)
 8002014:	2240      	movs	r2, #64	; 0x40
 8002016:	609a      	str	r2, [r3, #8]
			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <SD_PowerON+0x224>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <SD_PowerON+0x224>)
 8002020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002024:	611a      	str	r2, [r3, #16]
			SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002026:	4820      	ldr	r0, [pc, #128]	; (80020a8 <SD_PowerON+0x224>)
 8002028:	f7ff f850 	bl	80010cc <SDIO_SendCommand>

			errorstatus = CmdResp3Error ();
 800202c:	f001 f8a2 	bl	8003174 <CmdResp3Error>
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
			if (errorstatus != SD_OK) {
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <SD_PowerON+0x1be>
				return (errorstatus);
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	e02c      	b.n	800209c <SD_PowerON+0x218>
			}

			response = SDIO_GetResponse (SDIO_RESP1);
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff f87a 	bl	800113c <SDIO_GetResponse>
 8002048:	6178      	str	r0, [r7, #20]
			validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	0fdb      	lsrs	r3, r3, #31
 800204e:	2b01      	cmp	r3, #1
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	60fb      	str	r3, [r7, #12]
			count++;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	3301      	adds	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
		while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL )) {
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <SD_PowerON+0x1ec>
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800206c:	4293      	cmp	r3, r2
 800206e:	d9a7      	bls.n	8001fc0 <SD_PowerON+0x13c>
		}
		if (count >= SD_MAX_VOLT_TRIAL ) {
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002076:	4293      	cmp	r3, r2
 8002078:	d904      	bls.n	8002084 <SD_PowerON+0x200>
			errorstatus = SD_INVALID_VOLTRANGE;
 800207a:	231b      	movs	r3, #27
 800207c:	71fb      	strb	r3, [r7, #7]
			return (errorstatus);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e00b      	b.n	800209c <SD_PowerON+0x218>
		}

		if (response &= SD_HIGH_CAPACITY ) {
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <SD_PowerON+0x214>
			CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <SD_PowerON+0x228>)
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
		}

	}/*!< else MMC Card */

	return (errorstatus);
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	b2db      	uxtb	r3, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200006e0 	.word	0x200006e0
 80020a8:	20000670 	.word	0x20000670
 80020ac:	2000018c 	.word	0x2000018c

080020b0 <SD_InitializeCards>:
 *         into standby state.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_InitializeCards (void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
	SD_Error errorstatus = SD_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	71fb      	strb	r3, [r7, #7]
	uint16_t rca = 0x01;
 80020ba:	2301      	movs	r3, #1
 80020bc:	80bb      	strh	r3, [r7, #4]

	if (SDIO_GetPowerState () == SDIO_PowerState_OFF) {
 80020be:	f7fe fff7 	bl	80010b0 <SDIO_GetPowerState>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <SD_InitializeCards+0x20>
		errorstatus = SD_REQUEST_NOT_APPLICABLE;
 80020c8:	2325      	movs	r3, #37	; 0x25
 80020ca:	71fb      	strb	r3, [r7, #7]
		return (errorstatus);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	e0a5      	b.n	800221c <SD_InitializeCards+0x16c>
	}

	if (SDIO_SECURE_DIGITAL_IO_CARD != CardType) {
 80020d0:	4b54      	ldr	r3, [pc, #336]	; (8002224 <SD_InitializeCards+0x174>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d033      	beq.n	8002140 <SD_InitializeCards+0x90>
		/*!< Send CMD2 ALL_SEND_CID */
		SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <SD_InitializeCards+0x178>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
 80020de:	4b52      	ldr	r3, [pc, #328]	; (8002228 <SD_InitializeCards+0x178>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	605a      	str	r2, [r3, #4]
		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <SD_InitializeCards+0x178>)
 80020e6:	22c0      	movs	r2, #192	; 0xc0
 80020e8:	609a      	str	r2, [r3, #8]
		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80020ea:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <SD_InitializeCards+0x178>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80020f0:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <SD_InitializeCards+0x178>)
 80020f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f6:	611a      	str	r2, [r3, #16]
		SDIO_SendCommand (&SDIO_CmdInitStructure);
 80020f8:	484b      	ldr	r0, [pc, #300]	; (8002228 <SD_InitializeCards+0x178>)
 80020fa:	f7fe ffe7 	bl	80010cc <SDIO_SendCommand>

		errorstatus = CmdResp2Error ();
 80020fe:	f001 f863 	bl	80031c8 <CmdResp2Error>
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]

		if (SD_OK != errorstatus) {
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SD_InitializeCards+0x60>
			return (errorstatus);
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	e085      	b.n	800221c <SD_InitializeCards+0x16c>
		}

		CID_Tab[0] = SDIO_GetResponse (SDIO_RESP1);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff f813 	bl	800113c <SDIO_GetResponse>
 8002116:	4602      	mov	r2, r0
 8002118:	4b44      	ldr	r3, [pc, #272]	; (800222c <SD_InitializeCards+0x17c>)
 800211a:	601a      	str	r2, [r3, #0]
		CID_Tab[1] = SDIO_GetResponse (SDIO_RESP2);
 800211c:	2004      	movs	r0, #4
 800211e:	f7ff f80d 	bl	800113c <SDIO_GetResponse>
 8002122:	4602      	mov	r2, r0
 8002124:	4b41      	ldr	r3, [pc, #260]	; (800222c <SD_InitializeCards+0x17c>)
 8002126:	605a      	str	r2, [r3, #4]
		CID_Tab[2] = SDIO_GetResponse (SDIO_RESP3);
 8002128:	2008      	movs	r0, #8
 800212a:	f7ff f807 	bl	800113c <SDIO_GetResponse>
 800212e:	4602      	mov	r2, r0
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <SD_InitializeCards+0x17c>)
 8002132:	609a      	str	r2, [r3, #8]
		CID_Tab[3] = SDIO_GetResponse (SDIO_RESP4);
 8002134:	200c      	movs	r0, #12
 8002136:	f7ff f801 	bl	800113c <SDIO_GetResponse>
 800213a:	4602      	mov	r2, r0
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <SD_InitializeCards+0x17c>)
 800213e:	60da      	str	r2, [r3, #12]
	}
	
	if (
		(SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || 
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <SD_InitializeCards+0x174>)
 8002142:	681b      	ldr	r3, [r3, #0]
	if (
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <SD_InitializeCards+0xb0>
		(SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || 
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <SD_InitializeCards+0x174>)
 800214a:	681b      	ldr	r3, [r3, #0]
		(SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || 
 800214c:	2b01      	cmp	r3, #1
 800214e:	d007      	beq.n	8002160 <SD_InitializeCards+0xb0>
		(SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType) ||
 8002150:	4b34      	ldr	r3, [pc, #208]	; (8002224 <SD_InitializeCards+0x174>)
 8002152:	681b      	ldr	r3, [r3, #0]
		(SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || 
 8002154:	2b06      	cmp	r3, #6
 8002156:	d003      	beq.n	8002160 <SD_InitializeCards+0xb0>
		(SDIO_HIGH_CAPACITY_SD_CARD == CardType)
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <SD_InitializeCards+0x174>)
 800215a:	681b      	ldr	r3, [r3, #0]
		(SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType) ||
 800215c:	2b02      	cmp	r3, #2
 800215e:	d11e      	bne.n	800219e <SD_InitializeCards+0xee>
	) {
		/*!< Send CMD3 SET_REL_ADDR with argument 0 */
		/*!< SD Card publishes its RCA. */
		SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <SD_InitializeCards+0x178>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <SD_InitializeCards+0x178>)
 8002168:	2203      	movs	r2, #3
 800216a:	605a      	str	r2, [r3, #4]
		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <SD_InitializeCards+0x178>)
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	609a      	str	r2, [r3, #8]
		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <SD_InitializeCards+0x178>)
 8002174:	2200      	movs	r2, #0
 8002176:	60da      	str	r2, [r3, #12]
		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <SD_InitializeCards+0x178>)
 800217a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217e:	611a      	str	r2, [r3, #16]
		SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002180:	4829      	ldr	r0, [pc, #164]	; (8002228 <SD_InitializeCards+0x178>)
 8002182:	f7fe ffa3 	bl	80010cc <SDIO_SendCommand>

		errorstatus = CmdResp6Error (SD_CMD_SET_REL_ADDR, &rca);
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	2003      	movs	r0, #3
 800218c:	f001 f852 	bl	8003234 <CmdResp6Error>
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]

		if (SD_OK != errorstatus) {
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SD_InitializeCards+0xee>
			return (errorstatus);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	e03e      	b.n	800221c <SD_InitializeCards+0x16c>
		}
	}

	if (SDIO_SECURE_DIGITAL_IO_CARD != CardType) {
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <SD_InitializeCards+0x174>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d039      	beq.n	800221a <SD_InitializeCards+0x16a>
		RCA = rca;
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <SD_InitializeCards+0x180>)
 80021ac:	601a      	str	r2, [r3, #0]

		/*!< Send CMD9 SEND_CSD with argument as card's RCA */
		SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (rca << 16);
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <SD_InitializeCards+0x178>)
 80021b6:	601a      	str	r2, [r3, #0]
		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <SD_InitializeCards+0x178>)
 80021ba:	2209      	movs	r2, #9
 80021bc:	605a      	str	r2, [r3, #4]
		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <SD_InitializeCards+0x178>)
 80021c0:	22c0      	movs	r2, #192	; 0xc0
 80021c2:	609a      	str	r2, [r3, #8]
		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <SD_InitializeCards+0x178>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <SD_InitializeCards+0x178>)
 80021cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d0:	611a      	str	r2, [r3, #16]
		SDIO_SendCommand (&SDIO_CmdInitStructure);
 80021d2:	4815      	ldr	r0, [pc, #84]	; (8002228 <SD_InitializeCards+0x178>)
 80021d4:	f7fe ff7a 	bl	80010cc <SDIO_SendCommand>

		errorstatus = CmdResp2Error ();
 80021d8:	f000 fff6 	bl	80031c8 <CmdResp2Error>
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]

		if (SD_OK != errorstatus) {
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SD_InitializeCards+0x13a>
			return (errorstatus);
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	e018      	b.n	800221c <SD_InitializeCards+0x16c>
		}

		CSD_Tab[0] = SDIO_GetResponse (SDIO_RESP1);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7fe ffa6 	bl	800113c <SDIO_GetResponse>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <SD_InitializeCards+0x184>)
 80021f4:	601a      	str	r2, [r3, #0]
		CSD_Tab[1] = SDIO_GetResponse (SDIO_RESP2);
 80021f6:	2004      	movs	r0, #4
 80021f8:	f7fe ffa0 	bl	800113c <SDIO_GetResponse>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <SD_InitializeCards+0x184>)
 8002200:	605a      	str	r2, [r3, #4]
		CSD_Tab[2] = SDIO_GetResponse (SDIO_RESP3);
 8002202:	2008      	movs	r0, #8
 8002204:	f7fe ff9a 	bl	800113c <SDIO_GetResponse>
 8002208:	4602      	mov	r2, r0
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <SD_InitializeCards+0x184>)
 800220c:	609a      	str	r2, [r3, #8]
		CSD_Tab[3] = SDIO_GetResponse (SDIO_RESP4);
 800220e:	200c      	movs	r0, #12
 8002210:	f7fe ff94 	bl	800113c <SDIO_GetResponse>
 8002214:	4602      	mov	r2, r0
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <SD_InitializeCards+0x184>)
 8002218:	60da      	str	r2, [r3, #12]
	}

	return SD_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000018c 	.word	0x2000018c
 8002228:	20000670 	.word	0x20000670
 800222c:	200001a0 	.word	0x200001a0
 8002230:	200001b0 	.word	0x200001b0
 8002234:	20000190 	.word	0x20000190

08002238 <SD_GetCardInfo>:
 * @param  cardinfo: pointer to a SD_CardInfo structure that contains all SD card
 *         information.
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_GetCardInfo (SD_CardInfo *cardinfo)
{
 8002238:	b4b0      	push	{r4, r5, r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	SD_Error errorstatus = SD_OK;
 8002240:	2200      	movs	r2, #0
 8002242:	73ba      	strb	r2, [r7, #14]
	uint8_t tmp = 0;
 8002244:	2200      	movs	r2, #0
 8002246:	73fa      	strb	r2, [r7, #15]

	cardinfo->CardType = (uint8_t) CardType;
 8002248:	4a88      	ldr	r2, [pc, #544]	; (800246c <SD_GetCardInfo+0x234>)
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	b2d1      	uxtb	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
	cardinfo->RCA = (uint16_t) RCA;
 8002254:	4a86      	ldr	r2, [pc, #536]	; (8002470 <SD_GetCardInfo+0x238>)
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	b291      	uxth	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	f8a2 1054 	strh.w	r1, [r2, #84]	; 0x54

	/*!< Byte 0 */
	tmp = (uint8_t) ((CSD_Tab[0] & 0xFF000000) >> 24);
 8002260:	4a84      	ldr	r2, [pc, #528]	; (8002474 <SD_GetCardInfo+0x23c>)
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	0e12      	lsrs	r2, r2, #24
 8002266:	73fa      	strb	r2, [r7, #15]
	cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	0992      	lsrs	r2, r2, #6
 800226c:	b2d1      	uxtb	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	7011      	strb	r1, [r2, #0]
	cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	1092      	asrs	r2, r2, #2
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 020f 	and.w	r2, r2, #15
 800227c:	b2d1      	uxtb	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	7051      	strb	r1, [r2, #1]
	cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	f002 0203 	and.w	r2, r2, #3
 8002288:	b2d1      	uxtb	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	7091      	strb	r1, [r2, #2]

	/*!< Byte 1 */
	tmp = (uint8_t) ((CSD_Tab[0] & 0x00FF0000) >> 16);
 800228e:	4a79      	ldr	r2, [pc, #484]	; (8002474 <SD_GetCardInfo+0x23c>)
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	0c12      	lsrs	r2, r2, #16
 8002294:	73fa      	strb	r2, [r7, #15]
	cardinfo->SD_csd.TAAC = tmp;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	7bf9      	ldrb	r1, [r7, #15]
 800229a:	70d1      	strb	r1, [r2, #3]

	/*!< Byte 2 */
	tmp = (uint8_t) ((CSD_Tab[0] & 0x0000FF00) >> 8);
 800229c:	4a75      	ldr	r2, [pc, #468]	; (8002474 <SD_GetCardInfo+0x23c>)
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	0a12      	lsrs	r2, r2, #8
 80022a2:	73fa      	strb	r2, [r7, #15]
	cardinfo->SD_csd.NSAC = tmp;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	7bf9      	ldrb	r1, [r7, #15]
 80022a8:	7111      	strb	r1, [r2, #4]

	/*!< Byte 3 */
	tmp = (uint8_t) (CSD_Tab[0] & 0x000000FF);
 80022aa:	4a72      	ldr	r2, [pc, #456]	; (8002474 <SD_GetCardInfo+0x23c>)
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	73fa      	strb	r2, [r7, #15]
	cardinfo->SD_csd.MaxBusClkFrec = tmp;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	7bf9      	ldrb	r1, [r7, #15]
 80022b4:	7151      	strb	r1, [r2, #5]

	/*!< Byte 4 */
	tmp = (uint8_t) ((CSD_Tab[1] & 0xFF000000) >> 24);
 80022b6:	4a6f      	ldr	r2, [pc, #444]	; (8002474 <SD_GetCardInfo+0x23c>)
 80022b8:	6852      	ldr	r2, [r2, #4]
 80022ba:	0e12      	lsrs	r2, r2, #24
 80022bc:	73fa      	strb	r2, [r7, #15]
	cardinfo->SD_csd.CardComdClasses = tmp << 4;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	b292      	uxth	r2, r2
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b291      	uxth	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	80d1      	strh	r1, [r2, #6]

	/*!< Byte 5 */
	tmp = (uint8_t) ((CSD_Tab[1] & 0x00FF0000) >> 16);
 80022ca:	4a6a      	ldr	r2, [pc, #424]	; (8002474 <SD_GetCardInfo+0x23c>)
 80022cc:	6852      	ldr	r2, [r2, #4]
 80022ce:	0c12      	lsrs	r2, r2, #16
 80022d0:	73fa      	strb	r2, [r7, #15]
	cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	88d2      	ldrh	r2, [r2, #6]
 80022d6:	b291      	uxth	r1, r2
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	0912      	lsrs	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	b292      	uxth	r2, r2
 80022e0:	430a      	orrs	r2, r1
 80022e2:	b291      	uxth	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	80d1      	strh	r1, [r2, #6]
	cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	f002 020f 	and.w	r2, r2, #15
 80022ee:	b2d1      	uxtb	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	7211      	strb	r1, [r2, #8]

	/*!< Byte 6 */
	tmp = (uint8_t) ((CSD_Tab[1] & 0x0000FF00) >> 8);
 80022f4:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <SD_GetCardInfo+0x23c>)
 80022f6:	6852      	ldr	r2, [r2, #4]
 80022f8:	0a12      	lsrs	r2, r2, #8
 80022fa:	73fa      	strb	r2, [r7, #15]
	cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	09d2      	lsrs	r2, r2, #7
 8002300:	b2d1      	uxtb	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	7251      	strb	r1, [r2, #9]
	cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	1192      	asrs	r2, r2, #6
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f002 0201 	and.w	r2, r2, #1
 8002310:	b2d1      	uxtb	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	7291      	strb	r1, [r2, #10]
	cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	1152      	asrs	r2, r2, #5
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 0201 	and.w	r2, r2, #1
 8002320:	b2d1      	uxtb	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	72d1      	strb	r1, [r2, #11]
	cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	1112      	asrs	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f002 0201 	and.w	r2, r2, #1
 8002330:	b2d1      	uxtb	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	7311      	strb	r1, [r2, #12]
	cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	2100      	movs	r1, #0
 800233a:	7351      	strb	r1, [r2, #13]

	if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1 )|| (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0)) {
 800233c:	4a4b      	ldr	r2, [pc, #300]	; (800246c <SD_GetCardInfo+0x234>)
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	2a00      	cmp	r2, #0
 8002342:	d004      	beq.n	800234e <SD_GetCardInfo+0x116>
 8002344:	4a49      	ldr	r2, [pc, #292]	; (800246c <SD_GetCardInfo+0x234>)
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	2a01      	cmp	r2, #1
 800234a:	f040 8095 	bne.w	8002478 <SD_GetCardInfo+0x240>
		cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	611a      	str	r2, [r3, #16]

		/*!< Byte 7 */
		tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <SD_GetCardInfo+0x23c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
		cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	611a      	str	r2, [r3, #16]

		/*!< Byte 8 */
		tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <SD_GetCardInfo+0x23c>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0e1b      	lsrs	r3, r3, #24
 8002374:	73fb      	strb	r3, [r7, #15]
		cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	0992      	lsrs	r2, r2, #6
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]

		cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	10db      	asrs	r3, r3, #3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	751a      	strb	r2, [r3, #20]
		cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	755a      	strb	r2, [r3, #21]

		/*!< Byte 9 */
		tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 80023a2:	4b34      	ldr	r3, [pc, #208]	; (8002474 <SD_GetCardInfo+0x23c>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	73fb      	strb	r3, [r7, #15]
		cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	759a      	strb	r2, [r3, #22]
		cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	109b      	asrs	r3, r3, #2
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	75da      	strb	r2, [r3, #23]
		cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 0306 	and.w	r3, r3, #6
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	761a      	strb	r2, [r3, #24]
		/*!< Byte 10 */
		tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <SD_GetCardInfo+0x23c>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	73fb      	strb	r3, [r7, #15]
		cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7e1b      	ldrb	r3, [r3, #24]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	09db      	lsrs	r3, r3, #7
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	761a      	strb	r2, [r3, #24]

		cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	3301      	adds	r3, #1
 80023f6:	f04f 0400 	mov.w	r4, #0
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e1b      	ldrb	r3, [r3, #24]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3302      	adds	r3, #2
 8002408:	2201      	movs	r2, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	e9d2 1212 	ldrd	r1, r2, [r2, #72]	; 0x48
 8002414:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002418:	fb03 f502 	mul.w	r5, r3, r2
 800241c:	fb01 f004 	mul.w	r0, r1, r4
 8002420:	4428      	add	r0, r5
 8002422:	fba1 3403 	umull	r3, r4, r1, r3
 8002426:	1902      	adds	r2, r0, r4
 8002428:	4614      	mov	r4, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7a1b      	ldrb	r3, [r3, #8]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	2301      	movs	r3, #1
 800243a:	4093      	lsls	r3, r2
 800243c:	461a      	mov	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	651a      	str	r2, [r3, #80]	; 0x50
		cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244c:	f04f 0400 	mov.w	r4, #0
 8002450:	fb03 f502 	mul.w	r5, r3, r2
 8002454:	fb01 f004 	mul.w	r0, r1, r4
 8002458:	4428      	add	r0, r5
 800245a:	fba1 3403 	umull	r3, r4, r1, r3
 800245e:	1902      	adds	r2, r0, r4
 8002460:	4614      	mov	r4, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 8002468:	e03f      	b.n	80024ea <SD_GetCardInfo+0x2b2>
 800246a:	bf00      	nop
 800246c:	2000018c 	.word	0x2000018c
 8002470:	200001b0 	.word	0x200001b0
 8002474:	20000190 	.word	0x20000190
	} else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD) {
 8002478:	4aa5      	ldr	r2, [pc, #660]	; (8002710 <SD_GetCardInfo+0x4d8>)
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	2a02      	cmp	r2, #2
 800247e:	d134      	bne.n	80024ea <SD_GetCardInfo+0x2b2>
		/*!< Byte 7 */
		tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 8002480:	4aa4      	ldr	r2, [pc, #656]	; (8002714 <SD_GetCardInfo+0x4dc>)
 8002482:	6852      	ldr	r2, [r2, #4]
 8002484:	73fa      	strb	r2, [r7, #15]
		cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	0412      	lsls	r2, r2, #16
 800248a:	f402 117c 	and.w	r1, r2, #4128768	; 0x3f0000
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6111      	str	r1, [r2, #16]

		/*!< Byte 8 */
		tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8002492:	4aa0      	ldr	r2, [pc, #640]	; (8002714 <SD_GetCardInfo+0x4dc>)
 8002494:	6892      	ldr	r2, [r2, #8]
 8002496:	0e12      	lsrs	r2, r2, #24
 8002498:	73fa      	strb	r2, [r7, #15]

		cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6912      	ldr	r2, [r2, #16]
 800249e:	7bf9      	ldrb	r1, [r7, #15]
 80024a0:	0209      	lsls	r1, r1, #8
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6111      	str	r1, [r2, #16]

		/*!< Byte 9 */
		tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 80024a8:	4a9a      	ldr	r2, [pc, #616]	; (8002714 <SD_GetCardInfo+0x4dc>)
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	0c12      	lsrs	r2, r2, #16
 80024ae:	73fa      	strb	r2, [r7, #15]

		cardinfo->SD_csd.DeviceSize |= (tmp);
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6911      	ldr	r1, [r2, #16]
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6111      	str	r1, [r2, #16]

		/*!< Byte 10 */
		tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 80024bc:	4a95      	ldr	r2, [pc, #596]	; (8002714 <SD_GetCardInfo+0x4dc>)
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	0a12      	lsrs	r2, r2, #8
 80024c2:	73fa      	strb	r2, [r7, #15]

		cardinfo->CardCapacity = ((uint64_t)cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6912      	ldr	r2, [r2, #16]
 80024c8:	4611      	mov	r1, r2
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	3101      	adds	r1, #1
 80024d0:	f142 0200 	adc.w	r2, r2, #0
 80024d4:	04d4      	lsls	r4, r2, #19
 80024d6:	ea44 3451 	orr.w	r4, r4, r1, lsr #13
 80024da:	04cb      	lsls	r3, r1, #19
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		cardinfo->CardBlockSize = 512;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e8:	651a      	str	r2, [r3, #80]	; 0x50
	}

	cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	119b      	asrs	r3, r3, #6
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	765a      	strb	r2, [r3, #25]
	cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002504:	b2da      	uxtb	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	769a      	strb	r2, [r3, #26]

	/*!< Byte 11 */
	tmp = (uint8_t) (CSD_Tab[2] & 0x000000FF);
 800250a:	4b82      	ldr	r3, [pc, #520]	; (8002714 <SD_GetCardInfo+0x4dc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7e9b      	ldrb	r3, [r3, #26]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	09db      	lsrs	r3, r3, #7
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b2da      	uxtb	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	769a      	strb	r2, [r3, #26]
	cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252a:	b2da      	uxtb	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	76da      	strb	r2, [r3, #27]

	/*!< Byte 12 */
	tmp = (uint8_t) ((CSD_Tab[3] & 0xFF000000) >> 24);
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <SD_GetCardInfo+0x4dc>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0e1b      	lsrs	r3, r3, #24
 8002536:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	09db      	lsrs	r3, r3, #7
 800253c:	b2da      	uxtb	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	771a      	strb	r2, [r3, #28]
	cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	115b      	asrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	b2da      	uxtb	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	775a      	strb	r2, [r3, #29]
	cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	109b      	asrs	r3, r3, #2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	779a      	strb	r2, [r3, #30]
	cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	b2da      	uxtb	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	77da      	strb	r2, [r3, #31]

	/*!< Byte 13 */
	tmp = (uint8_t) ((CSD_Tab[3] & 0x00FF0000) >> 16);
 8002572:	4b68      	ldr	r3, [pc, #416]	; (8002714 <SD_GetCardInfo+0x4dc>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	0c1b      	lsrs	r3, r3, #16
 8002578:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7fdb      	ldrb	r3, [r3, #31]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b2da      	uxtb	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	77da      	strb	r2, [r3, #31]
	cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	115b      	asrs	r3, r3, #5
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f883 2020 	strb.w	r2, [r3, #32]
	cardinfo->SD_csd.Reserved3 = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	/*!< Byte 14 */
	tmp = (uint8_t) ((CSD_Tab[3] & 0x0000FF00) >> 8);
 80025b6:	4b57      	ldr	r3, [pc, #348]	; (8002714 <SD_GetCardInfo+0x4dc>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	09db      	lsrs	r3, r3, #7
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	119b      	asrs	r3, r3, #6
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	115b      	asrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	111b      	asrs	r3, r3, #4
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	109b      	asrs	r3, r3, #2
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	b2da      	uxtb	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	cardinfo->SD_csd.ECC = (tmp & 0x03);
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	b2da      	uxtb	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/*!< Byte 15 */
	tmp = (uint8_t) (CSD_Tab[3] & 0x000000FF);
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <SD_GetCardInfo+0x4dc>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	cardinfo->SD_csd.Reserved4 = 1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	/*!< Byte 0 */
	tmp = (uint8_t) ((CID_Tab[0] & 0xFF000000) >> 24);
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <SD_GetCardInfo+0x4e0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e1b      	lsrs	r3, r3, #24
 8002640:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ManufacturerID = tmp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/*!< Byte 1 */
	tmp = (uint8_t) ((CID_Tab[0] & 0x00FF0000) >> 16);
 800264a:	4b33      	ldr	r3, [pc, #204]	; (8002718 <SD_GetCardInfo+0x4e0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	b29b      	uxth	r3, r3
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	b29a      	uxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	85da      	strh	r2, [r3, #46]	; 0x2e

	/*!< Byte 2 */
	tmp = (uint8_t) ((CID_Tab[0] & 0x000000FF00) >> 8);
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <SD_GetCardInfo+0x4e0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.OEM_AppliID |= tmp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800266a:	b29a      	uxth	r2, r3
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	85da      	strh	r2, [r3, #46]	; 0x2e

	/*!< Byte 3 */
	tmp = (uint8_t) (CID_Tab[0] & 0x000000FF);
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <SD_GetCardInfo+0x4e0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdName1 = tmp << 24;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30

	/*!< Byte 4 */
	tmp = (uint8_t) ((CID_Tab[1] & 0xFF000000) >> 24);
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <SD_GetCardInfo+0x4e0>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdName1 |= tmp << 16;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	0412      	lsls	r2, r2, #16
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	631a      	str	r2, [r3, #48]	; 0x30

	/*!< Byte 5 */
	tmp = (uint8_t) ((CID_Tab[1] & 0x00FF0000) >> 16);
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <SD_GetCardInfo+0x4e0>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0c1b      	lsrs	r3, r3, #16
 80026a4:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdName1 |= tmp << 8;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	0212      	lsls	r2, r2, #8
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30

	/*!< Byte 6 */
	tmp = (uint8_t) ((CID_Tab[1] & 0x0000FF00) >> 8);
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <SD_GetCardInfo+0x4e0>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdName1 |= tmp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30

	/*!< Byte 7 */
	tmp = (uint8_t) (CID_Tab[1] & 0x000000FF);
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <SD_GetCardInfo+0x4e0>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdName2 = tmp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/*!< Byte 8 */
	tmp = (uint8_t) ((CID_Tab[2] & 0xFF000000) >> 24);
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <SD_GetCardInfo+0x4e0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0e1b      	lsrs	r3, r3, #24
 80026dc:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdRev = tmp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	/*!< Byte 9 */
	tmp = (uint8_t) ((CID_Tab[2] & 0x00FF0000) >> 16);
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <SD_GetCardInfo+0x4e0>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0c1b      	lsrs	r3, r3, #16
 80026ec:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdSN = tmp << 24;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38

	/*!< Byte 10 */
	tmp = (uint8_t) ((CID_Tab[2] & 0x0000FF00) >> 8);
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <SD_GetCardInfo+0x4e0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdSN |= tmp << 16;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	0412      	lsls	r2, r2, #16
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
 800270e:	e005      	b.n	800271c <SD_GetCardInfo+0x4e4>
 8002710:	2000018c 	.word	0x2000018c
 8002714:	20000190 	.word	0x20000190
 8002718:	200001a0 	.word	0x200001a0

	/*!< Byte 11 */
	tmp = (uint8_t) (CID_Tab[2] & 0x000000FF);
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <SD_GetCardInfo+0x57c>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdSN |= tmp << 8;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	0212      	lsls	r2, r2, #8
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	639a      	str	r2, [r3, #56]	; 0x38

	/*!< Byte 12 */
	tmp = (uint8_t) ((CID_Tab[3] & 0xFF000000) >> 24);
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <SD_GetCardInfo+0x57c>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0e1b      	lsrs	r3, r3, #24
 8002736:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ProdSN |= tmp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38

	/*!< Byte 13 */
	tmp = (uint8_t) ((CID_Tab[3] & 0x00FF0000) >> 16);
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <SD_GetCardInfo+0x57c>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002752:	b2da      	uxtb	r2, r3
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b2da      	uxtb	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	b29b      	uxth	r3, r3
 800276a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800276e:	b29a      	uxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	87da      	strh	r2, [r3, #62]	; 0x3e

	/*!< Byte 14 */
	tmp = (uint8_t) ((CID_Tab[3] & 0x0000FF00) >> 8);
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <SD_GetCardInfo+0x57c>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.ManufactDate |= tmp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002780:	b29a      	uxth	r2, r3
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	87da      	strh	r2, [r3, #62]	; 0x3e

	/*!< Byte 15 */
	tmp = (uint8_t) (CID_Tab[3] & 0x000000FF);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <SD_GetCardInfo+0x57c>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	73fb      	strb	r3, [r7, #15]
	cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	b2da      	uxtb	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	cardinfo->SD_cid.Reserved2 = 1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	return (errorstatus);
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bcb0      	pop	{r4, r5, r7}
 80027b2:	4770      	bx	lr
 80027b4:	200001a0 	.word	0x200001a0

080027b8 <SD_EnableWideBusOperation>:
 *     @arg SDIO_BusWide_4b: 4-bit data transfer
 *     @arg SDIO_BusWide_1b: 1-bit data transfer
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_EnableWideBusOperation (uint32_t WideMode)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	SD_Error errorstatus = SD_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

	/*!< MMC Card doesn't support this feature */
	if (SDIO_MULTIMEDIA_CARD == CardType) {
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <SD_EnableWideBusOperation+0xd0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d103      	bne.n	80027d4 <SD_EnableWideBusOperation+0x1c>
		errorstatus = SD_UNSUPPORTED_FEATURE;
 80027cc:	2327      	movs	r3, #39	; 0x27
 80027ce:	73fb      	strb	r3, [r7, #15]
		return (errorstatus);
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	e054      	b.n	800287e <SD_EnableWideBusOperation+0xc6>
	} else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType)) {
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <SD_EnableWideBusOperation+0xd0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <SD_EnableWideBusOperation+0x34>
 80027dc:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <SD_EnableWideBusOperation+0xd0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d003      	beq.n	80027ec <SD_EnableWideBusOperation+0x34>
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <SD_EnableWideBusOperation+0xd0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d147      	bne.n	800287c <SD_EnableWideBusOperation+0xc4>
		if (SDIO_BusWide_8b == WideMode) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	d103      	bne.n	80027fc <SD_EnableWideBusOperation+0x44>
			errorstatus = SD_UNSUPPORTED_FEATURE;
 80027f4:	2327      	movs	r3, #39	; 0x27
 80027f6:	73fb      	strb	r3, [r7, #15]
			return (errorstatus);
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	e040      	b.n	800287e <SD_EnableWideBusOperation+0xc6>
		} else if (SDIO_BusWide_4b == WideMode) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002802:	d11e      	bne.n	8002842 <SD_EnableWideBusOperation+0x8a>
			errorstatus = SDEnWideBus (ENABLE);
 8002804:	2001      	movs	r0, #1
 8002806:	f000 fd7d 	bl	8003304 <SDEnWideBus>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]

			if (SD_OK == errorstatus) {
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d133      	bne.n	800287c <SD_EnableWideBusOperation+0xc4>
				/*!< Configure the SDIO peripheral */
				SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002816:	2201      	movs	r2, #1
 8002818:	751a      	strb	r2, [r3, #20]
				SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
				SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
				SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8002826:	4b19      	ldr	r3, [pc, #100]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
				SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 800282e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002832:	60da      	str	r2, [r3, #12]
				SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
				SDIO_Init (&SDIO_InitStructure);
 800283a:	4814      	ldr	r0, [pc, #80]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 800283c:	f7fe fbe8 	bl	8001010 <SDIO_Init>
 8002840:	e01c      	b.n	800287c <SD_EnableWideBusOperation+0xc4>
			}
		} else {
			errorstatus = SDEnWideBus (DISABLE);
 8002842:	2000      	movs	r0, #0
 8002844:	f000 fd5e 	bl	8003304 <SDEnWideBus>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]

			if (SD_OK == errorstatus) {
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d114      	bne.n	800287c <SD_EnableWideBusOperation+0xc4>
				/*!< Configure the SDIO peripheral */
				SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002854:	2201      	movs	r2, #1
 8002856:	751a      	strb	r2, [r3, #20]
				SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
				SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
				SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
				SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]
				SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
				SDIO_Init (&SDIO_InitStructure);
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <SD_EnableWideBusOperation+0xd4>)
 8002878:	f7fe fbca 	bl	8001010 <SDIO_Init>
			}
		}
	}

	return (errorstatus);
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000018c 	.word	0x2000018c
 800288c:	200006e0 	.word	0x200006e0

08002890 <SD_SelectDeselect>:
 * @brief  Selects od Deselects the corresponding card.
 * @param  addr: Address of the Card to be selected.
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_SelectDeselect (uint64_t addr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	e9c7 0100 	strd	r0, r1, [r7]
	SD_Error errorstatus = SD_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]

	/*!< Send CMD7 SDIO_SEL_DESEL_CARD */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) addr;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <SD_SelectDeselect+0x48>)
 80028a2:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <SD_SelectDeselect+0x48>)
 80028a6:	2207      	movs	r2, #7
 80028a8:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <SD_SelectDeselect+0x48>)
 80028ac:	2240      	movs	r2, #64	; 0x40
 80028ae:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <SD_SelectDeselect+0x48>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <SD_SelectDeselect+0x48>)
 80028b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028bc:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <SD_SelectDeselect+0x48>)
 80028c0:	f7fe fc04 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_SEL_DESEL_CARD );
 80028c4:	2007      	movs	r0, #7
 80028c6:	f000 fb83 	bl	8002fd0 <CmdResp1Error>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]

	return (errorstatus);
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000670 	.word	0x20000670

080028dc <SD_ReadMultiBlocks>:
 * @param  BlockSize: the SD card Data block size. The Block size should be 512.
 * @param  NumberOfBlocks: number of blocks to be read.
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_ReadMultiBlocks (uint8_t *readbuff, uint64_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	e9c7 2300 	strd	r2, r3, [r7]
	SD_Error errorstatus = SD_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
	TransferError = SD_OK;
 80028ec:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <SD_ReadMultiBlocks+0x11c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
	TransferEnd = 0;
 80028f2:	4b42      	ldr	r3, [pc, #264]	; (80029fc <SD_ReadMultiBlocks+0x120>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
	StopCondition = 1;
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <SD_ReadMultiBlocks+0x124>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

	SDIO ->DCTRL = 0x0;
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <SD_ReadMultiBlocks+0x128>)
 8002900:	2200      	movs	r2, #0
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (SD_DMA_MODE)
	SDIO->MASK |= (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR);
 8002904:	4a3f      	ldr	r2, [pc, #252]	; (8002a04 <SD_ReadMultiBlocks+0x128>)
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <SD_ReadMultiBlocks+0x128>)
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	63d3      	str	r3, [r2, #60]	; 0x3c
	SD_LowLevel_DMA_RxConfig ((uint32_t *) readbuff, (NumberOfBlocks * BlockSize));
 8002914:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	4619      	mov	r1, r3
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 ff5c 	bl	80037dc <SD_LowLevel_DMA_RxConfig>
	SDIO_DMACmd (ENABLE);
 8002924:	2001      	movs	r0, #1
 8002926:	f7fe fc57 	bl	80011d8 <SDIO_DMACmd>
#endif

	if (CardType == SDIO_HIGH_CAPACITY_SD_CARD ) {
 800292a:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <SD_ReadMultiBlocks+0x12c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d10a      	bne.n	8002948 <SD_ReadMultiBlocks+0x6c>
		BlockSize = 512;
 8002932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002936:	853b      	strh	r3, [r7, #40]	; 0x28
		ReadAddr /= 512;
 8002938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800293c:	0a54      	lsrs	r4, r2, #9
 800293e:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 8002942:	0a5d      	lsrs	r5, r3, #9
 8002944:	e9c7 4500 	strd	r4, r5, [r7]
	}

	/*!< Set Block Size for Card */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8002948:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800294a:	4a30      	ldr	r2, [pc, #192]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 800294c:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 8002950:	2210      	movs	r2, #16
 8002952:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 8002962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002966:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002968:	4828      	ldr	r0, [pc, #160]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 800296a:	f7fe fbaf 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_SET_BLOCKLEN );
 800296e:	2010      	movs	r0, #16
 8002970:	f000 fb2e 	bl	8002fd0 <CmdResp1Error>
 8002974:	4603      	mov	r3, r0
 8002976:	75fb      	strb	r3, [r7, #23]

	if (SD_OK != errorstatus) {
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <SD_ReadMultiBlocks+0xa6>
		return (errorstatus);
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	e036      	b.n	80029f0 <SD_ReadMultiBlocks+0x114>
	}

	SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <SD_ReadMultiBlocks+0x134>)
 8002984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002988:	601a      	str	r2, [r3, #0]
	SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 800298a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800298c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <SD_ReadMultiBlocks+0x134>)
 8002994:	6053      	str	r3, [r2, #4]
	SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DATABLOCKSIZE;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <SD_ReadMultiBlocks+0x134>)
 8002998:	2290      	movs	r2, #144	; 0x90
 800299a:	609a      	str	r2, [r3, #8]
	SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <SD_ReadMultiBlocks+0x134>)
 800299e:	2202      	movs	r2, #2
 80029a0:	60da      	str	r2, [r3, #12]
	SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <SD_ReadMultiBlocks+0x134>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
	SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <SD_ReadMultiBlocks+0x134>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	615a      	str	r2, [r3, #20]
	SDIO_DataConfig (&SDIO_DataInitStructure);
 80029ae:	4818      	ldr	r0, [pc, #96]	; (8002a10 <SD_ReadMultiBlocks+0x134>)
 80029b0:	f7fe fbd8 	bl	8001164 <SDIO_DataConfig>

	/*!< Send CMD18 READ_MULT_BLOCK with argument data address */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) ReadAddr;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 80029b8:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 80029bc:	2212      	movs	r2, #18
 80029be:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 80029ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d2:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <SD_ReadMultiBlocks+0x130>)
 80029d6:	f7fe fb79 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_READ_MULT_BLOCK );
 80029da:	2012      	movs	r0, #18
 80029dc:	f000 faf8 	bl	8002fd0 <CmdResp1Error>
 80029e0:	4603      	mov	r3, r0
 80029e2:	75fb      	strb	r3, [r7, #23]

	if (errorstatus != SD_OK) {
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SD_ReadMultiBlocks+0x112>
		return (errorstatus);
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	e000      	b.n	80029f0 <SD_ReadMultiBlocks+0x114>
	}

	return (errorstatus);
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bdb0      	pop	{r4, r5, r7, pc}
 80029f8:	200001b8 	.word	0x200001b8
 80029fc:	200001bc 	.word	0x200001bc
 8002a00:	200001b4 	.word	0x200001b4
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	2000018c 	.word	0x2000018c
 8002a0c:	20000670 	.word	0x20000670
 8002a10:	200006f8 	.word	0x200006f8

08002a14 <SD_WaitReadOperation>:
 *         the DMA controller.
 * @param  None.
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_WaitReadOperation (void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
	SD_Error errorstatus = SD_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t timeout;

	timeout = SD_DATATIMEOUT;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a22:	603b      	str	r3, [r7, #0]

	while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0)) {
 8002a24:	e002      	b.n	8002a2c <SD_WaitReadOperation+0x18>
		timeout--;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]
	while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0)) {
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <SD_WaitReadOperation+0xa8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <SD_WaitReadOperation+0x38>
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <SD_WaitReadOperation+0xac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <SD_WaitReadOperation+0x38>
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <SD_WaitReadOperation+0xb0>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <SD_WaitReadOperation+0x38>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ec      	bne.n	8002a26 <SD_WaitReadOperation+0x12>
	}
	
	DMAEndOfTransfer = 0x00;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <SD_WaitReadOperation+0xa8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]

	timeout = SD_DATATIMEOUT;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a56:	603b      	str	r3, [r7, #0]

	while (((SDIO ->STA & SDIO_FLAG_RXACT)) && (timeout > 0)) {
 8002a58:	e002      	b.n	8002a60 <SD_WaitReadOperation+0x4c>
		timeout--;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	603b      	str	r3, [r7, #0]
	while (((SDIO ->STA & SDIO_FLAG_RXACT)) && (timeout > 0)) {
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <SD_WaitReadOperation+0xb4>)
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <SD_WaitReadOperation+0x5e>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f3      	bne.n	8002a5a <SD_WaitReadOperation+0x46>
	}

	if (StopCondition == 1) {
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <SD_WaitReadOperation+0xb8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <SD_WaitReadOperation+0x74>
		errorstatus = SD_StopTransfer ();
 8002a7a:	f000 f961 	bl	8002d40 <SD_StopTransfer>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
		StopCondition = 0;
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <SD_WaitReadOperation+0xb8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
	}

	if ((timeout == 0) && (errorstatus == SD_OK)) {
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <SD_WaitReadOperation+0x84>
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <SD_WaitReadOperation+0x84>
		errorstatus = SD_DATA_TIMEOUT;
 8002a94:	2304      	movs	r3, #4
 8002a96:	71fb      	strb	r3, [r7, #7]
	}

	/*!< Clear all the static flags */
	SDIO->ICR = (SDIO_STATIC_FLAGS);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <SD_WaitReadOperation+0xb4>)
 8002a9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38

	if (TransferError != SD_OK) {
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <SD_WaitReadOperation+0xb0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <SD_WaitReadOperation+0x9e>
		return (TransferError);
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <SD_WaitReadOperation+0xb0>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e000      	b.n	8002ab4 <SD_WaitReadOperation+0xa0>
	}
	
	return (errorstatus);
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200001c0 	.word	0x200001c0
 8002ac0:	200001bc 	.word	0x200001bc
 8002ac4:	200001b8 	.word	0x200001b8
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	200001b4 	.word	0x200001b4

08002ad0 <SD_WriteMultiBlocks>:
 * @param  writebuff: pointer to the buffer that contain the data to be transferred.
 * @param  BlockSize: the SD card Data block size. The Block size should be 512.
 * @param  NumberOfBlocks: number of blocks to be written.
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_WriteMultiBlocks (uint8_t *writebuff, uint64_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks) {
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	e9c7 2300 	strd	r2, r3, [r7]
	SD_Error errorstatus = SD_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	75fb      	strb	r3, [r7, #23]

	TransferError = SD_OK;
 8002ae0:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <SD_WriteMultiBlocks+0x194>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
	TransferEnd = 0;
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <SD_WriteMultiBlocks+0x198>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
	StopCondition = 1;
 8002aec:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <SD_WriteMultiBlocks+0x19c>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
	SDIO ->DCTRL = 0x0;
 8002af2:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <SD_WriteMultiBlocks+0x1a0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (SD_DMA_MODE)
	SDIO->MASK |= (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR);
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <SD_WriteMultiBlocks+0x1a0>)
 8002afa:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <SD_WriteMultiBlocks+0x1a0>)
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	f443 7346 	orr.w	r3, r3, #792	; 0x318
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	63d3      	str	r3, [r2, #60]	; 0x3c
	SD_LowLevel_DMA_TxConfig ((uint32_t *) writebuff, (NumberOfBlocks * BlockSize));
 8002b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	4619      	mov	r1, r3
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fe12 	bl	800373c <SD_LowLevel_DMA_TxConfig>
	SDIO_DMACmd (ENABLE);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7fe fb5d 	bl	80011d8 <SDIO_DMACmd>
#endif

	if (CardType == SDIO_HIGH_CAPACITY_SD_CARD ) {
 8002b1e:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <SD_WriteMultiBlocks+0x1a4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d10a      	bne.n	8002b3c <SD_WriteMultiBlocks+0x6c>
		BlockSize = 512;
 8002b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b2a:	853b      	strh	r3, [r7, #40]	; 0x28
		WriteAddr /= 512;
 8002b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b30:	0a54      	lsrs	r4, r2, #9
 8002b32:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 8002b36:	0a5d      	lsrs	r5, r3, #9
 8002b38:	e9c7 4500 	strd	r4, r5, [r7]
	}

	/* Set Block Size for Card */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8002b3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b3e:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b40:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 8002b42:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b44:	2210      	movs	r2, #16
 8002b46:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5a:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002b5c:	4846      	ldr	r0, [pc, #280]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b5e:	f7fe fab5 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_SET_BLOCKLEN );
 8002b62:	2010      	movs	r0, #16
 8002b64:	f000 fa34 	bl	8002fd0 <CmdResp1Error>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	75fb      	strb	r3, [r7, #23]

	if (SD_OK != errorstatus) {
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <SD_WriteMultiBlocks+0xa6>
		return (errorstatus);
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	e072      	b.n	8002c5c <SD_WriteMultiBlocks+0x18c>
	}

	/*!< To improve performance */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <SD_WriteMultiBlocks+0x1ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	041b      	lsls	r3, r3, #16
 8002b7c:	4a3e      	ldr	r2, [pc, #248]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b7e:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 8002b80:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b82:	2237      	movs	r2, #55	; 0x37
 8002b84:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002b86:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002b8c:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002b92:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b98:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002b9a:	4837      	ldr	r0, [pc, #220]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002b9c:	f7fe fa96 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_APP_CMD );
 8002ba0:	2037      	movs	r0, #55	; 0x37
 8002ba2:	f000 fa15 	bl	8002fd0 <CmdResp1Error>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	75fb      	strb	r3, [r7, #23]

	if (errorstatus != SD_OK) {
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <SD_WriteMultiBlocks+0xe4>
		return (errorstatus);
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	e053      	b.n	8002c5c <SD_WriteMultiBlocks+0x18c>
	}
	
	/*!< To improve performance */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) NumberOfBlocks;
 8002bb4:	4a30      	ldr	r2, [pc, #192]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bbc:	2217      	movs	r2, #23
 8002bbe:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bc2:	2240      	movs	r2, #64	; 0x40
 8002bc4:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd2:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002bd4:	4828      	ldr	r0, [pc, #160]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bd6:	f7fe fa79 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_SET_BLOCK_COUNT );
 8002bda:	2017      	movs	r0, #23
 8002bdc:	f000 f9f8 	bl	8002fd0 <CmdResp1Error>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]

	if (errorstatus != SD_OK) {
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <SD_WriteMultiBlocks+0x11e>
		return (errorstatus);
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	e036      	b.n	8002c5c <SD_WriteMultiBlocks+0x18c>
	}

	/*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) WriteAddr;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bf2:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8002bf4:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bf6:	2219      	movs	r2, #25
 8002bf8:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002bfc:	2240      	movs	r2, #64	; 0x40
 8002bfe:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0c:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002c0e:	481a      	ldr	r0, [pc, #104]	; (8002c78 <SD_WriteMultiBlocks+0x1a8>)
 8002c10:	f7fe fa5c 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_WRITE_MULT_BLOCK );
 8002c14:	2019      	movs	r0, #25
 8002c16:	f000 f9db 	bl	8002fd0 <CmdResp1Error>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	75fb      	strb	r3, [r7, #23]

	if (SD_OK != errorstatus) {
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SD_WriteMultiBlocks+0x158>
		return (errorstatus);
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	e019      	b.n	8002c5c <SD_WriteMultiBlocks+0x18c>
	}

	SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <SD_WriteMultiBlocks+0x1b0>)
 8002c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c2e:	601a      	str	r2, [r3, #0]
	SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8002c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <SD_WriteMultiBlocks+0x1b0>)
 8002c3a:	6053      	str	r3, [r2, #4]
	SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) SDIO_DATABLOCKSIZE;
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <SD_WriteMultiBlocks+0x1b0>)
 8002c3e:	2290      	movs	r2, #144	; 0x90
 8002c40:	609a      	str	r2, [r3, #8]
	SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <SD_WriteMultiBlocks+0x1b0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
	SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <SD_WriteMultiBlocks+0x1b0>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
	SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <SD_WriteMultiBlocks+0x1b0>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	615a      	str	r2, [r3, #20]
	SDIO_DataConfig (&SDIO_DataInitStructure);
 8002c54:	480a      	ldr	r0, [pc, #40]	; (8002c80 <SD_WriteMultiBlocks+0x1b0>)
 8002c56:	f7fe fa85 	bl	8001164 <SDIO_DataConfig>

	return (errorstatus);
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	200001b8 	.word	0x200001b8
 8002c68:	200001bc 	.word	0x200001bc
 8002c6c:	200001b4 	.word	0x200001b4
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	2000018c 	.word	0x2000018c
 8002c78:	20000670 	.word	0x20000670
 8002c7c:	200001b0 	.word	0x200001b0
 8002c80:	200006f8 	.word	0x200006f8

08002c84 <SD_WaitWriteOperation>:
 *         card are already transferred by the DMA controller.
 * @param  None.
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_WaitWriteOperation (void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
	SD_Error errorstatus = SD_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout;

	timeout = SD_DATATIMEOUT;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c92:	603b      	str	r3, [r7, #0]

	while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0)) {
 8002c94:	e002      	b.n	8002c9c <SD_WaitWriteOperation+0x18>
		timeout--;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	603b      	str	r3, [r7, #0]
	while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0)) {
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <SD_WaitWriteOperation+0xa8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <SD_WaitWriteOperation+0x38>
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <SD_WaitWriteOperation+0xac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <SD_WaitWriteOperation+0x38>
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <SD_WaitWriteOperation+0xb0>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <SD_WaitWriteOperation+0x38>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ec      	bne.n	8002c96 <SD_WaitWriteOperation+0x12>
	}

	DMAEndOfTransfer = 0x00;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <SD_WaitWriteOperation+0xa8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

	timeout = SD_DATATIMEOUT;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc6:	603b      	str	r3, [r7, #0]

	while (((SDIO ->STA & SDIO_FLAG_TXACT)) && (timeout > 0)) {
 8002cc8:	e002      	b.n	8002cd0 <SD_WaitWriteOperation+0x4c>
		timeout--;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	603b      	str	r3, [r7, #0]
	while (((SDIO ->STA & SDIO_FLAG_TXACT)) && (timeout > 0)) {
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <SD_WaitWriteOperation+0xb4>)
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <SD_WaitWriteOperation+0x5e>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f3      	bne.n	8002cca <SD_WaitWriteOperation+0x46>
	}

	if (StopCondition == 1) {
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <SD_WaitWriteOperation+0xb8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d106      	bne.n	8002cf8 <SD_WaitWriteOperation+0x74>
		errorstatus = SD_StopTransfer ();
 8002cea:	f000 f829 	bl	8002d40 <SD_StopTransfer>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
		StopCondition = 0;
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <SD_WaitWriteOperation+0xb8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
	}

	if ((timeout == 0) && (errorstatus == SD_OK)) {
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <SD_WaitWriteOperation+0x84>
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <SD_WaitWriteOperation+0x84>
		errorstatus = SD_DATA_TIMEOUT;
 8002d04:	2304      	movs	r3, #4
 8002d06:	71fb      	strb	r3, [r7, #7]
	}

	/*!< Clear all the static flags */
	SDIO->ICR =  (SDIO_STATIC_FLAGS );
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <SD_WaitWriteOperation+0xb4>)
 8002d0a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38

	if (TransferError != SD_OK) {
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <SD_WaitWriteOperation+0xb0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <SD_WaitWriteOperation+0x9e>
		return (TransferError);
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <SD_WaitWriteOperation+0xb0>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e000      	b.n	8002d24 <SD_WaitWriteOperation+0xa0>
	} else {
		return (errorstatus);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200001c0 	.word	0x200001c0
 8002d30:	200001bc 	.word	0x200001bc
 8002d34:	200001b8 	.word	0x200001b8
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	200001b4 	.word	0x200001b4

08002d40 <SD_StopTransfer>:
 * @brief  Aborts an ongoing data transfer.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_StopTransfer (void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
	SD_Error errorstatus = SD_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	71fb      	strb	r3, [r7, #7]

	/*!< Send CMD12 STOP_TRANSMISSION  */
	SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <SD_StopTransfer+0x44>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <SD_StopTransfer+0x44>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <SD_StopTransfer+0x44>)
 8002d58:	2240      	movs	r2, #64	; 0x40
 8002d5a:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <SD_StopTransfer+0x44>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <SD_StopTransfer+0x44>)
 8002d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d68:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002d6a:	4806      	ldr	r0, [pc, #24]	; (8002d84 <SD_StopTransfer+0x44>)
 8002d6c:	f7fe f9ae 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_STOP_TRANSMISSION );
 8002d70:	200c      	movs	r0, #12
 8002d72:	f000 f92d 	bl	8002fd0 <CmdResp1Error>
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]

	return (errorstatus);
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000670 	.word	0x20000670

08002d88 <SD_SendStatus>:
 * @param  pcardstatus: pointer to the buffer that will contain the SD card
 *         status (Card Status register).
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_SendStatus (uint32_t *pcardstatus)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	SD_Error errorstatus = SD_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]

	if (pcardstatus == 0) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <SD_SendStatus+0x1a>
		errorstatus = SD_INVALID_PARAMETER;
 8002d9a:	2326      	movs	r3, #38	; 0x26
 8002d9c:	73fb      	strb	r3, [r7, #15]
		return (errorstatus);
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	e025      	b.n	8002dee <SD_SendStatus+0x66>
	}

	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <SD_SendStatus+0x70>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <SD_SendStatus+0x74>)
 8002daa:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <SD_SendStatus+0x74>)
 8002dae:	220d      	movs	r2, #13
 8002db0:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <SD_SendStatus+0x74>)
 8002db4:	2240      	movs	r2, #64	; 0x40
 8002db6:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <SD_SendStatus+0x74>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <SD_SendStatus+0x74>)
 8002dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc4:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8002dc6:	480d      	ldr	r0, [pc, #52]	; (8002dfc <SD_SendStatus+0x74>)
 8002dc8:	f7fe f980 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_SEND_STATUS );
 8002dcc:	200d      	movs	r0, #13
 8002dce:	f000 f8ff 	bl	8002fd0 <CmdResp1Error>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]

	if (errorstatus != SD_OK) {
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SD_SendStatus+0x58>
		return (errorstatus);
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	e006      	b.n	8002dee <SD_SendStatus+0x66>
	}

	*pcardstatus = SDIO_GetResponse (SDIO_RESP1);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fe f9ab 	bl	800113c <SDIO_GetResponse>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	601a      	str	r2, [r3, #0]

	return (errorstatus);
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200001b0 	.word	0x200001b0
 8002dfc:	20000670 	.word	0x20000670

08002e00 <SD_ProcessIRQSrc>:
 * @brief  Allows to process all the interrupts that are high.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
SD_Error SD_ProcessIRQSrc (void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	if (SDIO_GetITStatus (SDIO_IT_DATAEND) != RESET) {
 8002e04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e08:	f7fe fa10 	bl	800122c <SDIO_GetITStatus>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <SD_ProcessIRQSrc+0x28>
		TransferError = SD_OK;
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <SD_ProcessIRQSrc+0xc8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
		SDIO_ClearITPendingBit (SDIO_IT_DATAEND);
 8002e18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e1c:	f7fe fa20 	bl	8001260 <SDIO_ClearITPendingBit>
		TransferEnd = 1;
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <SD_ProcessIRQSrc+0xcc>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e041      	b.n	8002eac <SD_ProcessIRQSrc+0xac>
		logf ("SDIO IRQ : TransferEnd = 1, OK\r\n");
	} else if (SDIO_GetITStatus (SDIO_IT_DCRCFAIL) != RESET) {
 8002e28:	2002      	movs	r0, #2
 8002e2a:	f7fe f9ff 	bl	800122c <SDIO_GetITStatus>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <SD_ProcessIRQSrc+0x42>
		SDIO_ClearITPendingBit (SDIO_IT_DCRCFAIL);
 8002e34:	2002      	movs	r0, #2
 8002e36:	f7fe fa13 	bl	8001260 <SDIO_ClearITPendingBit>
		TransferError = SD_DATA_CRC_FAIL;
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <SD_ProcessIRQSrc+0xc8>)
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e034      	b.n	8002eac <SD_ProcessIRQSrc+0xac>
		logf ("SDIO IRQ : SD_DATA_CRC_FAIL\r\n");
	} else if (SDIO_GetITStatus (SDIO_IT_DTIMEOUT) != RESET) {
 8002e42:	2008      	movs	r0, #8
 8002e44:	f7fe f9f2 	bl	800122c <SDIO_GetITStatus>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <SD_ProcessIRQSrc+0x5c>
		SDIO_ClearITPendingBit (SDIO_IT_DTIMEOUT);
 8002e4e:	2008      	movs	r0, #8
 8002e50:	f7fe fa06 	bl	8001260 <SDIO_ClearITPendingBit>
		TransferError = SD_DATA_TIMEOUT;
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <SD_ProcessIRQSrc+0xc8>)
 8002e56:	2204      	movs	r2, #4
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e027      	b.n	8002eac <SD_ProcessIRQSrc+0xac>
		logf ("SDIO IRQ : SD_DATA_TIMEOUT\r\n");
	} else if (SDIO_GetITStatus (SDIO_IT_RXOVERR) != RESET) {
 8002e5c:	2020      	movs	r0, #32
 8002e5e:	f7fe f9e5 	bl	800122c <SDIO_GetITStatus>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <SD_ProcessIRQSrc+0x76>
		SDIO_ClearITPendingBit (SDIO_IT_RXOVERR);
 8002e68:	2020      	movs	r0, #32
 8002e6a:	f7fe f9f9 	bl	8001260 <SDIO_ClearITPendingBit>
		TransferError = SD_RX_OVERRUN;
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <SD_ProcessIRQSrc+0xc8>)
 8002e70:	2206      	movs	r2, #6
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e01a      	b.n	8002eac <SD_ProcessIRQSrc+0xac>
		logf ("SDIO IRQ : SD_RX_OVERRUN\r\n");
	} else if (SDIO_GetITStatus (SDIO_IT_TXUNDERR) != RESET) {
 8002e76:	2010      	movs	r0, #16
 8002e78:	f7fe f9d8 	bl	800122c <SDIO_GetITStatus>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <SD_ProcessIRQSrc+0x90>
		SDIO_ClearITPendingBit (SDIO_IT_TXUNDERR);
 8002e82:	2010      	movs	r0, #16
 8002e84:	f7fe f9ec 	bl	8001260 <SDIO_ClearITPendingBit>
		TransferError = SD_TX_UNDERRUN;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <SD_ProcessIRQSrc+0xc8>)
 8002e8a:	2205      	movs	r2, #5
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e00d      	b.n	8002eac <SD_ProcessIRQSrc+0xac>
		logf ("SDIO IRQ : SD_TX_UNDERRUN\r\n");
	} else if (SDIO_GetITStatus (SDIO_IT_STBITERR) != RESET) {
 8002e90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e94:	f7fe f9ca 	bl	800122c <SDIO_GetITStatus>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <SD_ProcessIRQSrc+0xac>
		SDIO_ClearITPendingBit (SDIO_IT_STBITERR);
 8002e9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ea2:	f7fe f9dd 	bl	8001260 <SDIO_ClearITPendingBit>
		TransferError = SD_START_BIT_ERR;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <SD_ProcessIRQSrc+0xc8>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	701a      	strb	r2, [r3, #0]
		logf ("SDIO IRQ : SD_START_BIT_ERR\r\n");
	}

	SDIO->MASK &= ~(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR | SDIO_IT_STBITERR);
 8002eac:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <SD_ProcessIRQSrc+0xd0>)
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <SD_ProcessIRQSrc+0xd0>)
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002eb6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002eba:	63d3      	str	r3, [r2, #60]	; 0x3c
	return (TransferError);
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <SD_ProcessIRQSrc+0xc8>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200001b8 	.word	0x200001b8
 8002ecc:	200001bc 	.word	0x200001bc
 8002ed0:	40012c00 	.word	0x40012c00

08002ed4 <SD_ProcessDMAIRQ>:
/**
 * @brief  This function waits until the SDIO DMA data transfer is finished.
 * @param  None.
 * @retval None.
 */
void SD_ProcessDMAIRQ(void) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
#ifdef SD_SDIO_DMA_STREAM3
	if (DMA2->LISR & SD_SDIO_DMA_FLAG_TCIF) {
 8002ed8:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <SD_ProcessDMAIRQ+0x24>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <SD_ProcessDMAIRQ+0x20>
#else
	if (DMA2->HISR & SD_SDIO_DMA_FLAG_TCIF) {
#endif
		DMAEndOfTransfer = 0x01;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SD_ProcessDMAIRQ+0x28>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
		DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_TCIF | SD_SDIO_DMA_FLAG_FEIF);
 8002eea:	f04f 51c2 	mov.w	r1, #406847488	; 0x18400000
 8002eee:	4804      	ldr	r0, [pc, #16]	; (8002f00 <SD_ProcessDMAIRQ+0x2c>)
 8002ef0:	f7fd fbb4 	bl	800065c <DMA_ClearFlag>
	}
}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40026400 	.word	0x40026400
 8002efc:	200001c0 	.word	0x200001c0
 8002f00:	40026458 	.word	0x40026458

08002f04 <CmdError>:
 * @brief  Checks for error conditions for CMD0.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error CmdError (void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
	SD_Error errorstatus = SD_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout;

	timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
 8002f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f12:	607b      	str	r3, [r7, #4]

	while ((timeout > 0) && (SDIO_GetFlagStatus (SDIO_FLAG_CMDSENT) == RESET)) {
 8002f14:	e002      	b.n	8002f1c <CmdError+0x18>
		timeout--;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	607b      	str	r3, [r7, #4]
	while ((timeout > 0) && (SDIO_GetFlagStatus (SDIO_FLAG_CMDSENT) == RESET)) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <CmdError+0x2a>
 8002f22:	2080      	movs	r0, #128	; 0x80
 8002f24:	f7fe f968 	bl	80011f8 <SDIO_GetFlagStatus>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f3      	beq.n	8002f16 <CmdError+0x12>
	}

	if (timeout == 0) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <CmdError+0x38>
		errorstatus = SD_CMD_RSP_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	70fb      	strb	r3, [r7, #3]
		return (errorstatus);
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	e004      	b.n	8002f46 <CmdError+0x42>
	}

	/*!< Clear all the static flags */
	SDIO->ICR =  (SDIO_STATIC_FLAGS );
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <CmdError+0x4c>)
 8002f3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38

	return (errorstatus);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00

08002f54 <CmdResp7Error>:
 * @brief  Checks for error conditions for R7 response.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error CmdResp7Error (void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
	SD_Error errorstatus = SD_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	71fb      	strb	r3, [r7, #7]
	uint32_t status;
	uint32_t timeout = SDIO_CMD0TIMEOUT;
 8002f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f62:	60bb      	str	r3, [r7, #8]

	status = SDIO ->STA;
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <CmdResp7Error+0x78>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	60fb      	str	r3, [r7, #12]

	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0)) {
 8002f6a:	e005      	b.n	8002f78 <CmdResp7Error+0x24>
		timeout--;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
		status = SDIO ->STA;
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <CmdResp7Error+0x78>)
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	60fb      	str	r3, [r7, #12]
	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0)) {
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <CmdResp7Error+0x34>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f1      	bne.n	8002f6c <CmdResp7Error+0x18>
	}

	if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT)) {
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <CmdResp7Error+0x44>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <CmdResp7Error+0x52>
		/*!< Card is not V2.0 complient or card does not support the set voltage range */
		errorstatus = SD_CMD_RSP_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	71fb      	strb	r3, [r7, #7]
		SDIO->ICR =  (SDIO_FLAG_CTIMEOUT);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <CmdResp7Error+0x78>)
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	e00c      	b.n	8002fc0 <CmdResp7Error+0x6c>
	}

	if (status & SDIO_FLAG_CMDREND) {
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <CmdResp7Error+0x6a>
		/*!< Card is SD V2.0 compliant */
		errorstatus = SD_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	71fb      	strb	r3, [r7, #7]
		SDIO->ICR =  (SDIO_FLAG_CMDREND);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <CmdResp7Error+0x78>)
 8002fb6:	2240      	movs	r2, #64	; 0x40
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	e000      	b.n	8002fc0 <CmdResp7Error+0x6c>
	}
	return (errorstatus);
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012c00 	.word	0x40012c00

08002fd0 <CmdResp1Error>:
 * @brief  Checks for error conditions for R1 response.
 * @param  cmd: The sent command index.
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error CmdResp1Error (uint8_t cmd)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
	SD_Error errorstatus = SD_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	74fb      	strb	r3, [r7, #19]
	uint32_t status;
	uint32_t response_r1;

	status = SDIO ->STA;
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <CmdResp1Error+0x19c>)
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	617b      	str	r3, [r7, #20]

	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))) {
 8002fe4:	e002      	b.n	8002fec <CmdResp1Error+0x1c>
		status = SDIO ->STA;
 8002fe6:	4b61      	ldr	r3, [pc, #388]	; (800316c <CmdResp1Error+0x19c>)
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	617b      	str	r3, [r7, #20]
	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))) {
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f7      	beq.n	8002fe6 <CmdResp1Error+0x16>
	}

	if (status & SDIO_FLAG_CTIMEOUT) {
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <CmdResp1Error+0x3e>
		errorstatus = SD_CMD_RSP_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	74fb      	strb	r3, [r7, #19]
		SDIO->ICR =  (SDIO_FLAG_CTIMEOUT);
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <CmdResp1Error+0x19c>)
 8003006:	2204      	movs	r2, #4
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	e0a9      	b.n	8003162 <CmdResp1Error+0x192>
	} else if (status & SDIO_FLAG_CCRCFAIL) {
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <CmdResp1Error+0x56>
		errorstatus = SD_CMD_CRC_FAIL;
 8003018:	2301      	movs	r3, #1
 800301a:	74fb      	strb	r3, [r7, #19]
		SDIO->ICR =  (SDIO_FLAG_CCRCFAIL);
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <CmdResp1Error+0x19c>)
 800301e:	2201      	movs	r2, #1
 8003020:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	e09d      	b.n	8003162 <CmdResp1Error+0x192>
	}

	/*!< Check response received is of desired command */
	if (SDIO_GetCommandResponse () != cmd) {
 8003026:	f7fe f87d 	bl	8001124 <SDIO_GetCommandResponse>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <CmdResp1Error+0x6c>
		errorstatus = SD_ILLEGAL_CMD;
 8003034:	2310      	movs	r3, #16
 8003036:	74fb      	strb	r3, [r7, #19]
		return (errorstatus);
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	e092      	b.n	8003162 <CmdResp1Error+0x192>
	}

	/*!< Clear all the static flags */
	SDIO->ICR =  (SDIO_STATIC_FLAGS);
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <CmdResp1Error+0x19c>)
 800303e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003042:	639a      	str	r2, [r3, #56]	; 0x38

	/*!< We have received response, retrieve it for analysis  */
	response_r1 = SDIO_GetResponse (SDIO_RESP1);
 8003044:	2000      	movs	r0, #0
 8003046:	f7fe f879 	bl	800113c <SDIO_GetResponse>
 800304a:	60f8      	str	r0, [r7, #12]

	if ((response_r1 & SD_OCR_ERRORBITS )== SD_ALLZERO) {
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4b48      	ldr	r3, [pc, #288]	; (8003170 <CmdResp1Error+0x1a0>)
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <CmdResp1Error+0x8a>
		return (errorstatus);
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	e083      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE ) {
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	da01      	bge.n	8003064 <CmdResp1Error+0x94>
		return (SD_ADDR_OUT_OF_RANGE);
 8003060:	231c      	movs	r3, #28
 8003062:	e07e      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_ADDR_MISALIGNED ) {
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <CmdResp1Error+0xa2>
		return (SD_ADDR_MISALIGNED);
 800306e:	2309      	movs	r3, #9
 8003070:	e077      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_BLOCK_LEN_ERR ) {
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <CmdResp1Error+0xb0>
		return (SD_BLOCK_LEN_ERR);
 800307c:	230a      	movs	r3, #10
 800307e:	e070      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_ERASE_SEQ_ERR ) {
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <CmdResp1Error+0xbe>
		return (SD_ERASE_SEQ_ERR);
 800308a:	230b      	movs	r3, #11
 800308c:	e069      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_BAD_ERASE_PARAM ) {
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <CmdResp1Error+0xcc>
		return (SD_BAD_ERASE_PARAM);
 8003098:	230c      	movs	r3, #12
 800309a:	e062      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION ) {
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <CmdResp1Error+0xda>
		return (SD_WRITE_PROT_VIOLATION);
 80030a6:	230d      	movs	r3, #13
 80030a8:	e05b      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED ) {
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <CmdResp1Error+0xe8>
		return (SD_LOCK_UNLOCK_FAILED);
 80030b4:	230e      	movs	r3, #14
 80030b6:	e054      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_COM_CRC_FAILED ) {
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <CmdResp1Error+0xf6>
		return (SD_COM_CRC_FAILED);
 80030c2:	230f      	movs	r3, #15
 80030c4:	e04d      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_ILLEGAL_CMD ) {
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <CmdResp1Error+0x104>
		return (SD_ILLEGAL_CMD);
 80030d0:	2310      	movs	r3, #16
 80030d2:	e046      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_CARD_ECC_FAILED ) {
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <CmdResp1Error+0x112>
		return (SD_CARD_ECC_FAILED);
 80030de:	2311      	movs	r3, #17
 80030e0:	e03f      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_CC_ERROR ) {
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <CmdResp1Error+0x120>
		return (SD_CC_ERROR);
 80030ec:	2312      	movs	r3, #18
 80030ee:	e038      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR ) {
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <CmdResp1Error+0x12e>
		return (SD_GENERAL_UNKNOWN_ERROR);
 80030fa:	2313      	movs	r3, #19
 80030fc:	e031      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN ) {
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <CmdResp1Error+0x13c>
		return (SD_STREAM_READ_UNDERRUN);
 8003108:	2314      	movs	r3, #20
 800310a:	e02a      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN ) {
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <CmdResp1Error+0x14a>
		return (SD_STREAM_WRITE_OVERRUN);
 8003116:	2315      	movs	r3, #21
 8003118:	e023      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE ) {
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <CmdResp1Error+0x158>
		return (SD_CID_CSD_OVERWRITE);
 8003124:	2316      	movs	r3, #22
 8003126:	e01c      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_WP_ERASE_SKIP ) {
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <CmdResp1Error+0x166>
		return (SD_WP_ERASE_SKIP);
 8003132:	2317      	movs	r3, #23
 8003134:	e015      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_CARD_ECC_DISABLED ) {
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <CmdResp1Error+0x174>
		return (SD_CARD_ECC_DISABLED);
 8003140:	2318      	movs	r3, #24
 8003142:	e00e      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_ERASE_RESET ) {
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <CmdResp1Error+0x182>
		return (SD_ERASE_RESET);
 800314e:	2319      	movs	r3, #25
 8003150:	e007      	b.n	8003162 <CmdResp1Error+0x192>
	}

	if (response_r1 & SD_OCR_AKE_SEQ_ERROR ) {
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <CmdResp1Error+0x190>
		return (SD_AKE_SEQ_ERROR);
 800315c:	231a      	movs	r3, #26
 800315e:	e000      	b.n	8003162 <CmdResp1Error+0x192>
	}
	return (errorstatus);
 8003160:	7cfb      	ldrb	r3, [r7, #19]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	fdffe008 	.word	0xfdffe008

08003174 <CmdResp3Error>:
 * @brief  Checks for error conditions for R3 (OCR) response.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error CmdResp3Error (void)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
        SD_Error errorstatus = SD_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	70fb      	strb	r3, [r7, #3]
        uint32_t status;

        status = SDIO ->STA;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <CmdResp3Error+0x50>)
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	607b      	str	r3, [r7, #4]

        while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))) {
 8003184:	e002      	b.n	800318c <CmdResp3Error+0x18>
                status = SDIO ->STA;
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <CmdResp3Error+0x50>)
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	607b      	str	r3, [r7, #4]
        while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f7      	beq.n	8003186 <CmdResp3Error+0x12>
        }

        if (status & SDIO_FLAG_CTIMEOUT) {
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <CmdResp3Error+0x3a>
                errorstatus = SD_CMD_RSP_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	70fb      	strb	r3, [r7, #3]
                SDIO->ICR =  (SDIO_FLAG_CTIMEOUT);
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <CmdResp3Error+0x50>)
 80031a6:	2204      	movs	r2, #4
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38
                return (errorstatus);
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	e004      	b.n	80031b8 <CmdResp3Error+0x44>
        }
        /*!< Clear all the static flags */
        SDIO->ICR =  (SDIO_STATIC_FLAGS );
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <CmdResp3Error+0x50>)
 80031b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
        return (errorstatus);
 80031b6:	78fb      	ldrb	r3, [r7, #3]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012c00 	.word	0x40012c00

080031c8 <CmdResp2Error>:
 * @brief  Checks for error conditions for R2 (CID or CSD) response.
 * @param  None
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error CmdResp2Error (void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
	SD_Error errorstatus = SD_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	70fb      	strb	r3, [r7, #3]
	uint32_t status;

	status = SDIO ->STA;
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <CmdResp2Error+0x68>)
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	607b      	str	r3, [r7, #4]

	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND))) {
 80031d8:	e002      	b.n	80031e0 <CmdResp2Error+0x18>
		status = SDIO ->STA;
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <CmdResp2Error+0x68>)
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	607b      	str	r3, [r7, #4]
	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND))) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f7      	beq.n	80031da <CmdResp2Error+0x12>
	}

	if (status & SDIO_FLAG_CTIMEOUT) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <CmdResp2Error+0x3a>
		errorstatus = SD_CMD_RSP_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	70fb      	strb	r3, [r7, #3]
		SDIO->ICR =  (SDIO_FLAG_CTIMEOUT);
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <CmdResp2Error+0x68>)
 80031fa:	2204      	movs	r2, #4
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	e010      	b.n	8003224 <CmdResp2Error+0x5c>
	} else if (status & SDIO_FLAG_CCRCFAIL) {
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <CmdResp2Error+0x52>
		errorstatus = SD_CMD_CRC_FAIL;
 800320c:	2301      	movs	r3, #1
 800320e:	70fb      	strb	r3, [r7, #3]
		SDIO->ICR =  (SDIO_FLAG_CCRCFAIL);
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <CmdResp2Error+0x68>)
 8003212:	2201      	movs	r2, #1
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	e004      	b.n	8003224 <CmdResp2Error+0x5c>
	}

	/*!< Clear all the static flags */
	SDIO->ICR =  (SDIO_STATIC_FLAGS );
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <CmdResp2Error+0x68>)
 800321c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003220:	639a      	str	r2, [r3, #56]	; 0x38

	return (errorstatus);
 8003222:	78fb      	ldrb	r3, [r7, #3]
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40012c00 	.word	0x40012c00

08003234 <CmdResp6Error>:
 * @param  prca: pointer to the variable that will contain the SD card relative
 *         address RCA.
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error CmdResp6Error (uint8_t cmd, uint16_t *prca)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	71fb      	strb	r3, [r7, #7]
	SD_Error errorstatus = SD_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	74fb      	strb	r3, [r7, #19]
	uint32_t status;
	uint32_t response_r1;

	status = SDIO ->STA;
 8003244:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <CmdResp6Error+0xcc>)
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	617b      	str	r3, [r7, #20]

	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND))) {
 800324a:	e002      	b.n	8003252 <CmdResp6Error+0x1e>
		status = SDIO ->STA;
 800324c:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <CmdResp6Error+0xcc>)
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	617b      	str	r3, [r7, #20]
	while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND))) {
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f7      	beq.n	800324c <CmdResp6Error+0x18>
	}

	if (status & SDIO_FLAG_CTIMEOUT) {
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <CmdResp6Error+0x40>
		errorstatus = SD_CMD_RSP_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	74fb      	strb	r3, [r7, #19]
		SDIO->ICR =  (SDIO_FLAG_CTIMEOUT);
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <CmdResp6Error+0xcc>)
 800326c:	2204      	movs	r2, #4
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	e040      	b.n	80032f6 <CmdResp6Error+0xc2>
	} else if (status & SDIO_FLAG_CCRCFAIL) {
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <CmdResp6Error+0x58>
		errorstatus = SD_CMD_CRC_FAIL;
 800327e:	2301      	movs	r3, #1
 8003280:	74fb      	strb	r3, [r7, #19]
		SDIO->ICR =  (SDIO_FLAG_CCRCFAIL);
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <CmdResp6Error+0xcc>)
 8003284:	2201      	movs	r2, #1
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
		return (errorstatus);
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	e034      	b.n	80032f6 <CmdResp6Error+0xc2>
	}

	/*!< Check response received is of desired command */
	if (SDIO_GetCommandResponse () != cmd) {
 800328c:	f7fd ff4a 	bl	8001124 <SDIO_GetCommandResponse>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <CmdResp6Error+0x6e>
		errorstatus = SD_ILLEGAL_CMD;
 800329a:	2310      	movs	r3, #16
 800329c:	74fb      	strb	r3, [r7, #19]
		return (errorstatus);
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	e029      	b.n	80032f6 <CmdResp6Error+0xc2>
	}

	/*!< Clear all the static flags */
	SDIO->ICR =  (SDIO_STATIC_FLAGS );
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <CmdResp6Error+0xcc>)
 80032a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38

	/*!< We have received response, retrieve it.  */
	response_r1 = SDIO_GetResponse (SDIO_RESP1);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fd ff46 	bl	800113c <SDIO_GetResponse>
 80032b0:	60f8      	str	r0, [r7, #12]

	if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED ))) {
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <CmdResp6Error+0x96>
		*prca = (uint16_t) (response_r1 >> 16);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	801a      	strh	r2, [r3, #0]
		return (errorstatus);
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	e015      	b.n	80032f6 <CmdResp6Error+0xc2>
	}

	if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR ) {
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <CmdResp6Error+0xa4>
		return (SD_GENERAL_UNKNOWN_ERROR);
 80032d4:	2313      	movs	r3, #19
 80032d6:	e00e      	b.n	80032f6 <CmdResp6Error+0xc2>
	}

	if (response_r1 & SD_R6_ILLEGAL_CMD ) {
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <CmdResp6Error+0xb2>
		return (SD_ILLEGAL_CMD);
 80032e2:	2310      	movs	r3, #16
 80032e4:	e007      	b.n	80032f6 <CmdResp6Error+0xc2>
	}

	if (response_r1 & SD_R6_COM_CRC_FAILED ) {
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <CmdResp6Error+0xc0>
		return (SD_COM_CRC_FAILED);
 80032f0:	230f      	movs	r3, #15
 80032f2:	e000      	b.n	80032f6 <CmdResp6Error+0xc2>
	}

	return (errorstatus);
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <SDEnWideBus>:
 * @param  NewState: new state of the SDIO wide bus mode.
 *   This parameter can be: ENABLE or DISABLE.
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error SDEnWideBus (FunctionalState NewState)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
	SD_Error errorstatus = SD_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]

	uint32_t scr[2] = { 0, 0 };
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]

	if (SDIO_GetResponse (SDIO_RESP1) & SD_CARD_LOCKED ) {
 800331a:	2000      	movs	r0, #0
 800331c:	f7fd ff0e 	bl	800113c <SDIO_GetResponse>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <SDEnWideBus+0x2e>
		errorstatus = SD_LOCK_UNLOCK_FAILED;
 800332a:	230e      	movs	r3, #14
 800332c:	75fb      	strb	r3, [r7, #23]
		return (errorstatus);
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	e09f      	b.n	8003472 <SDEnWideBus+0x16e>
	}

	/*!< Get SCR Register */
	errorstatus = FindSCR (RCA, scr);
 8003332:	4b52      	ldr	r3, [pc, #328]	; (800347c <SDEnWideBus+0x178>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f107 020c 	add.w	r2, r7, #12
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8a0 	bl	8003484 <FindSCR>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]

	if (errorstatus != SD_OK) {
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <SDEnWideBus+0x4e>
		return (errorstatus);
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	e08f      	b.n	8003472 <SDEnWideBus+0x16e>
	}

	/*!< If wide bus operation to be enabled */
	if (NewState == ENABLE) {
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d146      	bne.n	80033e6 <SDEnWideBus+0xe2>
		/*!< If requested card supports wide bus operation */
		if ((scr[1] & SD_WIDE_BUS_SUPPORT )!= SD_ALLZERO) {
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d03d      	beq.n	80033de <SDEnWideBus+0xda>
			/*!< Send CMD55 APP_CMD with argument as card's RCA.*/
			SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <SDEnWideBus+0x178>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	4a45      	ldr	r2, [pc, #276]	; (8003480 <SDEnWideBus+0x17c>)
 800336a:	6013      	str	r3, [r2, #0]
			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 800336c:	4b44      	ldr	r3, [pc, #272]	; (8003480 <SDEnWideBus+0x17c>)
 800336e:	2237      	movs	r2, #55	; 0x37
 8003370:	605a      	str	r2, [r3, #4]
			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <SDEnWideBus+0x17c>)
 8003374:	2240      	movs	r2, #64	; 0x40
 8003376:	609a      	str	r2, [r3, #8]
			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8003378:	4b41      	ldr	r3, [pc, #260]	; (8003480 <SDEnWideBus+0x17c>)
 800337a:	2200      	movs	r2, #0
 800337c:	60da      	str	r2, [r3, #12]
			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800337e:	4b40      	ldr	r3, [pc, #256]	; (8003480 <SDEnWideBus+0x17c>)
 8003380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003384:	611a      	str	r2, [r3, #16]
			SDIO_SendCommand (&SDIO_CmdInitStructure);
 8003386:	483e      	ldr	r0, [pc, #248]	; (8003480 <SDEnWideBus+0x17c>)
 8003388:	f7fd fea0 	bl	80010cc <SDIO_SendCommand>

			errorstatus = CmdResp1Error (SD_CMD_APP_CMD );
 800338c:	2037      	movs	r0, #55	; 0x37
 800338e:	f7ff fe1f 	bl	8002fd0 <CmdResp1Error>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]

			if (errorstatus != SD_OK) {
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <SDEnWideBus+0x9c>
				return (errorstatus);
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	e068      	b.n	8003472 <SDEnWideBus+0x16e>
			}

			/*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
			SDIO_CmdInitStructure.SDIO_Argument = 0x2;
 80033a0:	4b37      	ldr	r3, [pc, #220]	; (8003480 <SDEnWideBus+0x17c>)
 80033a2:	2202      	movs	r2, #2
 80033a4:	601a      	str	r2, [r3, #0]
			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <SDEnWideBus+0x17c>)
 80033a8:	2206      	movs	r2, #6
 80033aa:	605a      	str	r2, [r3, #4]
			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <SDEnWideBus+0x17c>)
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	609a      	str	r2, [r3, #8]
			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80033b2:	4b33      	ldr	r3, [pc, #204]	; (8003480 <SDEnWideBus+0x17c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	60da      	str	r2, [r3, #12]
			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <SDEnWideBus+0x17c>)
 80033ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033be:	611a      	str	r2, [r3, #16]
			SDIO_SendCommand (&SDIO_CmdInitStructure);
 80033c0:	482f      	ldr	r0, [pc, #188]	; (8003480 <SDEnWideBus+0x17c>)
 80033c2:	f7fd fe83 	bl	80010cc <SDIO_SendCommand>

			errorstatus = CmdResp1Error (SD_CMD_APP_SD_SET_BUSWIDTH );
 80033c6:	2006      	movs	r0, #6
 80033c8:	f7ff fe02 	bl	8002fd0 <CmdResp1Error>
 80033cc:	4603      	mov	r3, r0
 80033ce:	75fb      	strb	r3, [r7, #23]

			if (errorstatus != SD_OK) {
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <SDEnWideBus+0xd6>
				return (errorstatus);
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	e04b      	b.n	8003472 <SDEnWideBus+0x16e>
			}
			return (errorstatus);
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	e049      	b.n	8003472 <SDEnWideBus+0x16e>
		} else {
			errorstatus = SD_REQUEST_NOT_APPLICABLE;
 80033de:	2325      	movs	r3, #37	; 0x25
 80033e0:	75fb      	strb	r3, [r7, #23]
			return (errorstatus);
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	e045      	b.n	8003472 <SDEnWideBus+0x16e>
		}
	} else { /*!< If wide bus operation to be disabled */
		/*!< If requested card supports 1 bit mode operation */
		if ((scr[1] & SD_SINGLE_BUS_SUPPORT )!= SD_ALLZERO) {
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03d      	beq.n	800346c <SDEnWideBus+0x168>
			/*!< Send CMD55 APP_CMD with argument as card's RCA.*/
			SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <SDEnWideBus+0x178>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	041b      	lsls	r3, r3, #16
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <SDEnWideBus+0x17c>)
 80033f8:	6013      	str	r3, [r2, #0]
			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <SDEnWideBus+0x17c>)
 80033fc:	2237      	movs	r2, #55	; 0x37
 80033fe:	605a      	str	r2, [r3, #4]
			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8003400:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <SDEnWideBus+0x17c>)
 8003402:	2240      	movs	r2, #64	; 0x40
 8003404:	609a      	str	r2, [r3, #8]
			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <SDEnWideBus+0x17c>)
 8003408:	2200      	movs	r2, #0
 800340a:	60da      	str	r2, [r3, #12]
			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <SDEnWideBus+0x17c>)
 800340e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003412:	611a      	str	r2, [r3, #16]
			SDIO_SendCommand (&SDIO_CmdInitStructure);
 8003414:	481a      	ldr	r0, [pc, #104]	; (8003480 <SDEnWideBus+0x17c>)
 8003416:	f7fd fe59 	bl	80010cc <SDIO_SendCommand>

			errorstatus = CmdResp1Error (SD_CMD_APP_CMD );
 800341a:	2037      	movs	r0, #55	; 0x37
 800341c:	f7ff fdd8 	bl	8002fd0 <CmdResp1Error>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]

			if (errorstatus != SD_OK) {
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <SDEnWideBus+0x12a>
				return (errorstatus);
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	e021      	b.n	8003472 <SDEnWideBus+0x16e>
			}

			/*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
			SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 800342e:	4b14      	ldr	r3, [pc, #80]	; (8003480 <SDEnWideBus+0x17c>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <SDEnWideBus+0x17c>)
 8003436:	2206      	movs	r2, #6
 8003438:	605a      	str	r2, [r3, #4]
			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <SDEnWideBus+0x17c>)
 800343c:	2240      	movs	r2, #64	; 0x40
 800343e:	609a      	str	r2, [r3, #8]
			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <SDEnWideBus+0x17c>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8003446:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <SDEnWideBus+0x17c>)
 8003448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800344c:	611a      	str	r2, [r3, #16]
			SDIO_SendCommand (&SDIO_CmdInitStructure);
 800344e:	480c      	ldr	r0, [pc, #48]	; (8003480 <SDEnWideBus+0x17c>)
 8003450:	f7fd fe3c 	bl	80010cc <SDIO_SendCommand>

			errorstatus = CmdResp1Error (SD_CMD_APP_SD_SET_BUSWIDTH );
 8003454:	2006      	movs	r0, #6
 8003456:	f7ff fdbb 	bl	8002fd0 <CmdResp1Error>
 800345a:	4603      	mov	r3, r0
 800345c:	75fb      	strb	r3, [r7, #23]

			if (errorstatus != SD_OK) {
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <SDEnWideBus+0x164>
				return (errorstatus);
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	e004      	b.n	8003472 <SDEnWideBus+0x16e>
			}

			return (errorstatus);
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	e002      	b.n	8003472 <SDEnWideBus+0x16e>
		} else {
			errorstatus = SD_REQUEST_NOT_APPLICABLE;
 800346c:	2325      	movs	r3, #37	; 0x25
 800346e:	75fb      	strb	r3, [r7, #23]
			return (errorstatus);
 8003470:	7dfb      	ldrb	r3, [r7, #23]
		}
	}
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200001b0 	.word	0x200001b0
 8003480:	20000670 	.word	0x20000670

08003484 <FindSCR>:
 * @param  rca: selected card address.
 * @param  pscr: pointer to the buffer that will contain the SCR value.
 * @retval SD_Error: SD Card Error code.
 */
static SD_Error FindSCR (uint16_t rca, uint32_t *pscr)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
	SD_Error errorstatus = SD_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	74fb      	strb	r3, [r7, #19]
	uint32_t tempscr[2] = { 0, 0 };
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]

	/*!< Set Block Size To 8 Bytes */
	/*!< Send CMD55 APP_CMD with argument as card's RCA */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) 8;
 80034a0:	4b75      	ldr	r3, [pc, #468]	; (8003678 <FindSCR+0x1f4>)
 80034a2:	2208      	movs	r2, #8
 80034a4:	601a      	str	r2, [r3, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
 80034a6:	4b74      	ldr	r3, [pc, #464]	; (8003678 <FindSCR+0x1f4>)
 80034a8:	2210      	movs	r2, #16
 80034aa:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80034ac:	4b72      	ldr	r3, [pc, #456]	; (8003678 <FindSCR+0x1f4>)
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80034b2:	4b71      	ldr	r3, [pc, #452]	; (8003678 <FindSCR+0x1f4>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80034b8:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <FindSCR+0x1f4>)
 80034ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034be:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 80034c0:	486d      	ldr	r0, [pc, #436]	; (8003678 <FindSCR+0x1f4>)
 80034c2:	f7fd fe03 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_SET_BLOCKLEN );
 80034c6:	2010      	movs	r0, #16
 80034c8:	f7ff fd82 	bl	8002fd0 <CmdResp1Error>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]

	if (errorstatus != SD_OK) {
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <FindSCR+0x56>
		return (errorstatus);
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	e0c9      	b.n	800366e <FindSCR+0x1ea>
	}

	/*!< Send CMD55 APP_CMD with argument as card's RCA */
	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80034da:	4b68      	ldr	r3, [pc, #416]	; (800367c <FindSCR+0x1f8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	4a65      	ldr	r2, [pc, #404]	; (8003678 <FindSCR+0x1f4>)
 80034e2:	6013      	str	r3, [r2, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
 80034e4:	4b64      	ldr	r3, [pc, #400]	; (8003678 <FindSCR+0x1f4>)
 80034e6:	2237      	movs	r2, #55	; 0x37
 80034e8:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80034ea:	4b63      	ldr	r3, [pc, #396]	; (8003678 <FindSCR+0x1f4>)
 80034ec:	2240      	movs	r2, #64	; 0x40
 80034ee:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80034f0:	4b61      	ldr	r3, [pc, #388]	; (8003678 <FindSCR+0x1f4>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80034f6:	4b60      	ldr	r3, [pc, #384]	; (8003678 <FindSCR+0x1f4>)
 80034f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fc:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 80034fe:	485e      	ldr	r0, [pc, #376]	; (8003678 <FindSCR+0x1f4>)
 8003500:	f7fd fde4 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_APP_CMD );
 8003504:	2037      	movs	r0, #55	; 0x37
 8003506:	f7ff fd63 	bl	8002fd0 <CmdResp1Error>
 800350a:	4603      	mov	r3, r0
 800350c:	74fb      	strb	r3, [r7, #19]

	if (errorstatus != SD_OK) {
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <FindSCR+0x94>
		return (errorstatus);
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	e0aa      	b.n	800366e <FindSCR+0x1ea>
	}
	
	SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <FindSCR+0x1fc>)
 800351a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800351e:	601a      	str	r2, [r3, #0]
	SDIO_DataInitStructure.SDIO_DataLength = 8;
 8003520:	4b57      	ldr	r3, [pc, #348]	; (8003680 <FindSCR+0x1fc>)
 8003522:	2208      	movs	r2, #8
 8003524:	605a      	str	r2, [r3, #4]
	SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
 8003526:	4b56      	ldr	r3, [pc, #344]	; (8003680 <FindSCR+0x1fc>)
 8003528:	2230      	movs	r2, #48	; 0x30
 800352a:	609a      	str	r2, [r3, #8]
	SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 800352c:	4b54      	ldr	r3, [pc, #336]	; (8003680 <FindSCR+0x1fc>)
 800352e:	2202      	movs	r2, #2
 8003530:	60da      	str	r2, [r3, #12]
	SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8003532:	4b53      	ldr	r3, [pc, #332]	; (8003680 <FindSCR+0x1fc>)
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
	SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8003538:	4b51      	ldr	r3, [pc, #324]	; (8003680 <FindSCR+0x1fc>)
 800353a:	2201      	movs	r2, #1
 800353c:	615a      	str	r2, [r3, #20]
	SDIO_DataConfig (&SDIO_DataInitStructure);
 800353e:	4850      	ldr	r0, [pc, #320]	; (8003680 <FindSCR+0x1fc>)
 8003540:	f7fd fe10 	bl	8001164 <SDIO_DataConfig>

	/*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
	SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8003544:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <FindSCR+0x1f4>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
	SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
 800354a:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <FindSCR+0x1f4>)
 800354c:	2233      	movs	r2, #51	; 0x33
 800354e:	605a      	str	r2, [r3, #4]
	SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8003550:	4b49      	ldr	r3, [pc, #292]	; (8003678 <FindSCR+0x1f4>)
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	609a      	str	r2, [r3, #8]
	SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8003556:	4b48      	ldr	r3, [pc, #288]	; (8003678 <FindSCR+0x1f4>)
 8003558:	2200      	movs	r2, #0
 800355a:	60da      	str	r2, [r3, #12]
	SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800355c:	4b46      	ldr	r3, [pc, #280]	; (8003678 <FindSCR+0x1f4>)
 800355e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003562:	611a      	str	r2, [r3, #16]
	SDIO_SendCommand (&SDIO_CmdInitStructure);
 8003564:	4844      	ldr	r0, [pc, #272]	; (8003678 <FindSCR+0x1f4>)
 8003566:	f7fd fdb1 	bl	80010cc <SDIO_SendCommand>

	errorstatus = CmdResp1Error (SD_CMD_SD_APP_SEND_SCR );
 800356a:	2033      	movs	r0, #51	; 0x33
 800356c:	f7ff fd30 	bl	8002fd0 <CmdResp1Error>
 8003570:	4603      	mov	r3, r0
 8003572:	74fb      	strb	r3, [r7, #19]

	if (errorstatus != SD_OK) {
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d014      	beq.n	80035a4 <FindSCR+0x120>
		return (errorstatus);
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	e077      	b.n	800366e <FindSCR+0x1ea>
	}

	while (!(SDIO ->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))) {
		if (SDIO_GetFlagStatus (SDIO_FLAG_RXDAVL) != RESET) {
 800357e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003582:	f7fd fe39 	bl	80011f8 <SDIO_GetFlagStatus>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <FindSCR+0x120>
			*(tempscr + index) = SDIO_ReadData ();
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	f107 0208 	add.w	r2, r7, #8
 8003594:	18d4      	adds	r4, r2, r3
 8003596:	f7fd fe13 	bl	80011c0 <SDIO_ReadData>
 800359a:	4603      	mov	r3, r0
 800359c:	6023      	str	r3, [r4, #0]
			index++;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
	while (!(SDIO ->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))) {
 80035a4:	4b37      	ldr	r3, [pc, #220]	; (8003684 <FindSCR+0x200>)
 80035a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a8:	f240 632a 	movw	r3, #1578	; 0x62a
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0e5      	beq.n	800357e <FindSCR+0xfa>
		}
	}

	if (SDIO_GetFlagStatus (SDIO_FLAG_DTIMEOUT) != RESET) {
 80035b2:	2008      	movs	r0, #8
 80035b4:	f7fd fe20 	bl	80011f8 <SDIO_GetFlagStatus>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d006      	beq.n	80035cc <FindSCR+0x148>
		SDIO->ICR =  (SDIO_FLAG_DTIMEOUT);
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <FindSCR+0x200>)
 80035c0:	2208      	movs	r2, #8
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
		errorstatus = SD_DATA_TIMEOUT;
 80035c4:	2304      	movs	r3, #4
 80035c6:	74fb      	strb	r3, [r7, #19]
		return (errorstatus);
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	e050      	b.n	800366e <FindSCR+0x1ea>
	} else if (SDIO_GetFlagStatus (SDIO_FLAG_DCRCFAIL) != RESET) {
 80035cc:	2002      	movs	r0, #2
 80035ce:	f7fd fe13 	bl	80011f8 <SDIO_GetFlagStatus>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <FindSCR+0x162>
		SDIO->ICR =  (SDIO_FLAG_DCRCFAIL);
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <FindSCR+0x200>)
 80035da:	2202      	movs	r2, #2
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
		errorstatus = SD_DATA_CRC_FAIL;
 80035de:	2302      	movs	r3, #2
 80035e0:	74fb      	strb	r3, [r7, #19]
		return (errorstatus);
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	e043      	b.n	800366e <FindSCR+0x1ea>
	} else if (SDIO_GetFlagStatus (SDIO_FLAG_RXOVERR) != RESET) {
 80035e6:	2020      	movs	r0, #32
 80035e8:	f7fd fe06 	bl	80011f8 <SDIO_GetFlagStatus>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <FindSCR+0x17c>
		SDIO->ICR =  (SDIO_FLAG_RXOVERR);
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <FindSCR+0x200>)
 80035f4:	2220      	movs	r2, #32
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
		errorstatus = SD_RX_OVERRUN;
 80035f8:	2306      	movs	r3, #6
 80035fa:	74fb      	strb	r3, [r7, #19]
		return (errorstatus);
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	e036      	b.n	800366e <FindSCR+0x1ea>
	} else if (SDIO_GetFlagStatus (SDIO_FLAG_STBITERR) != RESET) {
 8003600:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003604:	f7fd fdf8 	bl	80011f8 <SDIO_GetFlagStatus>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <FindSCR+0x19a>
		SDIO->ICR =  (SDIO_FLAG_STBITERR);
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <FindSCR+0x200>)
 8003610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
		errorstatus = SD_START_BIT_ERR;
 8003616:	2307      	movs	r3, #7
 8003618:	74fb      	strb	r3, [r7, #19]
		return (errorstatus);
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	e027      	b.n	800366e <FindSCR+0x1ea>
	}

	/*!< Clear all the static flags */
	SDIO->ICR =  (SDIO_STATIC_FLAGS );
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <FindSCR+0x200>)
 8003620:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

	*(pscr + 1) = ((tempscr[0] & SD_0TO7BITS )<< 24)|((tempscr[0] & SD_8TO15BITS )<< 8)|((tempscr[0] & SD_16TO23BITS )>> 8)|((tempscr[0] & SD_24TO31BITS )>> 24);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	3304      	adds	r3, #4
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	0611      	lsls	r1, r2, #24
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	0212      	lsls	r2, r2, #8
 8003632:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8003636:	4311      	orrs	r1, r2
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	0a12      	lsrs	r2, r2, #8
 800363c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8003640:	4311      	orrs	r1, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	0e12      	lsrs	r2, r2, #24
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]

	*(pscr) = ((tempscr[1] & SD_0TO7BITS )<< 24)|((tempscr[1] & SD_8TO15BITS )<< 8)|((tempscr[1] & SD_16TO23BITS )>> 8)|((tempscr[1] & SD_24TO31BITS )>> 24);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	061a      	lsls	r2, r3, #24
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	0e1b      	lsrs	r3, r3, #24
 8003666:	431a      	orrs	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	601a      	str	r2, [r3, #0]

	return (errorstatus);
 800366c:	7cfb      	ldrb	r3, [r7, #19]
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}
 8003676:	bf00      	nop
 8003678:	20000670 	.word	0x20000670
 800367c:	200001b0 	.word	0x200001b0
 8003680:	200006f8 	.word	0x200006f8
 8003684:	40012c00 	.word	0x40012c00

08003688 <SD_LowLevel_DeInit>:
/**
 * @brief  DeInitializes the SDIO interface.
 * @param  None
 * @retval None
 */
void SD_LowLevel_DeInit(void) {
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	/*!< Disable SDIO Clock */
	SDIO_ClockCmd(DISABLE);
 800368c:	2000      	movs	r0, #0
 800368e:	f7fd fcef 	bl	8001070 <SDIO_ClockCmd>

	/*!< Set Power State to OFF */
	SDIO_SetPowerState(SDIO_PowerState_OFF);
 8003692:	2000      	movs	r0, #0
 8003694:	f7fd fcfc 	bl	8001090 <SDIO_SetPowerState>

	/*!< DeInitializes the SDIO peripheral */
	SDIO_DeInit();
 8003698:	f7fd fcac 	bl	8000ff4 <SDIO_DeInit>

	/* Disable the SDIO APB2 Clock */
	RCC->APB2ENR &= ~RCC_APB2ENR_SDIOEN;
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <SD_LowLevel_DeInit+0x4c>)
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <SD_LowLevel_DeInit+0x4c>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a6:	6453      	str	r3, [r2, #68]	; 0x44

#if FATFS_SDIO_4BIT == 1
	TM_GPIO_DeInit(GPIOC, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12);
 80036a8:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80036ac:	480a      	ldr	r0, [pc, #40]	; (80036d8 <SD_LowLevel_DeInit+0x50>)
 80036ae:	f002 fe61 	bl	8006374 <TM_GPIO_DeInit>
	TM_GPIO_SetPullResistor(GPIOC, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_PuPd_DOWN);
 80036b2:	2202      	movs	r2, #2
 80036b4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80036b8:	4807      	ldr	r0, [pc, #28]	; (80036d8 <SD_LowLevel_DeInit+0x50>)
 80036ba:	f002 fe9b 	bl	80063f4 <TM_GPIO_SetPullResistor>
#else
	TM_GPIO_DeInit(GPIOC, GPIO_PIN_8 | GPIO_PIN_12);
	TM_GPIO_SetPullResistor(GPIOC, GPIO_PIN_8 | GPIO_PIN_12, TM_GPIO_PuPd_DOWN);
#endif
	
	TM_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80036be:	2104      	movs	r1, #4
 80036c0:	4806      	ldr	r0, [pc, #24]	; (80036dc <SD_LowLevel_DeInit+0x54>)
 80036c2:	f002 fe57 	bl	8006374 <TM_GPIO_DeInit>
	TM_GPIO_SetPullResistor(GPIOD, GPIO_PIN_2, TM_GPIO_PuPd_DOWN);
 80036c6:	2202      	movs	r2, #2
 80036c8:	2104      	movs	r1, #4
 80036ca:	4804      	ldr	r0, [pc, #16]	; (80036dc <SD_LowLevel_DeInit+0x54>)
 80036cc:	f002 fe92 	bl	80063f4 <TM_GPIO_SetPullResistor>
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00

080036e0 <SD_LowLevel_Init>:
 * @brief  Initializes the SD Card and put it into StandBy State (Ready for
 *         data transfer).
 * @param  None
 * @retval None
 */
void SD_LowLevel_Init (void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af02      	add	r7, sp, #8
#if FATFS_SDIO_4BIT == 1
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Fast, GPIO_AF_SDIO);
 80036e6:	230c      	movs	r3, #12
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2302      	movs	r3, #2
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2301      	movs	r3, #1
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80036f6:	480e      	ldr	r0, [pc, #56]	; (8003730 <SD_LowLevel_Init+0x50>)
 80036f8:	f002 fde9 	bl	80062ce <TM_GPIO_InitAlternate>
#else
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_8 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Fast, GPIO_AF_SDIO);
#endif

	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_2, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Fast, GPIO_AF_SDIO);
 80036fc:	230c      	movs	r3, #12
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	2302      	movs	r3, #2
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2301      	movs	r3, #1
 8003706:	2200      	movs	r2, #0
 8003708:	2104      	movs	r1, #4
 800370a:	480a      	ldr	r0, [pc, #40]	; (8003734 <SD_LowLevel_Init+0x54>)
 800370c:	f002 fddf 	bl	80062ce <TM_GPIO_InitAlternate>

	/* Enable the SDIO APB2 Clock */
	RCC->APB2ENR |= RCC_APB2ENR_SDIOEN;
 8003710:	4a09      	ldr	r2, [pc, #36]	; (8003738 <SD_LowLevel_Init+0x58>)
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <SD_LowLevel_Init+0x58>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800371a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Enable the DMA2 Clock */
	RCC->AHB1ENR |= SD_SDIO_DMA_CLK;
 800371c:	4a06      	ldr	r2, [pc, #24]	; (8003738 <SD_LowLevel_Init+0x58>)
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <SD_LowLevel_Init+0x58>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003726:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40020800 	.word	0x40020800
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40023800 	.word	0x40023800

0800373c <SD_LowLevel_DMA_TxConfig>:
 * @brief  Configures the DMA2 Channel4 for SDIO Tx request.
 * @param  BufferSRC: pointer to the source buffer
 * @param  BufferSize: buffer size
 * @retval None
 */
void SD_LowLevel_DMA_TxConfig (uint32_t *BufferSRC, uint32_t BufferSize) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b092      	sub	sp, #72	; 0x48
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	DMA_InitTypeDef SDDMA_InitStructure;

	DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8003746:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 800374a:	4822      	ldr	r0, [pc, #136]	; (80037d4 <SD_LowLevel_DMA_TxConfig+0x98>)
 800374c:	f7fc ff86 	bl	800065c <DMA_ClearFlag>

	/* DMA2 Stream3  or Stream6 disable */
	DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 8003750:	2100      	movs	r1, #0
 8003752:	4820      	ldr	r0, [pc, #128]	; (80037d4 <SD_LowLevel_DMA_TxConfig+0x98>)
 8003754:	f7fc fef6 	bl	8000544 <DMA_Cmd>

	/* DMA2 Stream3  or Stream6 Config */
	DMA_DeInit(SD_SDIO_DMA_STREAM );
 8003758:	481e      	ldr	r0, [pc, #120]	; (80037d4 <SD_LowLevel_DMA_TxConfig+0x98>)
 800375a:	f7fc fdc7 	bl	80002ec <DMA_DeInit>

	SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 800375e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003762:	60fb      	str	r3, [r7, #12]
	SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) SDIO_FIFO_ADDRESS;
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <SD_LowLevel_DMA_TxConfig+0x9c>)
 8003766:	613b      	str	r3, [r7, #16]
	SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) BufferSRC;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	617b      	str	r3, [r7, #20]
	SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	61bb      	str	r3, [r7, #24]
	SDDMA_InitStructure.DMA_BufferSize = 1;
 8003770:	2301      	movs	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
	SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003774:	2300      	movs	r3, #0
 8003776:	623b      	str	r3, [r7, #32]
	SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
	SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 800377e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
	SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; /* DMA_MemoryDataSize_Word; */
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8003788:	2300      	movs	r3, #0
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
	SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800378c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
	SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003792:	2304      	movs	r3, #4
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
	SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull; /* DMA_FIFOThreshold_Full */
 8003796:	2301      	movs	r3, #1
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
	SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single; /* DMA_MemoryBurst_INC4 */
 800379a:	2300      	movs	r3, #0
 800379c:	643b      	str	r3, [r7, #64]	; 0x40
	SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 800379e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init (SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	4619      	mov	r1, r3
 80037aa:	480a      	ldr	r0, [pc, #40]	; (80037d4 <SD_LowLevel_DMA_TxConfig+0x98>)
 80037ac:	f7fc fe72 	bl	8000494 <DMA_Init>
	DMA_ITConfig (SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 80037b0:	2201      	movs	r2, #1
 80037b2:	2110      	movs	r1, #16
 80037b4:	4807      	ldr	r0, [pc, #28]	; (80037d4 <SD_LowLevel_DMA_TxConfig+0x98>)
 80037b6:	f7fc ff7f 	bl	80006b8 <DMA_ITConfig>
	DMA_FlowControllerConfig (SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 80037ba:	2120      	movs	r1, #32
 80037bc:	4805      	ldr	r0, [pc, #20]	; (80037d4 <SD_LowLevel_DMA_TxConfig+0x98>)
 80037be:	f7fc fedd 	bl	800057c <DMA_FlowControllerConfig>

	/* DMA2 Stream3  or Stream6 enable */
	DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 80037c2:	2101      	movs	r1, #1
 80037c4:	4803      	ldr	r0, [pc, #12]	; (80037d4 <SD_LowLevel_DMA_TxConfig+0x98>)
 80037c6:	f7fc febd 	bl	8000544 <DMA_Cmd>
}
 80037ca:	bf00      	nop
 80037cc:	3748      	adds	r7, #72	; 0x48
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40026458 	.word	0x40026458
 80037d8:	40012c80 	.word	0x40012c80

080037dc <SD_LowLevel_DMA_RxConfig>:
 * @param  BufferDST: pointer to the destination buffer
 * @param  BufferSize: buffer size
 * @retval None
 */
void SD_LowLevel_DMA_RxConfig (uint32_t *BufferDST, uint32_t BufferSize)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b092      	sub	sp, #72	; 0x48
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
	DMA_InitTypeDef SDDMA_InitStructure;

	DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 80037e6:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 80037ea:	4823      	ldr	r0, [pc, #140]	; (8003878 <SD_LowLevel_DMA_RxConfig+0x9c>)
 80037ec:	f7fc ff36 	bl	800065c <DMA_ClearFlag>

	/* DMA2 Stream3  or Stream6 disable */
	DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 80037f0:	2100      	movs	r1, #0
 80037f2:	4821      	ldr	r0, [pc, #132]	; (8003878 <SD_LowLevel_DMA_RxConfig+0x9c>)
 80037f4:	f7fc fea6 	bl	8000544 <DMA_Cmd>

	/* DMA2 Stream3 or Stream6 Config */
	DMA_DeInit(SD_SDIO_DMA_STREAM);
 80037f8:	481f      	ldr	r0, [pc, #124]	; (8003878 <SD_LowLevel_DMA_RxConfig+0x9c>)
 80037fa:	f7fc fd77 	bl	80002ec <DMA_DeInit>

	SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 80037fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003802:	60fb      	str	r3, [r7, #12]
	SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) SDIO_FIFO_ADDRESS;
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <SD_LowLevel_DMA_RxConfig+0xa0>)
 8003806:	613b      	str	r3, [r7, #16]
	SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) BufferDST;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	617b      	str	r3, [r7, #20]
	SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
	SDDMA_InitStructure.DMA_BufferSize = 1;
 8003810:	2301      	movs	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
	SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003814:	2300      	movs	r3, #0
 8003816:	623b      	str	r3, [r7, #32]
	SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
	SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 800381e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
	SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8003824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003828:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800382a:	2300      	movs	r3, #0
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
	SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800382e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
	SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003834:	2304      	movs	r3, #4
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
	SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8003838:	2303      	movs	r3, #3
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
	SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 800383c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003840:	643b      	str	r3, [r7, #64]	; 0x40
	SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8003842:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003846:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init (SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	4619      	mov	r1, r3
 800384e:	480a      	ldr	r0, [pc, #40]	; (8003878 <SD_LowLevel_DMA_RxConfig+0x9c>)
 8003850:	f7fc fe20 	bl	8000494 <DMA_Init>
	DMA_ITConfig (SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8003854:	2201      	movs	r2, #1
 8003856:	2110      	movs	r1, #16
 8003858:	4807      	ldr	r0, [pc, #28]	; (8003878 <SD_LowLevel_DMA_RxConfig+0x9c>)
 800385a:	f7fc ff2d 	bl	80006b8 <DMA_ITConfig>
	DMA_FlowControllerConfig (SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 800385e:	2120      	movs	r1, #32
 8003860:	4805      	ldr	r0, [pc, #20]	; (8003878 <SD_LowLevel_DMA_RxConfig+0x9c>)
 8003862:	f7fc fe8b 	bl	800057c <DMA_FlowControllerConfig>

	/* DMA2 Stream3 or Stream6 enable */
	DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8003866:	2101      	movs	r1, #1
 8003868:	4803      	ldr	r0, [pc, #12]	; (8003878 <SD_LowLevel_DMA_RxConfig+0x9c>)
 800386a:	f7fc fe6b 	bl	8000544 <DMA_Cmd>
}
 800386e:	bf00      	nop
 8003870:	3748      	adds	r7, #72	; 0x48
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40026458 	.word	0x40026458
 800387c:	40012c80 	.word	0x40012c80

08003880 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003894:	e007      	b.n	80038a6 <mem_cpy+0x26>
		*d++ = *s++;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	617a      	str	r2, [r7, #20]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	1c51      	adds	r1, r2, #1
 80038a0:	6139      	str	r1, [r7, #16]
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1e5a      	subs	r2, r3, #1
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f2      	bne.n	8003896 <mem_cpy+0x16>
}
 80038b0:	bf00      	nop
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80038cc:	e005      	b.n	80038da <mem_set+0x1e>
		*d++ = (BYTE)val;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	617a      	str	r2, [r7, #20]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1e5a      	subs	r2, r3, #1
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f4      	bne.n	80038ce <mem_set+0x12>
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003908:	bf00      	nop
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <mem_cmp+0x40>
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	61fa      	str	r2, [r7, #28]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	4619      	mov	r1, r3
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	61ba      	str	r2, [r7, #24]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	1acb      	subs	r3, r1, r3
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ec      	beq.n	800390a <mem_cmp+0x1a>
	return r;
 8003930:	697b      	ldr	r3, [r7, #20]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003948:	e002      	b.n	8003950 <chk_chr+0x12>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3301      	adds	r3, #1
 800394e:	607b      	str	r3, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <chk_chr+0x26>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d1f2      	bne.n	800394a <chk_chr+0xc>
	return *str;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	781b      	ldrb	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	791b      	ldrb	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d034      	beq.n	80039f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7858      	ldrb	r0, [r3, #1]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003998:	2301      	movs	r3, #1
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	f7fd feec 	bl	8001778 <disk_write>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e022      	b.n	80039f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d217      	bcs.n	80039f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	78db      	ldrb	r3, [r3, #3]
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e010      	b.n	80039ec <sync_window+0x78>
					wsect += fs->fsize;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4413      	add	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7858      	ldrb	r0, [r3, #1]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80039de:	2301      	movs	r3, #1
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	f7fd fec9 	bl	8001778 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d8eb      	bhi.n	80039ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d01b      	beq.n	8003a4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ffad 	bl	8003974 <sync_window>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d113      	bne.n	8003a4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7858      	ldrb	r0, [r3, #1]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003a2e:	2301      	movs	r3, #1
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	f7fd fe73 	bl	800171c <disk_read>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff88 	bl	8003974 <sync_window>
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 8090 	bne.w	8003b90 <sync_fs+0x13a>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d17f      	bne.n	8003b78 <sync_fs+0x122>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	795b      	ldrb	r3, [r3, #5]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d17b      	bne.n	8003b78 <sync_fs+0x122>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3334      	adds	r3, #52	; 0x34
 8003a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ff16 	bl	80038bc <mem_set>
			ST_WORD(fs->win + BS_55AA, 0xAA55);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2255      	movs	r2, #85	; 0x55
 8003a94:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	22aa      	movs	r2, #170	; 0xaa
 8003a9c:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2252      	movs	r2, #82	; 0x52
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2252      	movs	r2, #82	; 0x52
 8003aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2261      	movs	r2, #97	; 0x61
 8003ab4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2241      	movs	r2, #65	; 0x41
 8003abc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2272      	movs	r2, #114	; 0x72
 8003ac4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2272      	movs	r2, #114	; 0x72
 8003acc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2241      	movs	r2, #65	; 0x41
 8003ad4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2261      	movs	r2, #97	; 0x61
 8003adc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	0e1b      	lsrs	r3, r3, #24
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	0e1b      	lsrs	r3, r3, #24
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7858      	ldrb	r0, [r3, #1]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f7fd fe03 	bl	8001778 <disk_write>
			fs->fsi_flag = 0;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd fe27 	bl	80017d4 <disk_ioctl>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <sync_fs+0x13a>
			res = FR_DISK_ERR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	3b02      	subs	r3, #2
 8003ba8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	1e9a      	subs	r2, r3, #2
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d801      	bhi.n	8003bba <clust2sect+0x20>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e008      	b.n	8003bcc <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	789b      	ldrb	r3, [r3, #2]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	fb03 f202 	mul.w	r2, r3, r2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	4413      	add	r3, r2
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d904      	bls.n	8003bf2 <get_fat+0x1a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d802      	bhi.n	8003bf8 <get_fat+0x20>
		val = 1;	/* Internal error */
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e0a3      	b.n	8003d40 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d046      	beq.n	8003c94 <get_fat+0xbc>
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d066      	beq.n	8003cd8 <get_fat+0x100>
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	f040 808e 	bne.w	8003d2c <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	0a5b      	lsrs	r3, r3, #9
 8003c26:	4413      	add	r3, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fee6 	bl	80039fc <move_window>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d17d      	bne.n	8003d32 <get_fat+0x15a>
			wc = fs->win[bc++ % SS(fs)];
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	613a      	str	r2, [r7, #16]
 8003c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	0a5b      	lsrs	r3, r3, #9
 8003c52:	4413      	add	r3, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fed0 	bl	80039fc <move_window>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d169      	bne.n	8003d36 <get_fat+0x15e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <get_fat+0xb2>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	e002      	b.n	8003c90 <get_fat+0xb8>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c90:	617b      	str	r3, [r7, #20]
			break;
 8003c92:	e055      	b.n	8003d40 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff feab 	bl	80039fc <move_window>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d146      	bne.n	8003d3a <get_fat+0x162>
			p = &fs->win[clst * 2 % SS(fs)];
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003cb4:	3330      	adds	r3, #48	; 0x30
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	3304      	adds	r3, #4
 8003cbc:	60bb      	str	r3, [r7, #8]
			val = LD_WORD(p);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	b21a      	sxth	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b21b      	sxth	r3, r3
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	617b      	str	r3, [r7, #20]
			break;
 8003cd6:	e033      	b.n	8003d40 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	09db      	lsrs	r3, r3, #7
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fe89 	bl	80039fc <move_window>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d126      	bne.n	8003d3e <get_fat+0x166>
			p = &fs->win[clst * 4 % SS(fs)];
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003cf8:	3330      	adds	r3, #48	; 0x30
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3304      	adds	r3, #4
 8003d00:	60bb      	str	r3, [r7, #8]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3303      	adds	r3, #3
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	061a      	lsls	r2, r3, #24
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	4313      	orrs	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	3201      	adds	r2, #1
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	0212      	lsls	r2, r2, #8
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d28:	617b      	str	r3, [r7, #20]
			break;
 8003d2a:	e009      	b.n	8003d40 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e006      	b.n	8003d40 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d3e:	bf00      	nop
		}
	}

	return val;
 8003d40:	697b      	ldr	r3, [r7, #20]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b088      	sub	sp, #32
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d904      	bls.n	8003d66 <put_fat+0x1c>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d802      	bhi.n	8003d6c <put_fat+0x22>
		res = FR_INT_ERR;
 8003d66:	2302      	movs	r3, #2
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e0f2      	b.n	8003f52 <put_fat+0x208>

	} else {
		switch (fs->fs_type) {
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d074      	beq.n	8003e5e <put_fat+0x114>
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	f000 8099 	beq.w	8003eac <put_fat+0x162>
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	f040 80df 	bne.w	8003f3e <put_fat+0x1f4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	0a5b      	lsrs	r3, r3, #9
 8003d96:	4413      	add	r3, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fe2e 	bl	80039fc <move_window>
 8003da0:	4603      	mov	r3, r0
 8003da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003da4:	7ffb      	ldrb	r3, [r7, #31]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 80cc 	bne.w	8003f44 <put_fat+0x1fa>
			p = &fs->win[bc++ % SS(fs)];
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	61ba      	str	r2, [r7, #24]
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	3330      	adds	r3, #48	; 0x30
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <put_fat+0x9c>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	b25a      	sxtb	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e001      	b.n	8003dea <put_fat+0xa0>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	0a5b      	lsrs	r3, r3, #9
 8003dfc:	4413      	add	r3, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fdfb 	bl	80039fc <move_window>
 8003e06:	4603      	mov	r3, r0
 8003e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 809b 	bne.w	8003f48 <put_fat+0x1fe>
			p = &fs->win[bc % SS(fs)];
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e18:	3330      	adds	r3, #48	; 0x30
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3304      	adds	r3, #4
 8003e20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <put_fat+0xea>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e00e      	b.n	8003e52 <put_fat+0x108>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f023 030f 	bic.w	r3, r3, #15
 8003e3e:	b25a      	sxtb	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	711a      	strb	r2, [r3, #4]
			break;
 8003e5c:	e079      	b.n	8003f52 <put_fat+0x208>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	4413      	add	r3, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff fdc6 	bl	80039fc <move_window>
 8003e70:	4603      	mov	r3, r0
 8003e72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d168      	bne.n	8003f4c <put_fat+0x202>
			p = &fs->win[clst * 2 % SS(fs)];
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003e82:	3330      	adds	r3, #48	; 0x30
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3301      	adds	r3, #1
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	b292      	uxth	r2, r2
 8003e9c:	0a12      	lsrs	r2, r2, #8
 8003e9e:	b292      	uxth	r2, r2
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	711a      	strb	r2, [r3, #4]
			break;
 8003eaa:	e052      	b.n	8003f52 <put_fat+0x208>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	09db      	lsrs	r3, r3, #7
 8003eb4:	4413      	add	r3, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fd9f 	bl	80039fc <move_window>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ec2:	7ffb      	ldrb	r3, [r7, #31]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d143      	bne.n	8003f50 <put_fat+0x206>
			p = &fs->win[clst * 4 % SS(fs)];
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003ed0:	3330      	adds	r3, #48	; 0x30
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	3303      	adds	r3, #3
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	061a      	lsls	r2, r3, #24
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	4313      	orrs	r3, r2
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	3201      	adds	r2, #1
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	0212      	lsls	r2, r2, #8
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	3301      	adds	r3, #1
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	b292      	uxth	r2, r2
 8003f16:	0a12      	lsrs	r2, r2, #8
 8003f18:	b292      	uxth	r2, r2
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3302      	adds	r3, #2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	0c12      	lsrs	r2, r2, #16
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	3303      	adds	r3, #3
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	0e12      	lsrs	r2, r2, #24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	711a      	strb	r2, [r3, #4]
			break;
 8003f3c:	e009      	b.n	8003f52 <put_fat+0x208>

		default :
			res = FR_INT_ERR;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e006      	b.n	8003f52 <put_fat+0x208>
			if (res != FR_OK) break;
 8003f44:	bf00      	nop
 8003f46:	e004      	b.n	8003f52 <put_fat+0x208>
			if (res != FR_OK) break;
 8003f48:	bf00      	nop
 8003f4a:	e002      	b.n	8003f52 <put_fat+0x208>
			if (res != FR_OK) break;
 8003f4c:	bf00      	nop
 8003f4e:	e000      	b.n	8003f52 <put_fat+0x208>
			if (res != FR_OK) break;
 8003f50:	bf00      	nop
		}
	}

	return res;
 8003f52:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d904      	bls.n	8003f76 <remove_chain+0x1a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d802      	bhi.n	8003f7c <remove_chain+0x20>
		res = FR_INT_ERR;
 8003f76:	2302      	movs	r3, #2
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e03d      	b.n	8003ff8 <remove_chain+0x9c>

	} else {
		res = FR_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003f80:	e031      	b.n	8003fe6 <remove_chain+0x8a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fe27 	bl	8003bd8 <get_fat>
 8003f8a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02f      	beq.n	8003ff2 <remove_chain+0x96>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d102      	bne.n	8003f9e <remove_chain+0x42>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e02c      	b.n	8003ff8 <remove_chain+0x9c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa4:	d102      	bne.n	8003fac <remove_chain+0x50>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	e025      	b.n	8003ff8 <remove_chain+0x9c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003fac:	2200      	movs	r2, #0
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff feca 	bl	8003d4a <put_fat>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11a      	bne.n	8003ff6 <remove_chain+0x9a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fc8:	d00b      	beq.n	8003fe2 <remove_chain+0x86>
				fs->free_clust++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]
				fs->fsi_flag |= 1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	795b      	ldrb	r3, [r3, #5]
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d8c8      	bhi.n	8003f82 <remove_chain+0x26>
 8003ff0:	e002      	b.n	8003ff8 <remove_chain+0x9c>
			if (nxt == 0) break;				/* Empty cluster? */
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <remove_chain+0x9c>
			if (res != FR_OK) break;
 8003ff6:	bf00      	nop
		}
	}

	return res;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <create_chain+0x26>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	429a      	cmp	r2, r3
 8004026:	d81b      	bhi.n	8004060 <create_chain+0x5e>
 8004028:	2301      	movs	r3, #1
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	e018      	b.n	8004060 <create_chain+0x5e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fdd1 	bl	8003bd8 <get_fat>
 8004036:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d801      	bhi.n	8004042 <create_chain+0x40>
 800403e:	2301      	movs	r3, #1
 8004040:	e06e      	b.n	8004120 <create_chain+0x11e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004048:	d101      	bne.n	800404e <create_chain+0x4c>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	e068      	b.n	8004120 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	d901      	bls.n	800405c <create_chain+0x5a>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	e061      	b.n	8004120 <create_chain+0x11e>
		scl = clst;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	d807      	bhi.n	8004084 <create_chain+0x82>
			ncl = 2;
 8004074:	2302      	movs	r3, #2
 8004076:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	429a      	cmp	r2, r3
 800407e:	d901      	bls.n	8004084 <create_chain+0x82>
 8004080:	2300      	movs	r3, #0
 8004082:	e04d      	b.n	8004120 <create_chain+0x11e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004084:	6979      	ldr	r1, [r7, #20]
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fda6 	bl	8003bd8 <get_fat>
 800408c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <create_chain+0xb0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800409a:	d002      	beq.n	80040a2 <create_chain+0xa0>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <create_chain+0xa4>
			return cs;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	e03c      	b.n	8004120 <create_chain+0x11e>
		if (ncl == scl) return 0;		/* No free cluster */
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d1da      	bne.n	8004064 <create_chain+0x62>
 80040ae:	2300      	movs	r3, #0
 80040b0:	e036      	b.n	8004120 <create_chain+0x11e>
		if (cs == 0) break;				/* Found a free cluster */
 80040b2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80040b4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe45 	bl	8003d4a <put_fat>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <create_chain+0xdc>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <create_chain+0xdc>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fe38 	bl	8003d4a <put_fat>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d114      	bne.n	800410e <create_chain+0x10c>
		fs->last_clust = ncl;			/* Update FSINFO */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f2:	d014      	beq.n	800411e <create_chain+0x11c>
			fs->free_clust--;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	1e5a      	subs	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	795b      	ldrb	r3, [r3, #5]
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	715a      	strb	r2, [r3, #5]
 800410c:	e007      	b.n	800411e <create_chain+0x11c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <create_chain+0x118>
 8004114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004118:	e000      	b.n	800411c <create_chain+0x11a>
 800411a:	2301      	movs	r3, #1
 800411c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800411e:	697b      	ldr	r3, [r7, #20]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d005      	beq.n	8004152 <dir_sdi+0x2a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	429a      	cmp	r2, r3
 8004150:	d801      	bhi.n	8004156 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8004152:	2302      	movs	r3, #2
 8004154:	e063      	b.n	800421e <dir_sdi+0xf6>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d108      	bne.n	800416e <dir_sdi+0x46>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d103      	bne.n	800416e <dir_sdi+0x46>
		clst = dp->fs->dirbase;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <dir_sdi+0x68>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	891b      	ldrh	r3, [r3, #8]
 800417a:	461a      	mov	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d801      	bhi.n	8004186 <dir_sdi+0x5e>
			return FR_INT_ERR;
 8004182:	2302      	movs	r3, #2
 8004184:	e04b      	b.n	800421e <dir_sdi+0xf6>
		sect = dp->fs->dirbase;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	e02c      	b.n	80041ea <dir_sdi+0xc2>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	789b      	ldrb	r3, [r3, #2]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800419a:	e01b      	b.n	80041d4 <dir_sdi+0xac>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fd18 	bl	8003bd8 <get_fat>
 80041a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b0:	d101      	bne.n	80041b6 <dir_sdi+0x8e>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e033      	b.n	800421e <dir_sdi+0xf6>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d905      	bls.n	80041c8 <dir_sdi+0xa0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d801      	bhi.n	80041cc <dir_sdi+0xa4>
				return FR_INT_ERR;
 80041c8:	2302      	movs	r3, #2
 80041ca:	e028      	b.n	800421e <dir_sdi+0xf6>
			idx -= ic;
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d2df      	bcs.n	800419c <dir_sdi+0x74>
		}
		sect = clust2sect(dp->fs, clst);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6979      	ldr	r1, [r7, #20]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fcd9 	bl	8003b9a <clust2sect>
 80041e8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <dir_sdi+0xd2>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e011      	b.n	800421e <dir_sdi+0xf6>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	091a      	lsrs	r2, r3, #4
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	015b      	lsls	r3, r3, #5
 8004216:	441a      	add	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004226:	b590      	push	{r4, r7, lr}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	88db      	ldrh	r3, [r3, #6]
 8004234:	3301      	adds	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <dir_next+0x22>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <dir_next+0x26>
		return FR_NO_FILE;
 8004248:	2304      	movs	r3, #4
 800424a:	e0bb      	b.n	80043c4 <dir_next+0x19e>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 80a6 	bne.w	80043a4 <dir_next+0x17e>
		dp->sect++;					/* Next sector */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <dir_next+0x58>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	891b      	ldrh	r3, [r3, #8]
 8004270:	461a      	mov	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	429a      	cmp	r2, r3
 8004276:	f200 8095 	bhi.w	80043a4 <dir_next+0x17e>
				return FR_NO_FILE;
 800427a:	2304      	movs	r3, #4
 800427c:	e0a2      	b.n	80043c4 <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	7892      	ldrb	r2, [r2, #2]
 8004288:	3a01      	subs	r2, #1
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	f040 8089 	bne.w	80043a4 <dir_next+0x17e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7ff fc9b 	bl	8003bd8 <get_fat>
 80042a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d801      	bhi.n	80042ae <dir_next+0x88>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e08a      	b.n	80043c4 <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b4:	d101      	bne.n	80042ba <dir_next+0x94>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e084      	b.n	80043c4 <dir_next+0x19e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d862      	bhi.n	800438c <dir_next+0x166>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <dir_next+0xaa>
 80042cc:	2304      	movs	r3, #4
 80042ce:	e079      	b.n	80043c4 <dir_next+0x19e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7ff fe91 	bl	8004002 <create_chain>
 80042e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <dir_next+0xc6>
 80042e8:	2307      	movs	r3, #7
 80042ea:	e06b      	b.n	80043c4 <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <dir_next+0xd0>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e066      	b.n	80043c4 <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042fc:	d101      	bne.n	8004302 <dir_next+0xdc>
 80042fe:	2301      	movs	r3, #1
 8004300:	e060      	b.n	80043c4 <dir_next+0x19e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fb34 	bl	8003974 <sync_window>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <dir_next+0xf0>
 8004312:	2301      	movs	r3, #1
 8004314:	e056      	b.n	80043c4 <dir_next+0x19e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3334      	adds	r3, #52	; 0x34
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff faca 	bl	80038bc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681c      	ldr	r4, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6979      	ldr	r1, [r7, #20]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fc31 	bl	8003b9a <clust2sect>
 8004338:	4603      	mov	r3, r0
 800433a:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	e015      	b.n	800436e <dir_next+0x148>
						dp->fs->wflag = 1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2201      	movs	r2, #1
 8004348:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fb10 	bl	8003974 <sync_window>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <dir_next+0x138>
 800435a:	2301      	movs	r3, #1
 800435c:	e032      	b.n	80043c4 <dir_next+0x19e>
						dp->fs->winsect++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004364:	3201      	adds	r2, #1
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3301      	adds	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	789b      	ldrb	r3, [r3, #2]
 8004374:	461a      	mov	r2, r3
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d8e2      	bhi.n	8004342 <dir_next+0x11c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	1a8a      	subs	r2, r1, r2
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fbfe 	bl	8003b9a <clust2sect>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	015b      	lsls	r3, r3, #5
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd90      	pop	{r4, r7, pc}

080043cc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80043d6:	2100      	movs	r1, #0
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fea5 	bl	8004128 <dir_sdi>
 80043de:	4603      	mov	r3, r0
 80043e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d12d      	bne.n	8004444 <dir_alloc+0x78>
		n = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7ff fb00 	bl	80039fc <move_window>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d11d      	bne.n	8004442 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2be5      	cmp	r3, #229	; 0xe5
 800440e:	d004      	beq.n	800441a <dir_alloc+0x4e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d102      	bne.n	800442e <dir_alloc+0x62>
 8004428:	e00c      	b.n	8004444 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800442e:	2101      	movs	r1, #1
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fef8 	bl	8004226 <dir_next>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0d5      	beq.n	80043ec <dir_alloc+0x20>
 8004440:	e000      	b.n	8004444 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8004442:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b04      	cmp	r3, #4
 8004448:	d101      	bne.n	800444e <dir_alloc+0x82>
 800444a:	2307      	movs	r3, #7
 800444c:	73fb      	strb	r3, [r7, #15]
	return res;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	331b      	adds	r3, #27
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	b21a      	sxth	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	331a      	adds	r3, #26
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b21b      	sxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b21b      	sxth	r3, r3
 8004478:	b29b      	uxth	r3, r3
 800447a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d10f      	bne.n	80044a4 <ld_clust+0x4c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	3315      	adds	r3, #21
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	b21a      	sxth	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b21b      	sxth	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b21b      	sxth	r3, r3
 800449a:	b29b      	uxth	r3, r3
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

	return cl;
 80044a4:	68fb      	ldr	r3, [r7, #12]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	331a      	adds	r3, #26
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	331b      	adds	r3, #27
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	b292      	uxth	r2, r2
 80044ce:	0a12      	lsrs	r2, r2, #8
 80044d0:	b292      	uxth	r2, r2
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3314      	adds	r3, #20
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	0c12      	lsrs	r2, r2, #16
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3315      	adds	r3, #21
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	0c12      	lsrs	r2, r2, #16
 80044ea:	b292      	uxth	r2, r2
 80044ec:	0a12      	lsrs	r2, r2, #8
 80044ee:	b292      	uxth	r2, r2
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004512:	1e5a      	subs	r2, r3, #1
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	2301      	movs	r3, #1
 8004526:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004528:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <cmp_lfn+0xd8>)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	4413      	add	r3, r2
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	b21a      	sxth	r2, r3
 800453c:	4926      	ldr	r1, [pc, #152]	; (80045d8 <cmp_lfn+0xd8>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	440b      	add	r3, r1
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	4619      	mov	r1, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	440b      	add	r3, r1
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b21b      	sxth	r3, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	b21b      	sxth	r3, r3
 8004552:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004554:	89fb      	ldrh	r3, [r7, #14]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d019      	beq.n	800458e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800455a:	89bb      	ldrh	r3, [r7, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	f001 fe65 	bl	800622c <ff_wtoupper>
 8004562:	4603      	mov	r3, r0
 8004564:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2bfe      	cmp	r3, #254	; 0xfe
 800456a:	d80e      	bhi.n	800458a <cmp_lfn+0x8a>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	617a      	str	r2, [r7, #20]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fe56 	bl	800622c <ff_wtoupper>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	89fb      	ldrh	r3, [r7, #14]
 8004586:	4293      	cmp	r3, r2
 8004588:	d008      	beq.n	800459c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800458a:	2300      	movs	r3, #0
 800458c:	e01f      	b.n	80045ce <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800458e:	89bb      	ldrh	r3, [r7, #12]
 8004590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004594:	4293      	cmp	r3, r2
 8004596:	d001      	beq.n	800459c <cmp_lfn+0x9c>
 8004598:	2300      	movs	r3, #0
 800459a:	e018      	b.n	80045ce <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	3301      	adds	r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d9bf      	bls.n	8004528 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <cmp_lfn+0xcc>
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <cmp_lfn+0xcc>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <cmp_lfn+0xcc>
		return 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80045cc:	2301      	movs	r3, #1
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	08007650 	.word	0x08007650

080045dc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4611      	mov	r1, r2
 80045e8:	461a      	mov	r2, r3
 80045ea:	460b      	mov	r3, r1
 80045ec:	71fb      	strb	r3, [r7, #7]
 80045ee:	4613      	mov	r3, r2
 80045f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	330d      	adds	r3, #13
 80045f6:	79ba      	ldrb	r2, [r7, #6]
 80045f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	330b      	adds	r3, #11
 80045fe:	220f      	movs	r2, #15
 8004600:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	330c      	adds	r3, #12
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	331a      	adds	r3, #26
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	331b      	adds	r3, #27
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	4613      	mov	r3, r2
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	82fb      	strh	r3, [r7, #22]
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <fit_lfn+0x70>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	61fa      	str	r2, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <fit_lfn+0xe8>)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4413      	add	r3, r2
 800465a:	8afa      	ldrh	r2, [r7, #22]
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <fit_lfn+0xe8>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4413      	add	r3, r2
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	8afa      	ldrh	r2, [r7, #22]
 8004670:	0a12      	lsrs	r2, r2, #8
 8004672:	b292      	uxth	r2, r2
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004678:	8afb      	ldrh	r3, [r7, #22]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <fit_lfn+0xa8>
 800467e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004682:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	3301      	adds	r3, #1
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b0c      	cmp	r3, #12
 800468e:	d9d0      	bls.n	8004632 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004690:	8afb      	ldrh	r3, [r7, #22]
 8004692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004696:	4293      	cmp	r3, r2
 8004698:	d006      	beq.n	80046a8 <fit_lfn+0xcc>
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <fit_lfn+0xd4>
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	79fa      	ldrb	r2, [r7, #7]
 80046b4:	701a      	strb	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	3724      	adds	r7, #36	; 0x24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	08007650 	.word	0x08007650

080046c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	; 0x30
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80046d6:	220b      	movs	r2, #11
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff f8d0 	bl	8003880 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d92b      	bls.n	800473e <gen_numname+0x76>
		sr = seq;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80046ea:	e022      	b.n	8004732 <gen_numname+0x6a>
			wc = *lfn++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fa:	e017      	b.n	800472c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005a      	lsls	r2, r3, #1
 8004700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	4413      	add	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800470a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <gen_numname+0x5e>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004720:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004724:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	3301      	adds	r3, #1
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b0f      	cmp	r3, #15
 8004730:	d9e4      	bls.n	80046fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1d8      	bne.n	80046ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800473e:	2307      	movs	r3, #7
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3330      	adds	r3, #48	; 0x30
 800474e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004756:	2b39      	cmp	r3, #57	; 0x39
 8004758:	d904      	bls.n	8004764 <gen_numname+0x9c>
 800475a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800475e:	3307      	adds	r3, #7
 8004760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	62ba      	str	r2, [r7, #40]	; 0x28
 800476a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800476e:	4413      	add	r3, r2
 8004770:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004774:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1de      	bne.n	8004742 <gen_numname+0x7a>
	ns[i] = '~';
 8004784:	f107 0214 	add.w	r2, r7, #20
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	4413      	add	r3, r2
 800478c:	227e      	movs	r2, #126	; 0x7e
 800478e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004790:	2300      	movs	r3, #0
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	e002      	b.n	800479c <gen_numname+0xd4>
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	3301      	adds	r3, #1
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d205      	bcs.n	80047b0 <gen_numname+0xe8>
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	4413      	add	r3, r2
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d1f2      	bne.n	8004796 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	627a      	str	r2, [r7, #36]	; 0x24
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	441a      	add	r2, r3
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	2b07      	cmp	r3, #7
 80047be:	d808      	bhi.n	80047d2 <gen_numname+0x10a>
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80047c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80047ca:	440b      	add	r3, r1
 80047cc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80047d0:	e000      	b.n	80047d4 <gen_numname+0x10c>
 80047d2:	2320      	movs	r3, #32
 80047d4:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2b07      	cmp	r3, #7
 80047da:	d9e9      	bls.n	80047b0 <gen_numname+0xe8>
}
 80047dc:	bf00      	nop
 80047de:	3730      	adds	r7, #48	; 0x30
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80047f0:	230b      	movs	r3, #11
 80047f2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	0852      	lsrs	r2, r2, #1
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1c59      	adds	r1, r3, #1
 8004804:	6079      	str	r1, [r7, #4]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4413      	add	r3, r2
 800480a:	73fb      	strb	r3, [r7, #15]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	3b01      	subs	r3, #1
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ed      	bne.n	80047f4 <sum_sfn+0x10>
	return sum;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800482e:	2100      	movs	r1, #0
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fc79 	bl	8004128 <dir_sdi>
 8004836:	4603      	mov	r3, r0
 8004838:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <dir_find+0x1e>
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	e0a0      	b.n	8004986 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004844:	23ff      	movs	r3, #255	; 0xff
 8004846:	753b      	strb	r3, [r7, #20]
 8004848:	7d3b      	ldrb	r3, [r7, #20]
 800484a:	757b      	strb	r3, [r7, #21]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004852:	841a      	strh	r2, [r3, #32]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f7ff f8cc 	bl	80039fc <move_window>
 8004864:	4603      	mov	r3, r0
 8004866:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f040 8085 	bne.w	800497a <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800487c:	7dbb      	ldrb	r3, [r7, #22]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <dir_find+0x62>
 8004882:	2304      	movs	r3, #4
 8004884:	75fb      	strb	r3, [r7, #23]
 8004886:	e07d      	b.n	8004984 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	330b      	adds	r3, #11
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004892:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004894:	7dbb      	ldrb	r3, [r7, #22]
 8004896:	2be5      	cmp	r3, #229	; 0xe5
 8004898:	d007      	beq.n	80048aa <dir_find+0x84>
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <dir_find+0x92>
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b0f      	cmp	r3, #15
 80048a8:	d006      	beq.n	80048b8 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80048aa:	23ff      	movs	r3, #255	; 0xff
 80048ac:	757b      	strb	r3, [r7, #21]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b4:	841a      	strh	r2, [r3, #32]
 80048b6:	e055      	b.n	8004964 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	d12f      	bne.n	800491e <dir_find+0xf8>
				if (dp->lfn) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04e      	beq.n	8004964 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80048c6:	7dbb      	ldrb	r3, [r7, #22]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00c      	beq.n	80048ea <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	7b5b      	ldrb	r3, [r3, #13]
 80048d4:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80048d6:	7dbb      	ldrb	r3, [r7, #22]
 80048d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048dc:	75bb      	strb	r3, [r7, #22]
 80048de:	7dbb      	ldrb	r3, [r7, #22]
 80048e0:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	88da      	ldrh	r2, [r3, #6]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80048ea:	7dba      	ldrb	r2, [r7, #22]
 80048ec:	7d7b      	ldrb	r3, [r7, #21]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d112      	bne.n	8004918 <dir_find+0xf2>
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	330d      	adds	r3, #13
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	7d3a      	ldrb	r2, [r7, #20]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d10c      	bne.n	8004918 <dir_find+0xf2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	6939      	ldr	r1, [r7, #16]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fdfb 	bl	8004500 <cmp_lfn>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <dir_find+0xf2>
 8004910:	7d7b      	ldrb	r3, [r7, #21]
 8004912:	3b01      	subs	r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e000      	b.n	800491a <dir_find+0xf4>
 8004918:	23ff      	movs	r3, #255	; 0xff
 800491a:	757b      	strb	r3, [r7, #21]
 800491c:	e022      	b.n	8004964 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800491e:	7d7b      	ldrb	r3, [r7, #21]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <dir_find+0x10e>
 8004924:	6938      	ldr	r0, [r7, #16]
 8004926:	f7ff ff5d 	bl	80047e4 <sum_sfn>
 800492a:	4603      	mov	r3, r0
 800492c:	461a      	mov	r2, r3
 800492e:	7d3b      	ldrb	r3, [r7, #20]
 8004930:	4293      	cmp	r3, r2
 8004932:	d024      	beq.n	800497e <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	330b      	adds	r3, #11
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <dir_find+0x132>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	220b      	movs	r2, #11
 800494a:	4619      	mov	r1, r3
 800494c:	6938      	ldr	r0, [r7, #16]
 800494e:	f7fe ffcf 	bl	80038f0 <mem_cmp>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d014      	beq.n	8004982 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004958:	23ff      	movs	r3, #255	; 0xff
 800495a:	757b      	strb	r3, [r7, #21]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004962:	841a      	strh	r2, [r3, #32]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004964:	2100      	movs	r1, #0
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fc5d 	bl	8004226 <dir_next>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f43f af6e 	beq.w	8004854 <dir_find+0x2e>
 8004978:	e004      	b.n	8004984 <dir_find+0x15e>
		if (res != FR_OK) break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004982:	bf00      	nop

	return res;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	; 0x30
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	220c      	movs	r2, #12
 80049aa:	6a39      	ldr	r1, [r7, #32]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe ff67 	bl	8003880 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <dir_register+0x30>
		return FR_INVALID_NAME;
 80049bc:	2306      	movs	r3, #6
 80049be:	e0e0      	b.n	8004b82 <dir_register+0x1f2>

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d035      	beq.n	8004a36 <dir_register+0xa6>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	330b      	adds	r3, #11
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 80049d8:	2301      	movs	r3, #1
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
 80049dc:	e013      	b.n	8004a06 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80049de:	f107 010c 	add.w	r1, r7, #12
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	6a38      	ldr	r0, [r7, #32]
 80049e8:	f7ff fe6e 	bl	80046c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ff1a 	bl	8004826 <dir_find>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80049f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	3301      	adds	r3, #1
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2b63      	cmp	r3, #99	; 0x63
 8004a0a:	d9e8      	bls.n	80049de <dir_register+0x4e>
 8004a0c:	e000      	b.n	8004a10 <dir_register+0x80>
			if (res != FR_OK) break;
 8004a0e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d101      	bne.n	8004a1a <dir_register+0x8a>
 8004a16:	2307      	movs	r3, #7
 8004a18:	e0b3      	b.n	8004b82 <dir_register+0x1f2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d002      	beq.n	8004a28 <dir_register+0x98>
 8004a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a26:	e0ac      	b.n	8004b82 <dir_register+0x1f2>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	330b      	adds	r3, #11
 8004a2c:	7dfa      	ldrb	r2, [r7, #23]
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	61da      	str	r2, [r3, #28]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d014      	beq.n	8004a6a <dir_register+0xda>
		for (n = 0; lfn[n]; n++) ;
 8004a40:	2300      	movs	r3, #0
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a44:	e002      	b.n	8004a4c <dir_register+0xbc>
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	3301      	adds	r3, #1
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f5      	bne.n	8004a46 <dir_register+0xb6>
		nent = (n + 25) / 13;
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	3319      	adds	r3, #25
 8004a5e:	4a4b      	ldr	r2, [pc, #300]	; (8004b8c <dir_register+0x1fc>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	e001      	b.n	8004a6e <dir_register+0xde>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fcab 	bl	80043cc <dir_alloc>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d14b      	bne.n	8004b1c <dir_register+0x18c>
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3b01      	subs	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d045      	beq.n	8004b1c <dir_register+0x18c>
		res = dir_sdi(dp, dp->index - nent);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	88db      	ldrh	r3, [r3, #6]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fb43 	bl	8004128 <dir_sdi>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d135      	bne.n	8004b1c <dir_register+0x18c>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fe95 	bl	80047e4 <sum_sfn>
 8004aba:	4603      	mov	r3, r0
 8004abc:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fe ff97 	bl	80039fc <move_window>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d11e      	bne.n	8004b1a <dir_register+0x18a>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69d8      	ldr	r0, [r3, #28]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6959      	ldr	r1, [r3, #20]
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	7efb      	ldrb	r3, [r7, #27]
 8004aea:	f7ff fd77 	bl	80045dc <fit_lfn>
				dp->fs->wflag = 1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2201      	movs	r2, #1
 8004af4:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004af6:	2100      	movs	r1, #0
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fb94 	bl	8004226 <dir_next>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d107      	bne.n	8004b1c <dir_register+0x18c>
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1d2      	bne.n	8004abe <dir_register+0x12e>
 8004b18:	e000      	b.n	8004b1c <dir_register+0x18c>
				if (res != FR_OK) break;
 8004b1a:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d12c      	bne.n	8004b7e <dir_register+0x1ee>
		res = move_window(dp->fs, dp->sect);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7fe ff64 	bl	80039fc <move_window>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11d      	bne.n	8004b7e <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	2220      	movs	r2, #32
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe feb6 	bl	80038bc <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6958      	ldr	r0, [r3, #20]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	220b      	movs	r2, #11
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f7fe fe90 	bl	8003880 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	330c      	adds	r3, #12
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6992      	ldr	r2, [r2, #24]
 8004b6a:	320b      	adds	r2, #11
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	f002 0218 	and.w	r2, r2, #24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3730      	adds	r7, #48	; 0x30
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	4ec4ec4f 	.word	0x4ec4ec4f

08004b90 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	e002      	b.n	8004ba8 <create_name+0x18>
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b2f      	cmp	r3, #47	; 0x2f
 8004bae:	d0f8      	beq.n	8004ba2 <create_name+0x12>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8004bb6:	d0f4      	beq.n	8004ba2 <create_name+0x12>
	lfn = dp->lfn;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	61ba      	str	r2, [r7, #24]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bd6:	2b1f      	cmp	r3, #31
 8004bd8:	d92f      	bls.n	8004c3a <create_name+0xaa>
 8004bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8004bde:	d02c      	beq.n	8004c3a <create_name+0xaa>
 8004be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004be2:	2b5c      	cmp	r3, #92	; 0x5c
 8004be4:	d029      	beq.n	8004c3a <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2bfe      	cmp	r3, #254	; 0xfe
 8004bea:	d901      	bls.n	8004bf0 <create_name+0x60>
			return FR_INVALID_NAME;
 8004bec:	2306      	movs	r3, #6
 8004bee:	e1c7      	b.n	8004f80 <create_name+0x3f0>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fada 	bl	80061b4 <ff_convert>
 8004c00:	4603      	mov	r3, r0
 8004c02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <create_name+0x7e>
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	e1b8      	b.n	8004f80 <create_name+0x3f0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c10:	2b7f      	cmp	r3, #127	; 0x7f
 8004c12:	d809      	bhi.n	8004c28 <create_name+0x98>
 8004c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c16:	4619      	mov	r1, r3
 8004c18:	48a4      	ldr	r0, [pc, #656]	; (8004eac <create_name+0x31c>)
 8004c1a:	f7fe fe90 	bl	800393e <chk_chr>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <create_name+0x98>
			return FR_INVALID_NAME;
 8004c24:	2306      	movs	r3, #6
 8004c26:	e1ab      	b.n	8004f80 <create_name+0x3f0>
		lfn[di++] = w;					/* Store the Unicode character */
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	617a      	str	r2, [r7, #20]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c36:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004c38:	e7c5      	b.n	8004bc6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	441a      	add	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c46:	2b1f      	cmp	r3, #31
 8004c48:	d801      	bhi.n	8004c4e <create_name+0xbe>
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	e000      	b.n	8004c50 <create_name+0xc0>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if _FS_RPATH
	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d109      	bne.n	8004c6e <create_name+0xde>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c60:	3b01      	subs	r3, #1
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c6c:	d016      	beq.n	8004c9c <create_name+0x10c>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d14c      	bne.n	8004d0e <create_name+0x17e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	2b2e      	cmp	r3, #46	; 0x2e
 8004c86:	d142      	bne.n	8004d0e <create_name+0x17e>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c8e:	3b02      	subs	r3, #2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	2b2e      	cmp	r3, #46	; 0x2e
 8004c9a:	d138      	bne.n	8004d0e <create_name+0x17e>
		lfn[di] = 0;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	e00e      	b.n	8004ccc <create_name+0x13c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	6a39      	ldr	r1, [r7, #32]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4291      	cmp	r1, r2
 8004cbc:	d201      	bcs.n	8004cc2 <create_name+0x132>
 8004cbe:	222e      	movs	r2, #46	; 0x2e
 8004cc0:	e000      	b.n	8004cc4 <create_name+0x134>
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b0a      	cmp	r3, #10
 8004cd0:	d9ed      	bls.n	8004cae <create_name+0x11e>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004cde:	f042 0220 	orr.w	r2, r2, #32
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e14a      	b.n	8004f80 <create_name+0x3f0>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di - 1];
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d002      	beq.n	8004d08 <create_name+0x178>
 8004d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d04:	2b2e      	cmp	r3, #46	; 0x2e
 8004d06:	d106      	bne.n	8004d16 <create_name+0x186>
		di--;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ea      	bne.n	8004cea <create_name+0x15a>
 8004d14:	e000      	b.n	8004d18 <create_name+0x188>
		if (w != ' ' && w != '.') break;
 8004d16:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <create_name+0x192>
 8004d1e:	2306      	movs	r3, #6
 8004d20:	e12e      	b.n	8004f80 <create_name+0x3f0>

	lfn[di] = 0;						/* LFN is created */
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	220b      	movs	r2, #11
 8004d34:	2120      	movs	r1, #32
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fdc0 	bl	80038bc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e002      	b.n	8004d48 <create_name+0x1b8>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d0f5      	beq.n	8004d42 <create_name+0x1b2>
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	2b2e      	cmp	r3, #46	; 0x2e
 8004d62:	d0ee      	beq.n	8004d42 <create_name+0x1b2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <create_name+0x1ee>
 8004d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d6e:	f043 0303 	orr.w	r3, r3, #3
 8004d72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004d76:	e002      	b.n	8004d7e <create_name+0x1ee>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <create_name+0x208>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	2b2e      	cmp	r3, #46	; 0x2e
 8004d96:	d1ef      	bne.n	8004d78 <create_name+0x1e8>

	b = i = 0; ni = 8;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004da2:	2308      	movs	r3, #8
 8004da4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	61ba      	str	r2, [r7, #24]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8096 	beq.w	8004eea <create_name+0x35a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d006      	beq.n	8004dd2 <create_name+0x242>
 8004dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc8:	d10a      	bne.n	8004de0 <create_name+0x250>
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d006      	beq.n	8004de0 <create_name+0x250>
			cf |= NS_LOSS | NS_LFN; continue;
 8004dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004dd6:	f043 0303 	orr.w	r3, r3, #3
 8004dda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004dde:	e083      	b.n	8004ee8 <create_name+0x358>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d203      	bcs.n	8004df0 <create_name+0x260>
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d123      	bne.n	8004e38 <create_name+0x2a8>
			if (ni == 11) {				/* Long extension */
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b0b      	cmp	r3, #11
 8004df4:	d106      	bne.n	8004e04 <create_name+0x274>
				cf |= NS_LOSS | NS_LFN; break;
 8004df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004dfa:	f043 0303 	orr.w	r3, r3, #3
 8004dfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e02:	e075      	b.n	8004ef0 <create_name+0x360>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d005      	beq.n	8004e18 <create_name+0x288>
 8004e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e10:	f043 0303 	orr.w	r3, r3, #3
 8004e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d866      	bhi.n	8004eee <create_name+0x35e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	2308      	movs	r3, #8
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	230b      	movs	r3, #11
 8004e2a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e36:	e057      	b.n	8004ee8 <create_name+0x358>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e3c:	d914      	bls.n	8004e68 <create_name+0x2d8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f9b6 	bl	80061b4 <ff_convert>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <create_name+0x2cc>
 8004e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e54:	3b80      	subs	r3, #128	; 0x80
 8004e56:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <create_name+0x320>)
 8004e58:	5cd3      	ldrb	r3, [r2, r3]
 8004e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <create_name+0x2ee>
 8004e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e70:	4619      	mov	r1, r3
 8004e72:	4810      	ldr	r0, [pc, #64]	; (8004eb4 <create_name+0x324>)
 8004e74:	f7fe fd63 	bl	800393e <chk_chr>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <create_name+0x300>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004e7e:	235f      	movs	r3, #95	; 0x5f
 8004e80:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e86:	f043 0303 	orr.w	r3, r3, #3
 8004e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e8e:	e022      	b.n	8004ed6 <create_name+0x346>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d910      	bls.n	8004eb8 <create_name+0x328>
 8004e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e98:	2b5a      	cmp	r3, #90	; 0x5a
 8004e9a:	d80d      	bhi.n	8004eb8 <create_name+0x328>
					b |= 2;
 8004e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea0:	f043 0302 	orr.w	r3, r3, #2
 8004ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ea8:	e015      	b.n	8004ed6 <create_name+0x346>
 8004eaa:	bf00      	nop
 8004eac:	08007520 	.word	0x08007520
 8004eb0:	080075d0 	.word	0x080075d0
 8004eb4:	0800752c 	.word	0x0800752c
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eba:	2b60      	cmp	r3, #96	; 0x60
 8004ebc:	d90b      	bls.n	8004ed6 <create_name+0x346>
 8004ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ec0:	2b7a      	cmp	r3, #122	; 0x7a
 8004ec2:	d808      	bhi.n	8004ed6 <create_name+0x346>
						b |= 1; w -= 0x20;
 8004ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ed2:	3b20      	subs	r3, #32
 8004ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	1c59      	adds	r1, r3, #1
 8004ede:	6239      	str	r1, [r7, #32]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004ee8:	e75d      	b.n	8004da6 <create_name+0x216>
		if (!w) break;					/* Break on end of the LFN */
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <create_name+0x360>
			if (si > di) break;			/* No extension */
 8004eee:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2be5      	cmp	r3, #229	; 0xe5
 8004ef8:	d103      	bne.n	8004f02 <create_name+0x372>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2205      	movs	r2, #5
 8004f00:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d104      	bne.n	8004f12 <create_name+0x382>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d005      	beq.n	8004f2a <create_name+0x39a>
 8004f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d105      	bne.n	8004f36 <create_name+0x3a6>
		cf |= NS_LFN;
 8004f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f2e:	f043 0302 	orr.w	r3, r3, #2
 8004f32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004f36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d117      	bne.n	8004f72 <create_name+0x3e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <create_name+0x3ca>
 8004f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f52:	f043 0310 	orr.w	r3, r3, #16
 8004f56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d105      	bne.n	8004f72 <create_name+0x3e2>
 8004f66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f6a:	f043 0308 	orr.w	r3, r3, #8
 8004f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	330b      	adds	r3, #11
 8004f78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004f7c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004f7e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3728      	adds	r7, #40	; 0x28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b2f      	cmp	r3, #47	; 0x2f
 8004f98:	d003      	beq.n	8004fa2 <follow_path+0x1a>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b5c      	cmp	r3, #92	; 0x5c
 8004fa0:	d106      	bne.n	8004fb0 <follow_path+0x28>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	e004      	b.n	8004fba <follow_path+0x32>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b1f      	cmp	r3, #31
 8004fc0:	d809      	bhi.n	8004fd6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff f8af 	bl	8004128 <dir_sdi>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	615a      	str	r2, [r3, #20]
 8004fd4:	e056      	b.n	8005084 <follow_path+0xfc>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fdd8 	bl	8004b90 <create_name>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d147      	bne.n	800507a <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fc1b 	bl	8004826 <dir_find>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	7adb      	ldrb	r3, [r3, #11]
 8004ffa:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01d      	beq.n	800503e <follow_path+0xb6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d13a      	bne.n	800507e <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 8005008:	7bbb      	ldrb	r3, [r7, #14]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <follow_path+0xa6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	615a      	str	r2, [r3, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800501e:	7bbb      	ldrb	r3, [r7, #14]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d026      	beq.n	8005076 <follow_path+0xee>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 8005028:	2300      	movs	r3, #0
 800502a:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800502c:	e027      	b.n	800507e <follow_path+0xf6>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d122      	bne.n	800507e <follow_path+0xf6>
 8005038:	2305      	movs	r3, #5
 800503a:	73fb      	strb	r3, [r7, #15]
				break;
 800503c:	e01f      	b.n	800507e <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800503e:	7bbb      	ldrb	r3, [r7, #14]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11c      	bne.n	8005082 <follow_path+0xfa>
			dir = dp->dir;						/* Follow the sub-directory */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	330b      	adds	r3, #11
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <follow_path+0xda>
				res = FR_NO_PATH; break;
 800505c:	2305      	movs	r3, #5
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e010      	b.n	8005084 <follow_path+0xfc>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff f9f5 	bl	8004458 <ld_clust>
 800506e:	4602      	mov	r2, r0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	e7af      	b.n	8004fd6 <follow_path+0x4e>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8005076:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005078:	e7ad      	b.n	8004fd6 <follow_path+0x4e>
			if (res != FR_OK) break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <follow_path+0xfc>
				break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005082:	bf00      	nop
		}
	}

	return res;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800509c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d06f      	beq.n	8005186 <get_ldnumber+0xf6>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	e002      	b.n	80050b4 <get_ldnumber+0x24>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3301      	adds	r3, #1
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b1f      	cmp	r3, #31
 80050ba:	d903      	bls.n	80050c4 <get_ldnumber+0x34>
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b3a      	cmp	r3, #58	; 0x3a
 80050c2:	d1f4      	bne.n	80050ae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b3a      	cmp	r3, #58	; 0x3a
 80050ca:	d159      	bne.n	8005180 <get_ldnumber+0xf0>
			tp = *path;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	61fb      	str	r3, [r7, #28]
			i = *tp++ - '0'; 
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	61fa      	str	r2, [r7, #28]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	3b30      	subs	r3, #48	; 0x30
 80050dc:	617b      	str	r3, [r7, #20]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b09      	cmp	r3, #9
 80050e2:	d80f      	bhi.n	8005104 <get_ldnumber+0x74>
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d10b      	bne.n	8005104 <get_ldnumber+0x74>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d844      	bhi.n	800517c <get_ldnumber+0xec>
					vol = (int)i;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	601a      	str	r2, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005102:	e03b      	b.n	800517c <get_ldnumber+0xec>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	3301      	adds	r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
				do {
					sp = str[i]; tp = *path;
 800510e:	4a21      	ldr	r2, [pc, #132]	; (8005194 <get_ldnumber+0x104>)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	61fb      	str	r3, [r7, #28]
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	60fa      	str	r2, [r7, #12]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	72bb      	strb	r3, [r7, #10]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	61fa      	str	r2, [r7, #28]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	72fb      	strb	r3, [r7, #11]
						if (IsLower(tc)) tc -= 0x20;
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	2b60      	cmp	r3, #96	; 0x60
 8005136:	d905      	bls.n	8005144 <get_ldnumber+0xb4>
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	2b7a      	cmp	r3, #122	; 0x7a
 800513c:	d802      	bhi.n	8005144 <get_ldnumber+0xb4>
 800513e:	7afb      	ldrb	r3, [r7, #11]
 8005140:	3b20      	subs	r3, #32
 8005142:	72fb      	strb	r3, [r7, #11]
					} while (c && (TCHAR)c == tc);
 8005144:	7abb      	ldrb	r3, [r7, #10]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <get_ldnumber+0xc2>
 800514a:	7aba      	ldrb	r2, [r7, #10]
 800514c:	7afb      	ldrb	r3, [r7, #11]
 800514e:	429a      	cmp	r2, r3
 8005150:	d0e5      	beq.n	800511e <get_ldnumber+0x8e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 8005152:	7abb      	ldrb	r3, [r7, #10]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <get_ldnumber+0xd0>
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	429a      	cmp	r2, r3
 800515e:	d005      	beq.n	800516c <get_ldnumber+0xdc>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3301      	adds	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d9d0      	bls.n	800510e <get_ldnumber+0x7e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b08      	cmp	r3, #8
 8005170:	d804      	bhi.n	800517c <get_ldnumber+0xec>
					vol = (int)i;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	613b      	str	r3, [r7, #16]
					*path = tt;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	601a      	str	r2, [r3, #0]
				}
			}
#endif
			return vol;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	e003      	b.n	8005188 <get_ldnumber+0xf8>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <get_ldnumber+0x108>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	613b      	str	r3, [r7, #16]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
 8005186:	693b      	ldr	r3, [r7, #16]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3724      	adds	r7, #36	; 0x24
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	08007660 	.word	0x08007660
 8005198:	200001ea 	.word	0x200001ea

0800519c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	711a      	strb	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fe fc20 	bl	80039fc <move_window>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <check_fs+0x2a>
		return 3;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e04a      	b.n	800525c <check_fs+0xc0>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f203 2332 	addw	r3, r3, #562	; 0x232
 80051cc:	3301      	adds	r3, #1
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 80051da:	b21b      	sxth	r3, r3
 80051dc:	4313      	orrs	r3, r2
 80051de:	b21b      	sxth	r3, r3
 80051e0:	4a20      	ldr	r2, [pc, #128]	; (8005264 <check_fs+0xc8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d001      	beq.n	80051ea <check_fs+0x4e>
		return 2;
 80051e6:	2302      	movs	r3, #2
 80051e8:	e038      	b.n	800525c <check_fs+0xc0>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	336a      	adds	r3, #106	; 0x6a
 80051ee:	3303      	adds	r3, #3
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	061a      	lsls	r2, r3, #24
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	336a      	adds	r3, #106	; 0x6a
 80051f8:	3302      	adds	r3, #2
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	4313      	orrs	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	326a      	adds	r2, #106	; 0x6a
 8005204:	3201      	adds	r2, #1
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	0212      	lsls	r2, r2, #8
 800520a:	4313      	orrs	r3, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 8005212:	4313      	orrs	r3, r2
 8005214:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005218:	4a13      	ldr	r2, [pc, #76]	; (8005268 <check_fs+0xcc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <check_fs+0x86>
		return 0;
 800521e:	2300      	movs	r3, #0
 8005220:	e01c      	b.n	800525c <check_fs+0xc0>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3386      	adds	r3, #134	; 0x86
 8005226:	3303      	adds	r3, #3
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	061a      	lsls	r2, r3, #24
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3386      	adds	r3, #134	; 0x86
 8005230:	3302      	adds	r3, #2
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	4313      	orrs	r3, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	3286      	adds	r2, #134	; 0x86
 800523c:	3201      	adds	r2, #1
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	0212      	lsls	r2, r2, #8
 8005242:	4313      	orrs	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
 800524a:	4313      	orrs	r3, r2
 800524c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <check_fs+0xcc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <check_fs+0xbe>
		return 0;
 8005256:	2300      	movs	r3, #0
 8005258:	e000      	b.n	800525c <check_fs+0xc0>

	return 1;
 800525a:	2301      	movs	r3, #1
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	ffffaa55 	.word	0xffffaa55
 8005268:	00544146 	.word	0x00544146

0800526c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b096      	sub	sp, #88	; 0x58
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005280:	68b8      	ldr	r0, [r7, #8]
 8005282:	f7ff ff05 	bl	8005090 <get_ldnumber>
 8005286:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	2b00      	cmp	r3, #0
 800528c:	da01      	bge.n	8005292 <find_volume+0x26>
 800528e:	230b      	movs	r3, #11
 8005290:	e293      	b.n	80057ba <find_volume+0x54e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005292:	4a9b      	ldr	r2, [pc, #620]	; (8005500 <find_volume+0x294>)
 8005294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <find_volume+0x3a>
 80052a2:	230c      	movs	r3, #12
 80052a4:	e289      	b.n	80057ba <find_volume+0x54e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052aa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01a      	beq.n	80052ea <find_volume+0x7e>
		stat = disk_status(fs->drv);
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fc fa0b 	bl	80016d4 <disk_status>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80052c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10c      	bne.n	80052ea <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <find_volume+0x7a>
 80052d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 80052e2:	230a      	movs	r3, #10
 80052e4:	e269      	b.n	80057ba <find_volume+0x54e>
			return FR_OK;				/* The file system object is valid */
 80052e6:	2300      	movs	r3, #0
 80052e8:	e267      	b.n	80057ba <find_volume+0x54e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fc f9c7 	bl	8001690 <disk_initialize>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005314:	2303      	movs	r3, #3
 8005316:	e250      	b.n	80057ba <find_volume+0x54e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <find_volume+0xc2>
 800531e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800532a:	230a      	movs	r3, #10
 800532c:	e245      	b.n	80057ba <find_volume+0x54e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005332:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005336:	f7ff ff31 	bl	800519c <check_fs>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005344:	2b01      	cmp	r3, #1
 8005346:	d157      	bne.n	80053f8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005348:	2300      	movs	r3, #0
 800534a:	643b      	str	r3, [r7, #64]	; 0x40
 800534c:	e02b      	b.n	80053a6 <find_volume+0x13a>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800535c:	4413      	add	r3, r2
 800535e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	3304      	adds	r3, #4
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <find_volume+0x124>
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	330b      	adds	r3, #11
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	061a      	lsls	r2, r3, #24
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	330a      	adds	r3, #10
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	4313      	orrs	r3, r2
 800537c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537e:	3209      	adds	r2, #9
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	0212      	lsls	r2, r2, #8
 8005384:	4313      	orrs	r3, r2
 8005386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005388:	3208      	adds	r2, #8
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	431a      	orrs	r2, r3
 800538e:	e000      	b.n	8005392 <find_volume+0x126>
 8005390:	2200      	movs	r2, #0
 8005392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800539a:	440b      	add	r3, r1
 800539c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80053a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a2:	3301      	adds	r3, #1
 80053a4:	643b      	str	r3, [r7, #64]	; 0x40
 80053a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d9d0      	bls.n	800534e <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80053ac:	2300      	movs	r3, #0
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <find_volume+0x150>
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	3b01      	subs	r3, #1
 80053ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80053c4:	4413      	add	r3, r2
 80053c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80053ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80053cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <find_volume+0x172>
 80053d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80053d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053d6:	f7ff fee1 	bl	800519c <check_fs>
 80053da:	4603      	mov	r3, r0
 80053dc:	e000      	b.n	80053e0 <find_volume+0x174>
 80053de:	2302      	movs	r3, #2
 80053e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80053e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <find_volume+0x18c>
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	3301      	adds	r3, #1
 80053f0:	643b      	str	r3, [r7, #64]	; 0x40
 80053f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d9e1      	bls.n	80053bc <find_volume+0x150>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80053f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d101      	bne.n	8005404 <find_volume+0x198>
 8005400:	2301      	movs	r3, #1
 8005402:	e1da      	b.n	80057ba <find_volume+0x54e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <find_volume+0x1a4>
 800540c:	230d      	movs	r3, #13
 800540e:	e1d4      	b.n	80057ba <find_volume+0x54e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	b21a      	sxth	r2, r3
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005420:	b21b      	sxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b21b      	sxth	r3, r3
 8005426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542a:	d001      	beq.n	8005430 <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 800542c:	230d      	movs	r3, #13
 800542e:	e1c4      	b.n	80057ba <find_volume+0x54e>

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	b21a      	sxth	r2, r3
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005440:	b21b      	sxth	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	b21b      	sxth	r3, r3
 8005446:	b29b      	uxth	r3, r3
 8005448:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d112      	bne.n	8005476 <find_volume+0x20a>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8005456:	061a      	lsls	r2, r3, #24
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	4313      	orrs	r3, r2
 8005462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005464:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8005468:	0212      	lsls	r2, r2, #8
 800546a:	4313      	orrs	r3, r2
 800546c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800546e:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8005472:	4313      	orrs	r3, r2
 8005474:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800547a:	61da      	str	r2, [r3, #28]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	78db      	ldrb	r3, [r3, #3]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d005      	beq.n	800549a <find_volume+0x22e>
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d001      	beq.n	800549a <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8005496:	230d      	movs	r3, #13
 8005498:	e18f      	b.n	80057ba <find_volume+0x54e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	461a      	mov	r2, r3
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	789b      	ldrb	r3, [r3, #2]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <find_volume+0x260>
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	789b      	ldrb	r3, [r3, #2]
 80054be:	461a      	mov	r2, r3
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	789b      	ldrb	r3, [r3, #2]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <find_volume+0x264>
		return FR_NO_FILESYSTEM;
 80054cc:	230d      	movs	r3, #13
 80054ce:	e174      	b.n	80057ba <find_volume+0x54e>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	b21a      	sxth	r2, r3
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e0:	b21b      	sxth	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b21b      	sxth	r3, r3
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	891b      	ldrh	r3, [r3, #8]
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d004      	beq.n	8005504 <find_volume+0x298>
		return FR_NO_FILESYSTEM;
 80054fa:	230d      	movs	r3, #13
 80054fc:	e15d      	b.n	80057ba <find_volume+0x54e>
 80054fe:	bf00      	nop
 8005500:	200001c4 	.word	0x200001c4

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	b21a      	sxth	r2, r3
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005514:	b21b      	sxth	r3, r3
 8005516:	4313      	orrs	r3, r2
 8005518:	b21b      	sxth	r3, r3
 800551a:	b29b      	uxth	r3, r3
 800551c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 800551e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005520:	2b00      	cmp	r3, #0
 8005522:	d112      	bne.n	800554a <find_volume+0x2de>
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800552a:	061a      	lsls	r2, r3, #24
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005532:	041b      	lsls	r3, r3, #16
 8005534:	4313      	orrs	r3, r2
 8005536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005538:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800553c:	0212      	lsls	r2, r2, #8
 800553e:	4313      	orrs	r3, r2
 8005540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005542:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005546:	4313      	orrs	r3, r2
 8005548:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	b21a      	sxth	r2, r3
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800555a:	b21b      	sxth	r3, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	b21b      	sxth	r3, r3
 8005560:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005562:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <find_volume+0x300>
 8005568:	230d      	movs	r3, #13
 800556a:	e126      	b.n	80057ba <find_volume+0x54e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800556c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	4413      	add	r3, r2
 8005572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005574:	8912      	ldrh	r2, [r2, #8]
 8005576:	0912      	lsrs	r2, r2, #4
 8005578:	b292      	uxth	r2, r2
 800557a:	4413      	add	r3, r2
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800557e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	429a      	cmp	r2, r3
 8005584:	d201      	bcs.n	800558a <find_volume+0x31e>
 8005586:	230d      	movs	r3, #13
 8005588:	e117      	b.n	80057ba <find_volume+0x54e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800558a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005592:	7892      	ldrb	r2, [r2, #2]
 8005594:	fbb3 f3f2 	udiv	r3, r3, r2
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <find_volume+0x338>
 80055a0:	230d      	movs	r3, #13
 80055a2:	e10a      	b.n	80057ba <find_volume+0x54e>
	fmt = FS_FAT12;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d902      	bls.n	80055ba <find_volume+0x34e>
 80055b4:	2302      	movs	r3, #2
 80055b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d902      	bls.n	80055ca <find_volume+0x35e>
 80055c4:	2303      	movs	r3, #3
 80055c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	619a      	str	r2, [r3, #24]
	fs->volbase = bsect;								/* Volume start sector */
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055d6:	621a      	str	r2, [r3, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80055d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	441a      	add	r2, r3
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 80055e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	441a      	add	r2, r3
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 80055ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d11e      	bne.n	8005632 <find_volume+0x3c6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	891b      	ldrh	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <find_volume+0x394>
 80055fc:	230d      	movs	r3, #13
 80055fe:	e0dc      	b.n	80057ba <find_volume+0x54e>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8005606:	061a      	lsls	r2, r3, #24
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	4313      	orrs	r3, r2
 8005612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005614:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8005618:	0212      	lsls	r2, r2, #8
 800561a:	4313      	orrs	r3, r2
 800561c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005622:	431a      	orrs	r2, r3
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
 8005630:	e01f      	b.n	8005672 <find_volume+0x406>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	891b      	ldrh	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <find_volume+0x3d2>
 800563a:	230d      	movs	r3, #13
 800563c:	e0bd      	b.n	80057ba <find_volume+0x54e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005644:	441a      	add	r2, r3
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800564a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800564e:	2b02      	cmp	r3, #2
 8005650:	d103      	bne.n	800565a <find_volume+0x3ee>
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	e00a      	b.n	8005670 <find_volume+0x404>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	085a      	lsrs	r2, r3, #1
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005670:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	69da      	ldr	r2, [r3, #28]
 8005676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005678:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800567c:	0a5b      	lsrs	r3, r3, #9
 800567e:	429a      	cmp	r2, r3
 8005680:	d201      	bcs.n	8005686 <find_volume+0x41a>
		return FR_NO_FILESYSTEM;
 8005682:	230d      	movs	r3, #13
 8005684:	e099      	b.n	80057ba <find_volume+0x54e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800568c:	611a      	str	r2, [r3, #16]
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	2280      	movs	r2, #128	; 0x80
 800569a:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800569c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d178      	bne.n	8005796 <find_volume+0x52a>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	b21a      	sxth	r2, r3
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80056b4:	b21b      	sxth	r3, r3
 80056b6:	4313      	orrs	r3, r2
 80056b8:	b21b      	sxth	r3, r3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d16b      	bne.n	8005796 <find_volume+0x52a>
		&& move_window(fs, bsect + 1) == FR_OK)
 80056be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c0:	3301      	adds	r3, #1
 80056c2:	4619      	mov	r1, r3
 80056c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056c6:	f7fe f999 	bl	80039fc <move_window>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d162      	bne.n	8005796 <find_volume+0x52a>
	{
		fs->fsi_flag = 0;
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2200      	movs	r2, #0
 80056d4:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	b21a      	sxth	r2, r3
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 80056e6:	b21b      	sxth	r3, r3
 80056e8:	4313      	orrs	r3, r2
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	4a35      	ldr	r2, [pc, #212]	; (80057c4 <find_volume+0x558>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d151      	bne.n	8005796 <find_volume+0x52a>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80056f8:	061a      	lsls	r2, r3, #24
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	4313      	orrs	r3, r2
 8005704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005706:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 800570a:	0212      	lsls	r2, r2, #8
 800570c:	4313      	orrs	r3, r2
 800570e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005710:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005714:	4313      	orrs	r3, r2
 8005716:	4a2c      	ldr	r2, [pc, #176]	; (80057c8 <find_volume+0x55c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d13c      	bne.n	8005796 <find_volume+0x52a>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8005722:	061a      	lsls	r2, r3, #24
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	4313      	orrs	r3, r2
 800572e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005730:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 8005734:	0212      	lsls	r2, r2, #8
 8005736:	4313      	orrs	r3, r2
 8005738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573a:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 800573e:	4313      	orrs	r3, r2
 8005740:	4a22      	ldr	r2, [pc, #136]	; (80057cc <find_volume+0x560>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d127      	bne.n	8005796 <find_volume+0x52a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 800574c:	061a      	lsls	r2, r3, #24
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	4313      	orrs	r3, r2
 8005758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575a:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 800575e:	0212      	lsls	r2, r2, #8
 8005760:	4313      	orrs	r3, r2
 8005762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005764:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 8005768:	431a      	orrs	r2, r3
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 8005774:	061a      	lsls	r2, r3, #24
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	4313      	orrs	r3, r2
 8005780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005782:	f892 2221 	ldrb.w	r2, [r2, #545]	; 0x221
 8005786:	0212      	lsls	r2, r2, #8
 8005788:	4313      	orrs	r3, r2
 800578a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578c:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8005790:	431a      	orrs	r2, r3
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	60da      	str	r2, [r3, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800579c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <find_volume+0x564>)
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <find_volume+0x564>)
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <find_volume+0x564>)
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	2200      	movs	r2, #0
 80057b6:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3758      	adds	r7, #88	; 0x58
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	ffffaa55 	.word	0xffffaa55
 80057c8:	41615252 	.word	0x41615252
 80057cc:	61417272 	.word	0x61417272
 80057d0:	200001e8 	.word	0x200001e8

080057d4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00f      	beq.n	8005806 <validate+0x32>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <validate+0x32>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d006      	beq.n	8005806 <validate+0x32>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	88da      	ldrh	r2, [r3, #6]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	889b      	ldrh	r3, [r3, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d001      	beq.n	800580a <validate+0x36>
		return FR_INVALID_OBJECT;
 8005806:	2309      	movs	r3, #9
 8005808:	e00d      	b.n	8005826 <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	4618      	mov	r0, r3
 8005812:	f7fb ff5f 	bl	80016d4 <disk_status>
 8005816:	4603      	mov	r3, r0
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <validate+0x50>
		return FR_NOT_READY;
 8005820:	2303      	movs	r3, #3
 8005822:	e000      	b.n	8005826 <validate+0x52>

	return FR_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005842:	f107 0310 	add.w	r3, r7, #16
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fc22 	bl	8005090 <get_ldnumber>
 800584c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	da01      	bge.n	8005858 <f_mount+0x28>
 8005854:	230b      	movs	r3, #11
 8005856:	e028      	b.n	80058aa <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005858:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <f_mount+0x84>)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005860:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	490d      	ldr	r1, [pc, #52]	; (80058b4 <f_mount+0x84>)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <f_mount+0x60>
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <f_mount+0x64>
 8005890:	2300      	movs	r3, #0
 8005892:	e00a      	b.n	80058aa <f_mount+0x7a>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005894:	f107 0108 	add.w	r1, r7, #8
 8005898:	f107 030c 	add.w	r3, r7, #12
 800589c:	2200      	movs	r2, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fce4 	bl	800526c <find_volume>
 80058a4:	4603      	mov	r3, r0
 80058a6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200001c4 	.word	0x200001c4

080058b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b096      	sub	sp, #88	; 0x58
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	4613      	mov	r3, r2
 80058c4:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <f_open+0x18>
 80058cc:	2309      	movs	r3, #9
 80058ce:	e13e      	b.n	8005b4e <f_open+0x296>
	fp->fs = 0;			/* Clear file object */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	f107 0108 	add.w	r1, r7, #8
 80058ea:	f107 031c 	add.w	r3, r7, #28
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fcbc 	bl	800526c <find_volume>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80058fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 8123 	bne.w	8005b4a <f_open+0x292>
		INIT_BUF(dj);
 8005904:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005908:	f000 fcbe 	bl	8006288 <ff_memalloc>
 800590c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800590e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <f_open+0x60>
 8005914:	2311      	movs	r3, #17
 8005916:	e11a      	b.n	8005b4e <f_open+0x296>
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
		res = follow_path(&dj, path);	/* Follow the file path */
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	f107 031c 	add.w	r3, r7, #28
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fb2c 	bl	8004f88 <follow_path>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800593a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800593e:	2b00      	cmp	r3, #0
 8005940:	d105      	bne.n	800594e <f_open+0x96>
			if (!dir)	/* Default directory itself */
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <f_open+0x96>
				res = FR_INVALID_NAME;
 8005948:	2306      	movs	r3, #6
 800594a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	f003 031c 	and.w	r3, r3, #28
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 808f 	beq.w	8005a78 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 800595a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800595e:	2b00      	cmp	r3, #0
 8005960:	d012      	beq.n	8005988 <f_open+0xd0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005962:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005966:	2b04      	cmp	r3, #4
 8005968:	d107      	bne.n	800597a <f_open+0xc2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800596a:	f107 031c 	add.w	r3, r7, #28
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff f80e 	bl	8004990 <dir_register>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	f043 0308 	orr.w	r3, r3, #8
 8005980:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	653b      	str	r3, [r7, #80]	; 0x50
 8005986:	e012      	b.n	80059ae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598a:	330b      	adds	r3, #11
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 0311 	and.w	r3, r3, #17
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <f_open+0xe6>
					res = FR_DENIED;
 8005996:	2307      	movs	r3, #7
 8005998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800599c:	e007      	b.n	80059ae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <f_open+0xf6>
						res = FR_EXIST;
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80059ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d17e      	bne.n	8005ab4 <f_open+0x1fc>
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d079      	beq.n	8005ab4 <f_open+0x1fc>
				dw = GET_FATTIME();				/* Created time */
 80059c0:	f7fb ff32 	bl	8001828 <get_fattime>
 80059c4:	64b8      	str	r0, [r7, #72]	; 0x48
				ST_DWORD(dir + DIR_CrtTime, dw);
 80059c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c8:	330e      	adds	r3, #14
 80059ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d2:	330f      	adds	r3, #15
 80059d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059d6:	b292      	uxth	r2, r2
 80059d8:	0a12      	lsrs	r2, r2, #8
 80059da:	b292      	uxth	r2, r2
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e2:	3310      	adds	r3, #16
 80059e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e6:	0c12      	lsrs	r2, r2, #16
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ee:	3311      	adds	r3, #17
 80059f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f2:	0e12      	lsrs	r2, r2, #24
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80059f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fa:	330b      	adds	r3, #11
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a02:	331c      	adds	r3, #28
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0a:	331d      	adds	r3, #29
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a12:	331e      	adds	r3, #30
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1a:	331f      	adds	r3, #31
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fd17 	bl	8004458 <ld_clust>
 8005a2a:	6478      	str	r0, [r7, #68]	; 0x44
				st_clust(dir, 0);				/* cluster = 0 */
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a30:	f7fe fd3f 	bl	80044b2 <st_clust>
				dj.fs->wflag = 1;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2201      	movs	r2, #1
 8005a38:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d039      	beq.n	8005ab4 <f_open+0x1fc>
					dw = dj.fs->winsect;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
					res = remove_chain(dj.fs, cl);
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fa86 	bl	8003f5c <remove_chain>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 8005a56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d12a      	bne.n	8005ab4 <f_open+0x1fc>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a62:	3a01      	subs	r2, #1
 8005a64:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd ffc6 	bl	80039fc <move_window>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005a76:	e01d      	b.n	8005ab4 <f_open+0x1fc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d119      	bne.n	8005ab4 <f_open+0x1fc>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a82:	330b      	adds	r3, #11
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <f_open+0x1de>
					res = FR_NO_FILE;
 8005a8e:	2304      	movs	r3, #4
 8005a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005a94:	e00e      	b.n	8005ab4 <f_open+0x1fc>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <f_open+0x1fc>
 8005aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa2:	330b      	adds	r3, #11
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <f_open+0x1fc>
						res = FR_DENIED;
 8005aae:	2307      	movs	r3, #7
 8005ab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 8005ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10f      	bne.n	8005adc <f_open+0x224>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <f_open+0x216>
				mode |= FA__WRITTEN;
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	f043 0320 	orr.w	r3, r3, #32
 8005acc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ada:	621a      	str	r2, [r3, #32]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8005adc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005ade:	f000 fbdf 	bl	80062a0 <ff_memfree>

		if (res == FR_OK) {
 8005ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d12f      	bne.n	8005b4a <f_open+0x292>
			fp->flag = mode;					/* File access mode */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	79fa      	ldrb	r2, [r7, #7]
 8005aee:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fcac 	bl	8004458 <ld_clust>
 8005b00:	4602      	mov	r2, r0
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b08:	331f      	adds	r3, #31
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	061a      	lsls	r2, r3, #24
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b10:	331e      	adds	r3, #30
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	041b      	lsls	r3, r3, #16
 8005b16:	4313      	orrs	r3, r2
 8005b18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b1a:	321d      	adds	r2, #29
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	0212      	lsls	r2, r2, #8
 8005b20:	4313      	orrs	r3, r2
 8005b22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b24:	321c      	adds	r2, #28
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	88da      	ldrh	r2, [r3, #6]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005b4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3758      	adds	r7, #88	; 0x58
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b08c      	sub	sp, #48	; 0x30
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff fe30 	bl	80057d4 <validate>
 8005b74:	4603      	mov	r3, r0
 8005b76:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005b78:	7ffb      	ldrb	r3, [r7, #31]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <f_read+0x2c>
 8005b7e:	7ffb      	ldrb	r3, [r7, #31]
 8005b80:	e11c      	b.n	8005dbc <f_read+0x266>
	if (fp->err)								/* Check error */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	79db      	ldrb	r3, [r3, #7]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	79db      	ldrb	r3, [r3, #7]
 8005b8e:	e115      	b.n	8005dbc <f_read+0x266>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	799b      	ldrb	r3, [r3, #6]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005b9c:	2307      	movs	r3, #7
 8005b9e:	e10d      	b.n	8005dbc <f_read+0x266>
	remain = fp->fsize - fp->fptr;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	f240 80fe 	bls.w	8005db2 <f_read+0x25c>
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005bba:	e0fa      	b.n	8005db2 <f_read+0x25c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f040 80c6 	bne.w	8005d56 <f_read+0x200>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	0a5b      	lsrs	r3, r3, #9
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	789b      	ldrb	r3, [r3, #2]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	4013      	ands	r3, r2
 8005bde:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d124      	bne.n	8005c30 <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf4:	e008      	b.n	8005c08 <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7fd ffe9 	bl	8003bd8 <get_fat>
 8005c06:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d804      	bhi.n	8005c18 <f_read+0xc2>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2202      	movs	r2, #2
 8005c12:	71da      	strb	r2, [r3, #7]
 8005c14:	2302      	movs	r3, #2
 8005c16:	e0d1      	b.n	8005dbc <f_read+0x266>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1e:	d104      	bne.n	8005c2a <f_read+0xd4>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	71da      	strb	r2, [r3, #7]
 8005c26:	2301      	movs	r3, #1
 8005c28:	e0c8      	b.n	8005dbc <f_read+0x266>
				fp->clust = clst;				/* Update current cluster */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2e:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7fd ffad 	bl	8003b9a <clust2sect>
 8005c40:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <f_read+0xfc>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	71da      	strb	r2, [r3, #7]
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e0b4      	b.n	8005dbc <f_read+0x266>
			sect += csect;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0a5b      	lsrs	r3, r3, #9
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03d      	beq.n	8005ce2 <f_read+0x18c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005c66:	7dfa      	ldrb	r2, [r7, #23]
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	4413      	add	r3, r2
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	7892      	ldrb	r2, [r2, #2]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d906      	bls.n	8005c84 <f_read+0x12e>
					cc = fp->fs->csize - csect;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	789b      	ldrb	r3, [r3, #2]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	7858      	ldrb	r0, [r3, #1]
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	6a39      	ldr	r1, [r7, #32]
 8005c90:	f7fb fd44 	bl	800171c <disk_read>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <f_read+0x14e>
					ABORT(fp->fs, FR_DISK_ERR);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	71da      	strb	r2, [r3, #7]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e08b      	b.n	8005dbc <f_read+0x266>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	799b      	ldrb	r3, [r3, #6]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d014      	beq.n	8005cda <f_read+0x184>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d20d      	bcs.n	8005cda <f_read+0x184>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	025b      	lsls	r3, r3, #9
 8005cc8:	6a3a      	ldr	r2, [r7, #32]
 8005cca:	18d0      	adds	r0, r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3324      	adds	r3, #36	; 0x24
 8005cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f7fd fdd3 	bl	8003880 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	025b      	lsls	r3, r3, #9
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005ce0:	e053      	b.n	8005d8a <f_read+0x234>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d031      	beq.n	8005d50 <f_read+0x1fa>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	799b      	ldrb	r3, [r3, #6]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d019      	beq.n	8005d2c <f_read+0x1d6>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	7858      	ldrb	r0, [r3, #1]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f7fb fd35 	bl	8001778 <disk_write>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <f_read+0x1c8>
						ABORT(fp->fs, FR_DISK_ERR);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	71da      	strb	r2, [r3, #7]
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e04e      	b.n	8005dbc <f_read+0x266>
					fp->flag &= ~FA__DIRTY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	799b      	ldrb	r3, [r3, #6]
 8005d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	7858      	ldrb	r0, [r3, #1]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005d38:	2301      	movs	r3, #1
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	f7fb fcee 	bl	800171c <disk_read>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <f_read+0x1fa>
					ABORT(fp->fs, FR_DISK_ERR);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	71da      	strb	r2, [r3, #7]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e035      	b.n	8005dbc <f_read+0x266>
			}
#endif
			fp->dsect = sect;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d901      	bls.n	8005d70 <f_read+0x21a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d78:	3320      	adds	r3, #32
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3304      	adds	r3, #4
 8005d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d82:	4619      	mov	r1, r3
 8005d84:	6a38      	ldr	r0, [r7, #32]
 8005d86:	f7fd fd7b 	bl	8003880 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005d8a:	6a3a      	ldr	r2, [r7, #32]
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	4413      	add	r3, r2
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	441a      	add	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	609a      	str	r2, [r3, #8]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	441a      	add	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f47f af01 	bne.w	8005bbc <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3730      	adds	r7, #48	; 0x30
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fd01 	bl	80057d4 <validate>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f040 8096 	bne.w	8005f0a <f_sync+0x146>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	799b      	ldrb	r3, [r3, #6]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 808f 	beq.w	8005f0a <f_sync+0x146>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	799b      	ldrb	r3, [r3, #6]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d016      	beq.n	8005e26 <f_sync+0x62>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	7858      	ldrb	r0, [r3, #1]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f7fb fcb5 	bl	8001778 <disk_write>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <f_sync+0x54>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005e14:	2301      	movs	r3, #1
 8005e16:	e079      	b.n	8005f0c <f_sync+0x148>
				fp->flag &= ~FA__DIRTY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	799b      	ldrb	r3, [r3, #6]
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7fd fde3 	bl	80039fc <move_window>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d164      	bne.n	8005f0a <f_sync+0x146>
				dir = fp->dir_ptr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	330b      	adds	r3, #11
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	320b      	adds	r2, #11
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	f042 0220 	orr.w	r2, r2, #32
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	331c      	adds	r3, #28
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68d2      	ldr	r2, [r2, #12]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	331d      	adds	r3, #29
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	68d2      	ldr	r2, [r2, #12]
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	0a12      	lsrs	r2, r2, #8
 8005e70:	b292      	uxth	r2, r2
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	331e      	adds	r3, #30
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68d2      	ldr	r2, [r2, #12]
 8005e7e:	0c12      	lsrs	r2, r2, #16
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	331f      	adds	r3, #31
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	68d2      	ldr	r2, [r2, #12]
 8005e8c:	0e12      	lsrs	r2, r2, #24
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	4619      	mov	r1, r3
 8005e98:	6938      	ldr	r0, [r7, #16]
 8005e9a:	f7fe fb0a 	bl	80044b2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005e9e:	f7fb fcc3 	bl	8001828 <get_fattime>
 8005ea2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3316      	adds	r3, #22
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3317      	adds	r3, #23
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	b292      	uxth	r2, r2
 8005eb6:	0a12      	lsrs	r2, r2, #8
 8005eb8:	b292      	uxth	r2, r2
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	0c12      	lsrs	r2, r2, #16
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	3319      	adds	r3, #25
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	0e12      	lsrs	r2, r2, #24
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3312      	adds	r3, #18
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3313      	adds	r3, #19
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	799b      	ldrb	r3, [r3, #6]
 8005eea:	f023 0320 	bic.w	r3, r3, #32
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fd fda8 	bl	8003a56 <sync_fs>
 8005f06:	4603      	mov	r3, r0
 8005f08:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff ff51 	bl	8005dc4 <f_sync>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <f_close+0x2e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fc51 	bl	80057d4 <validate>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <f_close+0x2e>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fc3c 	bl	80057d4 <validate>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <f_lseek+0x1e>
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	e11f      	b.n	80061aa <f_lseek+0x25e>
	if (fp->err)						/* Check error */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	79db      	ldrb	r3, [r3, #7]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <f_lseek+0x2c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	79db      	ldrb	r3, [r3, #7]
 8005f76:	e118      	b.n	80061aa <f_lseek+0x25e>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d208      	bcs.n	8005f94 <f_lseek+0x48>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	799b      	ldrb	r3, [r3, #6]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <f_lseek+0x48>
#endif
			) ofs = fp->fsize;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	609a      	str	r2, [r3, #8]
		if (ofs) {
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80ad 	beq.w	8006106 <f_lseek+0x1ba>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	789b      	ldrb	r3, [r3, #2]
 8005fb2:	025b      	lsls	r3, r3, #9
 8005fb4:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <f_lseek+0xa8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	1e5a      	subs	r2, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1e59      	subs	r1, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d30f      	bcc.n	8005ff4 <f_lseek+0xa8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1e5a      	subs	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	425b      	negs	r3, r3
 8005fdc:	401a      	ands	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e023      	b.n	800603c <f_lseek+0xf0>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11a      	bne.n	8006036 <f_lseek+0xea>
					clst = create_chain(fp->fs, 0);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f7fd fffb 	bl	8004002 <create_chain>
 800600c:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d104      	bne.n	800601e <f_lseek+0xd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	71da      	strb	r2, [r3, #7]
 800601a:	2302      	movs	r3, #2
 800601c:	e0c5      	b.n	80061aa <f_lseek+0x25e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006024:	d104      	bne.n	8006030 <f_lseek+0xe4>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	71da      	strb	r2, [r3, #7]
 800602c:	2301      	movs	r3, #1
 800602e:	e0bc      	b.n	80061aa <f_lseek+0x25e>
					fp->sclust = clst;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d061      	beq.n	8006106 <f_lseek+0x1ba>
				while (ofs > bcs) {						/* Cluster following loop */
 8006042:	e03d      	b.n	80060c0 <f_lseek+0x174>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	799b      	ldrb	r3, [r3, #6]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00c      	beq.n	800606a <f_lseek+0x11e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69f9      	ldr	r1, [r7, #28]
 8006056:	4618      	mov	r0, r3
 8006058:	f7fd ffd3 	bl	8004002 <create_chain>
 800605c:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <f_lseek+0x12c>
							ofs = bcs; break;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	e02e      	b.n	80060c8 <f_lseek+0x17c>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69f9      	ldr	r1, [r7, #28]
 8006070:	4618      	mov	r0, r3
 8006072:	f7fd fdb1 	bl	8003bd8 <get_fat>
 8006076:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800607e:	d104      	bne.n	800608a <f_lseek+0x13e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	71da      	strb	r2, [r3, #7]
 8006086:	2301      	movs	r3, #1
 8006088:	e08f      	b.n	80061aa <f_lseek+0x25e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d905      	bls.n	800609c <f_lseek+0x150>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	429a      	cmp	r2, r3
 800609a:	d804      	bhi.n	80060a6 <f_lseek+0x15a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	71da      	strb	r2, [r3, #7]
 80060a2:	2302      	movs	r3, #2
 80060a4:	e081      	b.n	80061aa <f_lseek+0x25e>
					fp->clust = clst;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	441a      	add	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d8bd      	bhi.n	8006044 <f_lseek+0xf8>
				}
				fp->fptr += ofs;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	441a      	add	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d013      	beq.n	8006106 <f_lseek+0x1ba>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69f9      	ldr	r1, [r7, #28]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fd fd58 	bl	8003b9a <clust2sect>
 80060ea:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <f_lseek+0x1b0>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	71da      	strb	r2, [r3, #7]
 80060f8:	2302      	movs	r3, #2
 80060fa:	e056      	b.n	80061aa <f_lseek+0x25e>
					nsect += ofs / SS(fp->fs);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	0a5b      	lsrs	r3, r3, #9
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	4413      	add	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	2b00      	cmp	r3, #0
 8006110:	d039      	beq.n	8006186 <f_lseek+0x23a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	429a      	cmp	r2, r3
 800611a:	d034      	beq.n	8006186 <f_lseek+0x23a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	799b      	ldrb	r3, [r3, #6]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d019      	beq.n	800615c <f_lseek+0x210>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	7858      	ldrb	r0, [r3, #1]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	2301      	movs	r3, #1
 800613a:	f7fb fb1d 	bl	8001778 <disk_write>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <f_lseek+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	71da      	strb	r2, [r3, #7]
 800614a:	2301      	movs	r3, #1
 800614c:	e02d      	b.n	80061aa <f_lseek+0x25e>
				fp->flag &= ~FA__DIRTY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	799b      	ldrb	r3, [r3, #6]
 8006152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006156:	b2da      	uxtb	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	7858      	ldrb	r0, [r3, #1]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006168:	2301      	movs	r3, #1
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	f7fb fad6 	bl	800171c <disk_read>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <f_lseek+0x234>
				ABORT(fp->fs, FR_DISK_ERR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	71da      	strb	r2, [r3, #7]
 800617c:	2301      	movs	r3, #1
 800617e:	e014      	b.n	80061aa <f_lseek+0x25e>
#endif
			fp->dsect = nsect;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	429a      	cmp	r2, r3
 8006190:	d90a      	bls.n	80061a8 <f_lseek+0x25c>
			fp->fsize = fp->fptr;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	799b      	ldrb	r3, [r3, #6]
 800619e:	f043 0320 	orr.w	r3, r3, #32
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	6039      	str	r1, [r7, #0]
 80061be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	2b7f      	cmp	r3, #127	; 0x7f
 80061c4:	d802      	bhi.n	80061cc <ff_convert+0x18>
		c = chr;
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	81fb      	strh	r3, [r7, #14]
 80061ca:	e025      	b.n	8006218 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	2bff      	cmp	r3, #255	; 0xff
 80061d6:	d805      	bhi.n	80061e4 <ff_convert+0x30>
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	3b80      	subs	r3, #128	; 0x80
 80061dc:	4a12      	ldr	r2, [pc, #72]	; (8006228 <ff_convert+0x74>)
 80061de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e2:	e000      	b.n	80061e6 <ff_convert+0x32>
 80061e4:	2300      	movs	r3, #0
 80061e6:	81fb      	strh	r3, [r7, #14]
 80061e8:	e016      	b.n	8006218 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80061ea:	2300      	movs	r3, #0
 80061ec:	81fb      	strh	r3, [r7, #14]
 80061ee:	e009      	b.n	8006204 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80061f0:	89fb      	ldrh	r3, [r7, #14]
 80061f2:	4a0d      	ldr	r2, [pc, #52]	; (8006228 <ff_convert+0x74>)
 80061f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d006      	beq.n	800620c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	3301      	adds	r3, #1
 8006202:	81fb      	strh	r3, [r7, #14]
 8006204:	89fb      	ldrh	r3, [r7, #14]
 8006206:	2b7f      	cmp	r3, #127	; 0x7f
 8006208:	d9f2      	bls.n	80061f0 <ff_convert+0x3c>
 800620a:	e000      	b.n	800620e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800620c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800620e:	89fb      	ldrh	r3, [r7, #14]
 8006210:	3380      	adds	r3, #128	; 0x80
 8006212:	b29b      	uxth	r3, r3
 8006214:	b2db      	uxtb	r3, r3
 8006216:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006218:	89fb      	ldrh	r3, [r7, #14]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	08007684 	.word	0x08007684

0800622c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e002      	b.n	8006242 <ff_wtoupper+0x16>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <ff_wtoupper+0x54>)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d006      	beq.n	800625c <ff_wtoupper+0x30>
 800624e:	4a0c      	ldr	r2, [pc, #48]	; (8006280 <ff_wtoupper+0x54>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	429a      	cmp	r2, r3
 800625a:	d1ef      	bne.n	800623c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800625c:	4a08      	ldr	r2, [pc, #32]	; (8006280 <ff_wtoupper+0x54>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <ff_wtoupper+0x46>
 8006268:	4a06      	ldr	r2, [pc, #24]	; (8006284 <ff_wtoupper+0x58>)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006270:	e000      	b.n	8006274 <ff_wtoupper+0x48>
 8006272:	88fb      	ldrh	r3, [r7, #6]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	08007784 	.word	0x08007784
 8006284:	08007964 	.word	0x08007964

08006288 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 f851 	bl	8007338 <malloc>
 8006296:	4603      	mov	r3, r0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f84d 	bl	8007348 <free>
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <TM_FATFS_CheckCardDetectPin>:
	if (fr) return fr;										/* Check for success */
	fr =  f_truncate(fil);									/* Truncate file from new end to actual end */
	return f_lseek(fil, 0);									/* Move pointer to the beginning */
}

uint8_t TM_FATFS_CheckCardDetectPin(void) {
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 80062bc:	2301      	movs	r3, #1
 80062be:	71fb      	strb	r3, [r7, #7]
		status = 0;
	}
#endif
	
	/* Return status */
	return status;
 80062c0:	79fb      	ldrb	r3, [r7, #7]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af02      	add	r7, sp, #8
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	4608      	mov	r0, r1
 80062d8:	4611      	mov	r1, r2
 80062da:	461a      	mov	r2, r3
 80062dc:	4603      	mov	r3, r0
 80062de:	807b      	strh	r3, [r7, #2]
 80062e0:	460b      	mov	r3, r1
 80062e2:	707b      	strb	r3, [r7, #1]
 80062e4:	4613      	mov	r3, r2
 80062e6:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d03e      	beq.n	800636c <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8c4 	bl	800647c <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e029      	b.n	800634e <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80062fa:	887a      	ldrh	r2, [r7, #2]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	fa42 f303 	asr.w	r3, r2, r3
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01d      	beq.n	8006346 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	08da      	lsrs	r2, r3, #3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	08d9      	lsrs	r1, r3, #3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3108      	adds	r1, #8
 8006316:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	f001 0107 	and.w	r1, r1, #7
 8006320:	0089      	lsls	r1, r1, #2
 8006322:	200f      	movs	r0, #15
 8006324:	fa00 f101 	lsl.w	r1, r0, r1
 8006328:	43c9      	mvns	r1, r1
 800632a:	400b      	ands	r3, r1
 800632c:	7f38      	ldrb	r0, [r7, #28]
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	f001 0107 	and.w	r1, r1, #7
 8006334:	0089      	lsls	r1, r1, #2
 8006336:	fa00 f101 	lsl.w	r1, r0, r1
 800633a:	4319      	orrs	r1, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3208      	adds	r2, #8
 8006340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006344:	e000      	b.n	8006348 <TM_GPIO_InitAlternate+0x7a>
			continue;
 8006346:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b0f      	cmp	r3, #15
 8006352:	d9d2      	bls.n	80062fa <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8006354:	787a      	ldrb	r2, [r7, #1]
 8006356:	8879      	ldrh	r1, [r7, #2]
 8006358:	7e3b      	ldrb	r3, [r7, #24]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	783b      	ldrb	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	2202      	movs	r2, #2
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8a1 	bl	80064ac <TM_GPIO_INT_Init>
 800636a:	e000      	b.n	800636e <TM_GPIO_InitAlternate+0xa0>
		return;
 800636c:	bf00      	nop
}
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <TM_GPIO_DeInit>:

void TM_GPIO_DeInit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f869 	bl	8006458 <TM_GPIO_GetPortSource>
 8006386:	4603      	mov	r3, r0
 8006388:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]
 800638e:	e027      	b.n	80063e0 <TM_GPIO_DeInit+0x6c>
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
 8006390:	887a      	ldrh	r2, [r7, #2]
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	fa42 f303 	asr.w	r3, r2, r3
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01c      	beq.n	80063da <TM_GPIO_DeInit+0x66>
			/* Set 11 bits combination for analog mode */
			GPIOx->MODER |= (0x03 << (2 * i));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	7bfa      	ldrb	r2, [r7, #15]
 80063a6:	0052      	lsls	r2, r2, #1
 80063a8:	2103      	movs	r1, #3
 80063aa:	fa01 f202 	lsl.w	r2, r1, r2
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
			
			/* Pin is not used */
			GPIO_UsedPins[ptr] &= ~(1 << i);
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	7bba      	ldrb	r2, [r7, #14]
 80063b8:	490d      	ldr	r1, [pc, #52]	; (80063f0 <TM_GPIO_DeInit+0x7c>)
 80063ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80063be:	b211      	sxth	r1, r2
 80063c0:	7bfa      	ldrb	r2, [r7, #15]
 80063c2:	2001      	movs	r0, #1
 80063c4:	fa00 f202 	lsl.w	r2, r0, r2
 80063c8:	b212      	sxth	r2, r2
 80063ca:	43d2      	mvns	r2, r2
 80063cc:	b212      	sxth	r2, r2
 80063ce:	400a      	ands	r2, r1
 80063d0:	b212      	sxth	r2, r2
 80063d2:	b291      	uxth	r1, r2
 80063d4:	4a06      	ldr	r2, [pc, #24]	; (80063f0 <TM_GPIO_DeInit+0x7c>)
 80063d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0x00; i < 0x10; i++) {
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	3301      	adds	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b0f      	cmp	r3, #15
 80063e4:	d9d4      	bls.n	8006390 <TM_GPIO_DeInit+0x1c>
		}
	}
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200001ec 	.word	0x200001ec

080063f4 <TM_GPIO_SetPullResistor>:
		/* Set alternate mode */
		GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x02 << (2 * i));
	}
}

void TM_GPIO_SetPullResistor(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_PuPd_t GPIO_PuPd) {
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	807b      	strh	r3, [r7, #2]
 8006400:	4613      	mov	r3, r2
 8006402:	707b      	strb	r3, [r7, #1]
	uint8_t pinpos;
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e01d      	b.n	8006446 <TM_GPIO_SetPullResistor+0x52>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800640a:	887a      	ldrh	r2, [r7, #2]
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	fa42 f303 	asr.w	r3, r2, r3
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <TM_GPIO_SetPullResistor+0x4a>
			continue;
		}

		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	7bfa      	ldrb	r2, [r7, #15]
 8006420:	0052      	lsls	r2, r2, #1
 8006422:	2103      	movs	r1, #3
 8006424:	fa01 f202 	lsl.w	r2, r1, r2
 8006428:	43d2      	mvns	r2, r2
 800642a:	4013      	ands	r3, r2
 800642c:	7879      	ldrb	r1, [r7, #1]
 800642e:	7bfa      	ldrb	r2, [r7, #15]
 8006430:	0052      	lsls	r2, r2, #1
 8006432:	fa01 f202 	lsl.w	r2, r1, r2
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]
 800643c:	e000      	b.n	8006440 <TM_GPIO_SetPullResistor+0x4c>
			continue;
 800643e:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	3301      	adds	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d9de      	bls.n	800640a <TM_GPIO_SetPullResistor+0x16>
	}
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8006466:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800646a:	0a9b      	lsrs	r3, r3, #10
 800646c:	b29b      	uxth	r3, r3
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ffe7 	bl	8006458 <TM_GPIO_GetPortSource>
 800648a:	4603      	mov	r3, r0
 800648c:	461a      	mov	r2, r3
 800648e:	2301      	movs	r3, #1
 8006490:	fa03 f102 	lsl.w	r1, r3, r2
 8006494:	4a04      	ldr	r2, [pc, #16]	; (80064a8 <TM_GPIO_INT_EnableClock+0x2c>)
 8006496:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <TM_GPIO_INT_EnableClock+0x2c>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	430b      	orrs	r3, r1
 800649c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40023800 	.word	0x40023800

080064ac <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	461a      	mov	r2, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	807b      	strh	r3, [r7, #2]
 80064be:	460b      	mov	r3, r1
 80064c0:	707b      	strb	r3, [r7, #1]
 80064c2:	4613      	mov	r3, r2
 80064c4:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff ffc6 	bl	8006458 <TM_GPIO_GetPortSource>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
 80064d4:	e067      	b.n	80065a6 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80064d6:	887a      	ldrh	r2, [r7, #2]
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	fa42 f303 	asr.w	r3, r2, r3
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d05b      	beq.n	800659e <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	7bba      	ldrb	r2, [r7, #14]
 80064ea:	4932      	ldr	r1, [pc, #200]	; (80065b4 <TM_GPIO_INT_Init+0x108>)
 80064ec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80064f0:	b211      	sxth	r1, r2
 80064f2:	7bfa      	ldrb	r2, [r7, #15]
 80064f4:	2001      	movs	r0, #1
 80064f6:	fa00 f202 	lsl.w	r2, r0, r2
 80064fa:	b212      	sxth	r2, r2
 80064fc:	430a      	orrs	r2, r1
 80064fe:	b212      	sxth	r2, r2
 8006500:	b291      	uxth	r1, r2
 8006502:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <TM_GPIO_INT_Init+0x108>)
 8006504:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	7bfa      	ldrb	r2, [r7, #15]
 800650e:	0052      	lsls	r2, r2, #1
 8006510:	2103      	movs	r1, #3
 8006512:	fa01 f202 	lsl.w	r2, r1, r2
 8006516:	43d2      	mvns	r2, r2
 8006518:	4013      	ands	r3, r2
 800651a:	7e39      	ldrb	r1, [r7, #24]
 800651c:	7bfa      	ldrb	r2, [r7, #15]
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	fa01 f202 	lsl.w	r2, r1, r2
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	2103      	movs	r1, #3
 8006534:	fa01 f303 	lsl.w	r3, r1, r3
 8006538:	43db      	mvns	r3, r3
 800653a:	4013      	ands	r3, r2
 800653c:	7879      	ldrb	r1, [r7, #1]
 800653e:	7bfa      	ldrb	r2, [r7, #15]
 8006540:	0052      	lsls	r2, r2, #1
 8006542:	fa01 f202 	lsl.w	r2, r1, r2
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800654c:	787b      	ldrb	r3, [r7, #1]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d002      	beq.n	8006558 <TM_GPIO_INT_Init+0xac>
 8006552:	787b      	ldrb	r3, [r7, #1]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d123      	bne.n	80065a0 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	7bfa      	ldrb	r2, [r7, #15]
 800655e:	2101      	movs	r1, #1
 8006560:	fa01 f202 	lsl.w	r2, r1, r2
 8006564:	b292      	uxth	r2, r2
 8006566:	43d2      	mvns	r2, r2
 8006568:	4013      	ands	r3, r2
 800656a:	7839      	ldrb	r1, [r7, #0]
 800656c:	7bfa      	ldrb	r2, [r7, #15]
 800656e:	fa01 f202 	lsl.w	r2, r1, r2
 8006572:	b292      	uxth	r2, r2
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	2103      	movs	r1, #3
 8006584:	fa01 f303 	lsl.w	r3, r1, r3
 8006588:	43db      	mvns	r3, r3
 800658a:	4013      	ands	r3, r2
 800658c:	7f39      	ldrb	r1, [r7, #28]
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	0052      	lsls	r2, r2, #1
 8006592:	fa01 f202 	lsl.w	r2, r1, r2
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	e000      	b.n	80065a0 <TM_GPIO_INT_Init+0xf4>
			continue;
 800659e:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	3301      	adds	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b0f      	cmp	r3, #15
 80065aa:	d994      	bls.n	80064d6 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	200001ec 	.word	0x200001ec

080065b8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	4a10      	ldr	r2, [pc, #64]	; (8006608 <STM_EVAL_LEDInit+0x50>)
 80065c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ca:	2101      	movs	r1, #1
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fa fc91 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <STM_EVAL_LEDInit+0x54>)
 80065d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80065dc:	2301      	movs	r3, #1
 80065de:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80065e4:	2301      	movs	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80065e8:	2302      	movs	r3, #2
 80065ea:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	4a08      	ldr	r2, [pc, #32]	; (8006610 <STM_EVAL_LEDInit+0x58>)
 80065f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f4:	f107 0208 	add.w	r2, r7, #8
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fa f896 	bl	800072c <GPIO_Init>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	08007b4c 	.word	0x08007b4c
 800660c:	08007b44 	.word	0x08007b44
 8006610:	200000c8 	.word	0x200000c8

08006614 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	4a06      	ldr	r2, [pc, #24]	; (800663c <STM_EVAL_LEDOn+0x28>)
 8006622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006626:	79fa      	ldrb	r2, [r7, #7]
 8006628:	4905      	ldr	r1, [pc, #20]	; (8006640 <STM_EVAL_LEDOn+0x2c>)
 800662a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800662e:	831a      	strh	r2, [r3, #24]
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	200000c8 	.word	0x200000c8
 8006640:	08007b44 	.word	0x08007b44

08006644 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	4a06      	ldr	r2, [pc, #24]	; (800666c <STM_EVAL_LEDOff+0x28>)
 8006652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006656:	79fa      	ldrb	r2, [r7, #7]
 8006658:	4905      	ldr	r1, [pc, #20]	; (8006670 <STM_EVAL_LEDOff+0x2c>)
 800665a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800665e:	835a      	strh	r2, [r3, #26]
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	200000c8 	.word	0x200000c8
 8006670:	08007b44 	.word	0x08007b44

08006674 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8006678:	4b38      	ldr	r3, [pc, #224]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b38      	ldr	r3, [pc, #224]	; (8006760 <Audio_MAL_IRQHandler+0xec>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f7f9 ffae 	bl	80005e4 <DMA_GetFlagStatus>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d064      	beq.n	8006758 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800668e:	4b35      	ldr	r3, [pc, #212]	; (8006764 <Audio_MAL_IRQHandler+0xf0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d04c      	beq.n	8006730 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8006696:	bf00      	nop
 8006698:	4b30      	ldr	r3, [pc, #192]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f7f9 ff88 	bl	80005b2 <DMA_GetCmdStatus>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f7      	bne.n	8006698 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80066a8:	4b2c      	ldr	r3, [pc, #176]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <Audio_MAL_IRQHandler+0xec>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f7f9 ffd2 	bl	800065c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80066b8:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <Audio_MAL_IRQHandler+0xf4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	4b2b      	ldr	r3, [pc, #172]	; (800676c <Audio_MAL_IRQHandler+0xf8>)
 80066c0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80066c2:	4b28      	ldr	r3, [pc, #160]	; (8006764 <Audio_MAL_IRQHandler+0xf0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ca:	4293      	cmp	r3, r2
 80066cc:	bf28      	it	cs
 80066ce:	4613      	movcs	r3, r2
 80066d0:	4a26      	ldr	r2, [pc, #152]	; (800676c <Audio_MAL_IRQHandler+0xf8>)
 80066d2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80066d4:	4b21      	ldr	r3, [pc, #132]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4924      	ldr	r1, [pc, #144]	; (800676c <Audio_MAL_IRQHandler+0xf8>)
 80066da:	4618      	mov	r0, r3
 80066dc:	f7f9 feda 	bl	8000494 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80066e0:	4b1e      	ldr	r3, [pc, #120]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2101      	movs	r1, #1
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7f9 ff2c 	bl	8000544 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <Audio_MAL_IRQHandler+0xf4>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <Audio_MAL_IRQHandler+0xf0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f8:	d203      	bcs.n	8006702 <Audio_MAL_IRQHandler+0x8e>
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <Audio_MAL_IRQHandler+0xf0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	e000      	b.n	8006704 <Audio_MAL_IRQHandler+0x90>
 8006702:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <Audio_MAL_IRQHandler+0xfc>)
 8006704:	4413      	add	r3, r2
 8006706:	4a18      	ldr	r2, [pc, #96]	; (8006768 <Audio_MAL_IRQHandler+0xf4>)
 8006708:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800670a:	4b16      	ldr	r3, [pc, #88]	; (8006764 <Audio_MAL_IRQHandler+0xf0>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <Audio_MAL_IRQHandler+0xf0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006716:	428b      	cmp	r3, r1
 8006718:	bf28      	it	cs
 800671a:	460b      	movcs	r3, r1
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	4a11      	ldr	r2, [pc, #68]	; (8006764 <Audio_MAL_IRQHandler+0xf0>)
 8006720:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8006722:	4b0e      	ldr	r3, [pc, #56]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2101      	movs	r1, #1
 8006728:	4618      	mov	r0, r3
 800672a:	f7f9 ff0b 	bl	8000544 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800672e:	e013      	b.n	8006758 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2100      	movs	r1, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f7f9 ff04 	bl	8000544 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800673c:	4b07      	ldr	r3, [pc, #28]	; (800675c <Audio_MAL_IRQHandler+0xe8>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <Audio_MAL_IRQHandler+0xec>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f7f9 ff88 	bl	800065c <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <Audio_MAL_IRQHandler+0xf4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fae6 	bl	8006d24 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8006758:	bf00      	nop
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200000e0 	.word	0x200000e0
 8006760:	200000e4 	.word	0x200000e4
 8006764:	200000d8 	.word	0x200000d8
 8006768:	20000710 	.word	0x20000710
 800676c:	20000750 	.word	0x20000750
 8006770:	0001fffe 	.word	0x0001fffe

08006774 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8006778:	f7ff ff7c 	bl	8006674 <Audio_MAL_IRQHandler>
}
 800677c:	bf00      	nop
 800677e:	bd80      	pop	{r7, pc}

08006780 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8006784:	f7ff ff76 	bl	8006674 <Audio_MAL_IRQHandler>
}
 8006788:	bf00      	nop
 800678a:	bd80      	pop	{r7, pc}

0800678c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8006790:	2102      	movs	r1, #2
 8006792:	480d      	ldr	r0, [pc, #52]	; (80067c8 <SPI3_IRQHandler+0x3c>)
 8006794:	f7fa fee7 	bl	8001566 <SPI_I2S_GetFlagStatus>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d011      	beq.n	80067c2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <SPI3_IRQHandler+0x40>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d106      	bne.n	80067b4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80067a6:	f000 fac8 	bl	8006d3a <EVAL_AUDIO_GetSampleCallBack>
 80067aa:	4603      	mov	r3, r0
 80067ac:	4619      	mov	r1, r3
 80067ae:	2004      	movs	r0, #4
 80067b0:	f7f9 fd80 	bl	80002b4 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80067b4:	f000 fac1 	bl	8006d3a <EVAL_AUDIO_GetSampleCallBack>
 80067b8:	4603      	mov	r3, r0
 80067ba:	4619      	mov	r1, r3
 80067bc:	4802      	ldr	r0, [pc, #8]	; (80067c8 <SPI3_IRQHandler+0x3c>)
 80067be:	f7fa fec3 	bl	8001548 <SPI_I2S_SendData>
  }
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40003c00 	.word	0x40003c00
 80067cc:	200000dc 	.word	0x200000dc

080067d0 <codec_init>:


#include "codec.h"

void codec_init()
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef PinInitStruct;
	GPIO_StructInit(&PinInitStruct);
 80067d6:	f107 0320 	add.w	r3, r7, #32
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa f834 	bl	8000848 <GPIO_StructInit>
	I2S_InitTypeDef I2S_InitType;

	I2C_InitTypeDef I2C_InitType;

	//Reset pin as GPIO
	PinInitStruct.GPIO_Pin = CODEC_RESET_PIN;
 80067e0:	2310      	movs	r3, #16
 80067e2:	623b      	str	r3, [r7, #32]
	PinInitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	PinInitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 80067ea:	2302      	movs	r3, #2
 80067ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	PinInitStruct.GPIO_OType = GPIO_OType_PP;
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	PinInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80067f6:	2302      	movs	r3, #2
 80067f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOB, ENABLE);
 80067fc:	2101      	movs	r1, #1
 80067fe:	200b      	movs	r0, #11
 8006800:	f7fa fb78 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(GPIOD, &PinInitStruct);
 8006804:	f107 0320 	add.w	r3, r7, #32
 8006808:	4619      	mov	r1, r3
 800680a:	4846      	ldr	r0, [pc, #280]	; (8006924 <codec_init+0x154>)
 800680c:	f7f9 ff8e 	bl	800072c <GPIO_Init>

	// I2C pins
	PinInitStruct.GPIO_Mode = GPIO_Mode_AF;
 8006810:	2302      	movs	r3, #2
 8006812:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	PinInitStruct.GPIO_OType = GPIO_OType_OD;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	PinInitStruct.GPIO_Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 800681c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006820:	623b      	str	r3, [r7, #32]
	PinInitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	PinInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8006828:	2302      	movs	r3, #2
 800682a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOB, &PinInitStruct);
 800682e:	f107 0320 	add.w	r3, r7, #32
 8006832:	4619      	mov	r1, r3
 8006834:	483c      	ldr	r0, [pc, #240]	; (8006928 <codec_init+0x158>)
 8006836:	f7f9 ff79 	bl	800072c <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 800683a:	2204      	movs	r2, #4
 800683c:	2106      	movs	r1, #6
 800683e:	483a      	ldr	r0, [pc, #232]	; (8006928 <codec_init+0x158>)
 8006840:	f7fa f83a 	bl	80008b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8006844:	2204      	movs	r2, #4
 8006846:	2109      	movs	r1, #9
 8006848:	4837      	ldr	r0, [pc, #220]	; (8006928 <codec_init+0x158>)
 800684a:	f7fa f835 	bl	80008b8 <GPIO_PinAFConfig>

	//enable I2S and I2C clocks
	//RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1 | RCC_APB1Periph_SPI3, ENABLE);
 800684e:	2101      	movs	r1, #1
 8006850:	f44f 1002 	mov.w	r0, #2129920	; 0x208000
 8006854:	f7fa fb6e 	bl	8000f34 <RCC_APB1PeriphClockCmd>
	RCC_PLLI2SCmd(ENABLE);
 8006858:	2001      	movs	r0, #1
 800685a:	f7fa fa93 	bl	8000d84 <RCC_PLLI2SCmd>

	// I2S pins
	PinInitStruct.GPIO_OType = GPIO_OType_PP;
 800685e:	2300      	movs	r3, #0
 8006860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	PinInitStruct.GPIO_Pin = I2S3_SCLK_PIN | I2S3_SD_PIN | I2S3_MCLK_PIN;
 8006864:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8006868:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOC, &PinInitStruct);
 800686a:	f107 0320 	add.w	r3, r7, #32
 800686e:	4619      	mov	r1, r3
 8006870:	482e      	ldr	r0, [pc, #184]	; (800692c <codec_init+0x15c>)
 8006872:	f7f9 ff5b 	bl	800072c <GPIO_Init>

	PinInitStruct.GPIO_Pin = I2S3_WS_PIN;
 8006876:	2310      	movs	r3, #16
 8006878:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &PinInitStruct);
 800687a:	f107 0320 	add.w	r3, r7, #32
 800687e:	4619      	mov	r1, r3
 8006880:	482b      	ldr	r0, [pc, #172]	; (8006930 <codec_init+0x160>)
 8006882:	f7f9 ff53 	bl	800072c <GPIO_Init>

	//prepare output ports for alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_SPI3);
 8006886:	2206      	movs	r2, #6
 8006888:	2104      	movs	r1, #4
 800688a:	4829      	ldr	r0, [pc, #164]	; (8006930 <codec_init+0x160>)
 800688c:	f7fa f814 	bl	80008b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_SPI3);
 8006890:	2206      	movs	r2, #6
 8006892:	2107      	movs	r1, #7
 8006894:	4825      	ldr	r0, [pc, #148]	; (800692c <codec_init+0x15c>)
 8006896:	f7fa f80f 	bl	80008b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SPI3);
 800689a:	2206      	movs	r2, #6
 800689c:	210a      	movs	r1, #10
 800689e:	4823      	ldr	r0, [pc, #140]	; (800692c <codec_init+0x15c>)
 80068a0:	f7fa f80a 	bl	80008b8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SPI3);
 80068a4:	2206      	movs	r2, #6
 80068a6:	210c      	movs	r1, #12
 80068a8:	4820      	ldr	r0, [pc, #128]	; (800692c <codec_init+0x15c>)
 80068aa:	f7fa f805 	bl	80008b8 <GPIO_PinAFConfig>


	//keep Codec off for now
	GPIO_ResetBits(GPIOD, CODEC_RESET_PIN);
 80068ae:	2110      	movs	r1, #16
 80068b0:	481c      	ldr	r0, [pc, #112]	; (8006924 <codec_init+0x154>)
 80068b2:	f7f9 fff2 	bl	800089a <GPIO_ResetBits>


	// configure I2S port
	SPI_I2S_DeInit(CODEC_I2S);
 80068b6:	481f      	ldr	r0, [pc, #124]	; (8006934 <codec_init+0x164>)
 80068b8:	f7fa fce2 	bl	8001280 <SPI_I2S_DeInit>
	I2S_InitType.I2S_AudioFreq = I2S_AudioFreq_44k; //I2S_AudioFreq_48k;
 80068bc:	f64a 4344 	movw	r3, #44100	; 0xac44
 80068c0:	61bb      	str	r3, [r7, #24]
	I2S_InitType.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 80068c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c6:	82fb      	strh	r3, [r7, #22]
	I2S_InitType.I2S_DataFormat = I2S_DataFormat_16b;
 80068c8:	2300      	movs	r3, #0
 80068ca:	82bb      	strh	r3, [r7, #20]
	I2S_InitType.I2S_Mode = I2S_Mode_MasterTx;
 80068cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d0:	823b      	strh	r3, [r7, #16]
	I2S_InitType.I2S_Standard = I2S_Standard_Phillips;
 80068d2:	2300      	movs	r3, #0
 80068d4:	827b      	strh	r3, [r7, #18]
	I2S_InitType.I2S_CPOL = I2S_CPOL_Low;
 80068d6:	2300      	movs	r3, #0
 80068d8:	83bb      	strh	r3, [r7, #28]

	I2S_Init(CODEC_I2S, &I2S_InitType);
 80068da:	f107 0310 	add.w	r3, r7, #16
 80068de:	4619      	mov	r1, r3
 80068e0:	4814      	ldr	r0, [pc, #80]	; (8006934 <codec_init+0x164>)
 80068e2:	f7fa fd3b 	bl	800135c <I2S_Init>
	//I2S_Cmd(CODEC_I2S, ENABLE);


	// configure I2C port
	I2C_DeInit(CODEC_I2C);
 80068e6:	4814      	ldr	r0, [pc, #80]	; (8006938 <codec_init+0x168>)
 80068e8:	f7fa f830 	bl	800094c <I2C_DeInit>
	I2C_InitType.I2C_ClockSpeed = 100000;
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <codec_init+0x16c>)
 80068ee:	603b      	str	r3, [r7, #0]
	I2C_InitType.I2C_Mode = I2C_Mode_I2C;
 80068f0:	2300      	movs	r3, #0
 80068f2:	80bb      	strh	r3, [r7, #4]
	I2C_InitType.I2C_OwnAddress1 = CORE_I2C_ADDRESS;
 80068f4:	2333      	movs	r3, #51	; 0x33
 80068f6:	813b      	strh	r3, [r7, #8]
	I2C_InitType.I2C_Ack = I2C_Ack_Enable;
 80068f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068fc:	817b      	strh	r3, [r7, #10]
	I2C_InitType.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80068fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006902:	81bb      	strh	r3, [r7, #12]
	I2C_InitType.I2C_DutyCycle = I2C_DutyCycle_2;
 8006904:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8006908:	80fb      	strh	r3, [r7, #6]

	I2C_Cmd(CODEC_I2C, ENABLE);
 800690a:	2101      	movs	r1, #1
 800690c:	480a      	ldr	r0, [pc, #40]	; (8006938 <codec_init+0x168>)
 800690e:	f7fa f919 	bl	8000b44 <I2C_Cmd>
	I2C_Init(CODEC_I2C, &I2C_InitType);
 8006912:	463b      	mov	r3, r7
 8006914:	4619      	mov	r1, r3
 8006916:	4808      	ldr	r0, [pc, #32]	; (8006938 <codec_init+0x168>)
 8006918:	f7fa f852 	bl	80009c0 <I2C_Init>


}
 800691c:	bf00      	nop
 800691e:	3728      	adds	r7, #40	; 0x28
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40020c00 	.word	0x40020c00
 8006928:	40020400 	.word	0x40020400
 800692c:	40020800 	.word	0x40020800
 8006930:	40020000 	.word	0x40020000
 8006934:	40003c00 	.word	0x40003c00
 8006938:	40005400 	.word	0x40005400
 800693c:	000186a0 	.word	0x000186a0

08006940 <codec_ctrl_init>:


void codec_ctrl_init()
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
	uint32_t delaycount;
	uint8_t CodecCommandBuffer[5];

	uint8_t regValue = 0xFF;
 8006946:	23ff      	movs	r3, #255	; 0xff
 8006948:	72fb      	strb	r3, [r7, #11]

	GPIO_SetBits(GPIOD, CODEC_RESET_PIN);
 800694a:	2110      	movs	r1, #16
 800694c:	4854      	ldr	r0, [pc, #336]	; (8006aa0 <codec_ctrl_init+0x160>)
 800694e:	f7f9 ff95 	bl	800087c <GPIO_SetBits>
	delaycount = 1000000;
 8006952:	4b54      	ldr	r3, [pc, #336]	; (8006aa4 <codec_ctrl_init+0x164>)
 8006954:	60fb      	str	r3, [r7, #12]
	while (delaycount > 0)
 8006956:	e002      	b.n	800695e <codec_ctrl_init+0x1e>
	{
		delaycount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3b01      	subs	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]
	while (delaycount > 0)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f9      	bne.n	8006958 <codec_ctrl_init+0x18>
	}
	//keep codec OFF
	CodecCommandBuffer[0] = CODEC_MAP_PLAYBACK_CTRL1;
 8006964:	230d      	movs	r3, #13
 8006966:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x01;
 8006968:	2301      	movs	r3, #1
 800696a:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 800696c:	1d3b      	adds	r3, r7, #4
 800696e:	2102      	movs	r1, #2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 f899 	bl	8006aa8 <send_codec_ctrl>

	//begin initialization sequence (p. 32)
	CodecCommandBuffer[0] = 0x00;
 8006976:	2300      	movs	r3, #0
 8006978:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x99;
 800697a:	2399      	movs	r3, #153	; 0x99
 800697c:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	2102      	movs	r1, #2
 8006982:	4618      	mov	r0, r3
 8006984:	f000 f890 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x47;
 8006988:	2347      	movs	r3, #71	; 0x47
 800698a:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x80;
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006990:	1d3b      	adds	r3, r7, #4
 8006992:	2102      	movs	r1, #2
 8006994:	4618      	mov	r0, r3
 8006996:	f000 f887 	bl	8006aa8 <send_codec_ctrl>

	regValue = read_codec_register(0x32);
 800699a:	2032      	movs	r0, #50	; 0x32
 800699c:	f000 f8e0 	bl	8006b60 <read_codec_register>
 80069a0:	4603      	mov	r3, r0
 80069a2:	72fb      	strb	r3, [r7, #11]

	CodecCommandBuffer[0] = 0x32;
 80069a4:	2332      	movs	r3, #50	; 0x32
 80069a6:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = regValue | 0x80;
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	2102      	movs	r1, #2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f876 	bl	8006aa8 <send_codec_ctrl>

	regValue = read_codec_register(0x32);
 80069bc:	2032      	movs	r0, #50	; 0x32
 80069be:	f000 f8cf 	bl	8006b60 <read_codec_register>
 80069c2:	4603      	mov	r3, r0
 80069c4:	72fb      	strb	r3, [r7, #11]

	CodecCommandBuffer[0] = 0x32;
 80069c6:	2332      	movs	r3, #50	; 0x32
 80069c8:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = regValue & (~0x80);
 80069ca:	7afb      	ldrb	r3, [r7, #11]
 80069cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	2102      	movs	r1, #2
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 f865 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x00;
 80069de:	2300      	movs	r3, #0
 80069e0:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x00;
 80069e2:	2300      	movs	r3, #0
 80069e4:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	2102      	movs	r1, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f85c 	bl	8006aa8 <send_codec_ctrl>
	//end of initialization sequence

	CodecCommandBuffer[0] = CODEC_MAP_PWR_CTRL2;
 80069f0:	2304      	movs	r3, #4
 80069f2:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0xAF;
 80069f4:	23af      	movs	r3, #175	; 0xaf
 80069f6:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	2102      	movs	r1, #2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 f853 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_PLAYBACK_CTRL1;
 8006a02:	230d      	movs	r3, #13
 8006a04:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x70;
 8006a06:	2370      	movs	r3, #112	; 0x70
 8006a08:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f84a 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_CLK_CTRL;
 8006a14:	2305      	movs	r3, #5
 8006a16:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x81; //auto detect clock
 8006a18:	2381      	movs	r3, #129	; 0x81
 8006a1a:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006a1c:	1d3b      	adds	r3, r7, #4
 8006a1e:	2102      	movs	r1, #2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f841 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_IF_CTRL1;
 8006a26:	2306      	movs	r3, #6
 8006a28:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x07;
 8006a2a:	2307      	movs	r3, #7
 8006a2c:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006a2e:	1d3b      	adds	r3, r7, #4
 8006a30:	2102      	movs	r1, #2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f838 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x0A;
 8006a38:	230a      	movs	r3, #10
 8006a3a:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x00;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006a40:	1d3b      	adds	r3, r7, #4
 8006a42:	2102      	movs	r1, #2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f82f 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x27;
 8006a4a:	2327      	movs	r3, #39	; 0x27
 8006a4c:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x00;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	2102      	movs	r1, #2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f826 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x1A | CODEC_MAPBYTE_INC;
 8006a5c:	239a      	movs	r3, #154	; 0x9a
 8006a5e:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x0A;
 8006a60:	230a      	movs	r3, #10
 8006a62:	717b      	strb	r3, [r7, #5]
	CodecCommandBuffer[2] = 0x0A;
 8006a64:	230a      	movs	r3, #10
 8006a66:	71bb      	strb	r3, [r7, #6]
	send_codec_ctrl(CodecCommandBuffer, 3);
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	2103      	movs	r1, #3
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 f81b 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = 0x1F;
 8006a72:	231f      	movs	r3, #31
 8006a74:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x0F;
 8006a76:	230f      	movs	r3, #15
 8006a78:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f812 	bl	8006aa8 <send_codec_ctrl>

	CodecCommandBuffer[0] = CODEC_MAP_PWR_CTRL1;
 8006a84:	2302      	movs	r3, #2
 8006a86:	713b      	strb	r3, [r7, #4]
	CodecCommandBuffer[1] = 0x9E;
 8006a88:	239e      	movs	r3, #158	; 0x9e
 8006a8a:	717b      	strb	r3, [r7, #5]
	send_codec_ctrl(CodecCommandBuffer, 2);
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	2102      	movs	r1, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 f809 	bl	8006aa8 <send_codec_ctrl>

}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40020c00 	.word	0x40020c00
 8006aa4:	000f4240 	.word	0x000f4240

08006aa8 <send_codec_ctrl>:

void send_codec_ctrl(uint8_t controlBytes[], uint8_t numBytes)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
	uint8_t bytesSent=0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]

	while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8006ab8:	bf00      	nop
 8006aba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006abe:	4823      	ldr	r0, [pc, #140]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006ac0:	f7fa f92c 	bl	8000d1c <I2C_GetFlagStatus>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f7      	bne.n	8006aba <send_codec_ctrl+0x12>
	{
		//just wait until no longer busy
	}

	I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8006aca:	2101      	movs	r1, #1
 8006acc:	481f      	ldr	r0, [pc, #124]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006ace:	f7fa f859 	bl	8000b84 <I2C_GenerateSTART>
	while (!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_SB))
 8006ad2:	bf00      	nop
 8006ad4:	491e      	ldr	r1, [pc, #120]	; (8006b50 <send_codec_ctrl+0xa8>)
 8006ad6:	481d      	ldr	r0, [pc, #116]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006ad8:	f7fa f920 	bl	8000d1c <I2C_GetFlagStatus>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f8      	beq.n	8006ad4 <send_codec_ctrl+0x2c>
	{
		//wait for generation of start condition
	}
	I2C_Send7bitAddress(CODEC_I2C, CODEC_I2C_ADDRESS, I2C_Direction_Transmitter);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2194      	movs	r1, #148	; 0x94
 8006ae6:	4819      	ldr	r0, [pc, #100]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006ae8:	f7fa f88c 	bl	8000c04 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8006aec:	bf00      	nop
 8006aee:	4919      	ldr	r1, [pc, #100]	; (8006b54 <send_codec_ctrl+0xac>)
 8006af0:	4816      	ldr	r0, [pc, #88]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006af2:	f7fa f8e3 	bl	8000cbc <I2C_CheckEvent>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f8      	beq.n	8006aee <send_codec_ctrl+0x46>
	{
		//wait for end of address transmission
	}
	while (bytesSent < numBytes)
 8006afc:	e012      	b.n	8006b24 <send_codec_ctrl+0x7c>
	{
		I2C_SendData(CODEC_I2C, controlBytes[bytesSent]);
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	4810      	ldr	r0, [pc, #64]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006b0a:	f7fa f8b9 	bl	8000c80 <I2C_SendData>
		bytesSent++;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	3301      	adds	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
		while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8006b14:	bf00      	nop
 8006b16:	4910      	ldr	r1, [pc, #64]	; (8006b58 <send_codec_ctrl+0xb0>)
 8006b18:	480c      	ldr	r0, [pc, #48]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006b1a:	f7fa f8cf 	bl	8000cbc <I2C_CheckEvent>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f8      	beq.n	8006b16 <send_codec_ctrl+0x6e>
	while (bytesSent < numBytes)
 8006b24:	7bfa      	ldrb	r2, [r7, #15]
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d3e8      	bcc.n	8006afe <send_codec_ctrl+0x56>
		{
			//wait for transmission of byte
		}
	}
	while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8006b2c:	bf00      	nop
 8006b2e:	490b      	ldr	r1, [pc, #44]	; (8006b5c <send_codec_ctrl+0xb4>)
 8006b30:	4806      	ldr	r0, [pc, #24]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006b32:	f7fa f8f3 	bl	8000d1c <I2C_GetFlagStatus>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f8      	beq.n	8006b2e <send_codec_ctrl+0x86>
	{
	    //wait until it's finished sending before creating STOP
	}
	I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	4803      	ldr	r0, [pc, #12]	; (8006b4c <send_codec_ctrl+0xa4>)
 8006b40:	f7fa f840 	bl	8000bc4 <I2C_GenerateSTOP>

}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40005400 	.word	0x40005400
 8006b50:	10000001 	.word	0x10000001
 8006b54:	00070082 	.word	0x00070082
 8006b58:	00070080 	.word	0x00070080
 8006b5c:	10000004 	.word	0x10000004

08006b60 <read_codec_register>:

uint8_t read_codec_register(uint8_t mapbyte)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedByte = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]

	while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8006b6e:	bf00      	nop
 8006b70:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006b74:	4835      	ldr	r0, [pc, #212]	; (8006c4c <read_codec_register+0xec>)
 8006b76:	f7fa f8d1 	bl	8000d1c <I2C_GetFlagStatus>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f7      	bne.n	8006b70 <read_codec_register+0x10>
	{
		//just wait until no longer busy
	}

	I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8006b80:	2101      	movs	r1, #1
 8006b82:	4832      	ldr	r0, [pc, #200]	; (8006c4c <read_codec_register+0xec>)
 8006b84:	f7f9 fffe 	bl	8000b84 <I2C_GenerateSTART>
	while (!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_SB))
 8006b88:	bf00      	nop
 8006b8a:	4931      	ldr	r1, [pc, #196]	; (8006c50 <read_codec_register+0xf0>)
 8006b8c:	482f      	ldr	r0, [pc, #188]	; (8006c4c <read_codec_register+0xec>)
 8006b8e:	f7fa f8c5 	bl	8000d1c <I2C_GetFlagStatus>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f8      	beq.n	8006b8a <read_codec_register+0x2a>
	{
		//wait for generation of start condition
	}

	I2C_Send7bitAddress(CODEC_I2C, CODEC_I2C_ADDRESS, I2C_Direction_Transmitter);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2194      	movs	r1, #148	; 0x94
 8006b9c:	482b      	ldr	r0, [pc, #172]	; (8006c4c <read_codec_register+0xec>)
 8006b9e:	f7fa f831 	bl	8000c04 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8006ba2:	bf00      	nop
 8006ba4:	492b      	ldr	r1, [pc, #172]	; (8006c54 <read_codec_register+0xf4>)
 8006ba6:	4829      	ldr	r0, [pc, #164]	; (8006c4c <read_codec_register+0xec>)
 8006ba8:	f7fa f888 	bl	8000cbc <I2C_CheckEvent>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f8      	beq.n	8006ba4 <read_codec_register+0x44>
	{
		//wait for end of address transmission
	}

	I2C_SendData(CODEC_I2C, mapbyte); //sets the transmitter address
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4825      	ldr	r0, [pc, #148]	; (8006c4c <read_codec_register+0xec>)
 8006bb8:	f7fa f862 	bl	8000c80 <I2C_SendData>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8006bbc:	bf00      	nop
 8006bbe:	4926      	ldr	r1, [pc, #152]	; (8006c58 <read_codec_register+0xf8>)
 8006bc0:	4822      	ldr	r0, [pc, #136]	; (8006c4c <read_codec_register+0xec>)
 8006bc2:	f7fa f87b 	bl	8000cbc <I2C_CheckEvent>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f8      	beq.n	8006bbe <read_codec_register+0x5e>
	{
		//wait for transmission of byte
	}

	I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	481f      	ldr	r0, [pc, #124]	; (8006c4c <read_codec_register+0xec>)
 8006bd0:	f7f9 fff8 	bl	8000bc4 <I2C_GenerateSTOP>

	while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8006bd4:	bf00      	nop
 8006bd6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006bda:	481c      	ldr	r0, [pc, #112]	; (8006c4c <read_codec_register+0xec>)
 8006bdc:	f7fa f89e 	bl	8000d1c <I2C_GetFlagStatus>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f7      	bne.n	8006bd6 <read_codec_register+0x76>
	{
		//just wait until no longer busy
	}

	I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);
 8006be6:	2100      	movs	r1, #0
 8006be8:	4818      	ldr	r0, [pc, #96]	; (8006c4c <read_codec_register+0xec>)
 8006bea:	f7fa f829 	bl	8000c40 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8006bee:	2101      	movs	r1, #1
 8006bf0:	4816      	ldr	r0, [pc, #88]	; (8006c4c <read_codec_register+0xec>)
 8006bf2:	f7f9 ffc7 	bl	8000b84 <I2C_GenerateSTART>
	while (!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_SB))
 8006bf6:	bf00      	nop
 8006bf8:	4915      	ldr	r1, [pc, #84]	; (8006c50 <read_codec_register+0xf0>)
 8006bfa:	4814      	ldr	r0, [pc, #80]	; (8006c4c <read_codec_register+0xec>)
 8006bfc:	f7fa f88e 	bl	8000d1c <I2C_GetFlagStatus>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f8      	beq.n	8006bf8 <read_codec_register+0x98>
	{
		//wait for generation of start condition
	}

	I2C_Send7bitAddress(CODEC_I2C, CODEC_I2C_ADDRESS, I2C_Direction_Receiver);
 8006c06:	2201      	movs	r2, #1
 8006c08:	2194      	movs	r1, #148	; 0x94
 8006c0a:	4810      	ldr	r0, [pc, #64]	; (8006c4c <read_codec_register+0xec>)
 8006c0c:	f7f9 fffa 	bl	8000c04 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 8006c10:	bf00      	nop
 8006c12:	4912      	ldr	r1, [pc, #72]	; (8006c5c <read_codec_register+0xfc>)
 8006c14:	480d      	ldr	r0, [pc, #52]	; (8006c4c <read_codec_register+0xec>)
 8006c16:	f7fa f851 	bl	8000cbc <I2C_CheckEvent>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f8      	beq.n	8006c12 <read_codec_register+0xb2>
	{
		//wait for end of address transmission
	}

	while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_RECEIVED))
 8006c20:	bf00      	nop
 8006c22:	490f      	ldr	r1, [pc, #60]	; (8006c60 <read_codec_register+0x100>)
 8006c24:	4809      	ldr	r0, [pc, #36]	; (8006c4c <read_codec_register+0xec>)
 8006c26:	f7fa f849 	bl	8000cbc <I2C_CheckEvent>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0f8      	beq.n	8006c22 <read_codec_register+0xc2>
	{
		//wait until byte arrived
	}
	receivedByte = I2C_ReceiveData(CODEC_I2C);
 8006c30:	4806      	ldr	r0, [pc, #24]	; (8006c4c <read_codec_register+0xec>)
 8006c32:	f7fa f835 	bl	8000ca0 <I2C_ReceiveData>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]

	I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4803      	ldr	r0, [pc, #12]	; (8006c4c <read_codec_register+0xec>)
 8006c3e:	f7f9 ffc1 	bl	8000bc4 <I2C_GenerateSTOP>

	return receivedByte;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40005400 	.word	0x40005400
 8006c50:	10000001 	.word	0x10000001
 8006c54:	00070082 	.word	0x00070082
 8006c58:	00070080 	.word	0x00070080
 8006c5c:	00030002 	.word	0x00030002
 8006c60:	00030040 	.word	0x00030040

08006c64 <main>:
**===========================================================================
*/
static FATFS FatFs;
static FIL fp;
int main(void)
{
 8006c64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
//
	SystemInit();
 8006c6c:	f000 f928 	bl	8006ec0 <SystemInit>
	STM_EVAL_LEDInit(LED_GREEN);
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7ff fca1 	bl	80065b8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED_RED);
 8006c76:	2002      	movs	r0, #2
 8006c78:	f7ff fc9e 	bl	80065b8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED_BLUE);
 8006c7c:	2003      	movs	r0, #3
 8006c7e:	f7ff fc9b 	bl	80065b8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED_ORANGE);
 8006c82:	2001      	movs	r0, #1
 8006c84:	f7ff fc98 	bl	80065b8 <STM_EVAL_LEDInit>

	FRESULT res = init_sd(&FatFs);  // initialize SD card
 8006c88:	4823      	ldr	r0, [pc, #140]	; (8006d18 <main+0xb4>)
 8006c8a:	f000 f9cb 	bl	8007024 <init_sd>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
	const char* filename = "marimba/mA.wav";
 8006c92:	4b22      	ldr	r3, [pc, #136]	; (8006d1c <main+0xb8>)
 8006c94:	613b      	str	r3, [r7, #16]
	uint32_t buffer_size = get_wav_size(&fp, filename);
 8006c96:	6939      	ldr	r1, [r7, #16]
 8006c98:	4821      	ldr	r0, [pc, #132]	; (8006d20 <main+0xbc>)
 8006c9a:	f000 face 	bl	800723a <get_wav_size>
 8006c9e:	60f8      	str	r0, [r7, #12]
	uint16_t buffer[buffer_size];
 8006ca0:	68f9      	ldr	r1, [r7, #12]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	60bb      	str	r3, [r7, #8]
 8006ca8:	460a      	mov	r2, r1
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8006cb2:	ea49 7912 	orr.w	r9, r9, r2, lsr #28
 8006cb6:	ea4f 1802 	mov.w	r8, r2, lsl #4
 8006cba:	460a      	mov	r2, r1
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	011d      	lsls	r5, r3, #4
 8006cc2:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
 8006cc6:	0114      	lsls	r4, r2, #4
 8006cc8:	004b      	lsls	r3, r1, #1
 8006cca:	3301      	adds	r3, #1
 8006ccc:	3307      	adds	r3, #7
 8006cce:	08db      	lsrs	r3, r3, #3
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	ebad 0d03 	sub.w	sp, sp, r3
 8006cd6:	466b      	mov	r3, sp
 8006cd8:	3301      	adds	r3, #1
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	607b      	str	r3, [r7, #4]
    res = read_wav_file(&fp, filename, buffer, buffer_size);  // load in PCM data
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6939      	ldr	r1, [r7, #16]
 8006ce6:	480e      	ldr	r0, [pc, #56]	; (8006d20 <main+0xbc>)
 8006ce8:	f000 fac8 	bl	800727c <read_wav_file>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]
	if(res == FR_OK) {
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <main+0xa8>
		STM_EVAL_LEDOn(LED_GREEN);
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f7ff fc8c 	bl	8006614 <STM_EVAL_LEDOn>
		playBuffer(buffer, buffer_size);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68f9      	ldr	r1, [r7, #12]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f84f 	bl	8006da4 <playBuffer>
		STM_EVAL_LEDOff(LED_GREEN);
 8006d06:	2000      	movs	r0, #0
 8006d08:	f7ff fc9c 	bl	8006644 <STM_EVAL_LEDOff>
	}
	deinit_sd();  // de-initialize SD card
 8006d0c:	f000 f9ae 	bl	800706c <deinit_sd>
    STM_EVAL_LEDOn(LED_RED);
 8006d10:	2002      	movs	r0, #2
 8006d12:	f7ff fc7f 	bl	8006614 <STM_EVAL_LEDOn>

	/* Infinite loop */
	while (1) {}
 8006d16:	e7fe      	b.n	8006d16 <main+0xb2>
 8006d18:	20000204 	.word	0x20000204
 8006d1c:	080075bc 	.word	0x080075bc
 8006d20:	20000438 	.word	0x20000438

08006d24 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8006d2e:	bf00      	nop
}
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8006d3a:	b480      	push	{r7}
 8006d3c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8006d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <initAudio>:
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "math.h"


void initAudio() {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
//	SystemInit();
	//enables GPIO clock for PortD
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8006d50:	2101      	movs	r1, #1
 8006d52:	2008      	movs	r0, #8
 8006d54:	f7fa f8ce 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <initAudio+0x4c>)
 8006d5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d5e:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <initAudio+0x4c>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <initAudio+0x4c>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <initAudio+0x4c>)
 8006d6e:	2202      	movs	r2, #2
 8006d70:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8006d72:	4909      	ldr	r1, [pc, #36]	; (8006d98 <initAudio+0x4c>)
 8006d74:	4809      	ldr	r0, [pc, #36]	; (8006d9c <initAudio+0x50>)
 8006d76:	f7f9 fcd9 	bl	800072c <GPIO_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	2004      	movs	r0, #4
 8006d7e:	f7fa f8b9 	bl	8000ef4 <RCC_AHB1PeriphClockCmd>

	codec_init();
 8006d82:	f7ff fd25 	bl	80067d0 <codec_init>
	codec_ctrl_init();
 8006d86:	f7ff fddb 	bl	8006940 <codec_ctrl_init>

	I2S_Cmd(CODEC_I2S, ENABLE);
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4804      	ldr	r0, [pc, #16]	; (8006da0 <initAudio+0x54>)
 8006d8e:	f7fa fbbb 	bl	8001508 <I2S_Cmd>
}
 8006d92:	bf00      	nop
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2000078c 	.word	0x2000078c
 8006d9c:	40020c00 	.word	0x40020c00
 8006da0:	40003c00 	.word	0x40003c00

08006da4 <playBuffer>:


void playBuffer(const uint16_t* buffer, uint32_t buffer_size) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
	initAudio();
 8006dae:	f7ff ffcd 	bl	8006d4c <initAudio>
	int i = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
	uint32_t sampleCounter = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	613b      	str	r3, [r7, #16]
	uint16_t sample = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	81fb      	strh	r3, [r7, #14]
	    while(1)
	    {

	    	if (SPI_I2S_GetFlagStatus(CODEC_I2S, SPI_I2S_FLAG_TXE))
 8006dbe:	2102      	movs	r1, #2
 8006dc0:	4814      	ldr	r0, [pc, #80]	; (8006e14 <playBuffer+0x70>)
 8006dc2:	f7fa fbd0 	bl	8001566 <SPI_I2S_GetFlagStatus>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01c      	beq.n	8006e06 <playBuffer+0x62>

	    	{
	    		SPI_I2S_SendData(CODEC_I2S, sample);
 8006dcc:	89fb      	ldrh	r3, [r7, #14]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4810      	ldr	r0, [pc, #64]	; (8006e14 <playBuffer+0x70>)
 8006dd2:	f7fa fbb9 	bl	8001548 <SPI_I2S_SendData>

	    		//only update on every second sample to insure that L & R ch. have the same sample value
	    		if (sampleCounter & 0x00000001)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00f      	beq.n	8006e00 <playBuffer+0x5c>
	    		{
	    			if (i < buffer_size){
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d209      	bcs.n	8006dfc <playBuffer+0x58>
	    				sample = buffer[i];
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	81fb      	strh	r3, [r7, #14]
	    				i++;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3301      	adds	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e001      	b.n	8006e00 <playBuffer+0x5c>
	    			}else{
	    				i=0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	617b      	str	r3, [r7, #20]
	    			}
	    		}
	    		sampleCounter++;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	3301      	adds	r3, #1
 8006e04:	613b      	str	r3, [r7, #16]
	    	}

	    	if (sampleCounter == 96000)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	4a03      	ldr	r2, [pc, #12]	; (8006e18 <playBuffer+0x74>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d1d7      	bne.n	8006dbe <playBuffer+0x1a>
	    	{
	    		sampleCounter = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
	    	if (SPI_I2S_GetFlagStatus(CODEC_I2S, SPI_I2S_FLAG_TXE))
 8006e12:	e7d4      	b.n	8006dbe <playBuffer+0x1a>
 8006e14:	40003c00 	.word	0x40003c00
 8006e18:	00017700 	.word	0x00017700

08006e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e22:	e003      	b.n	8006e2c <LoopCopyDataInit>

08006e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e2a:	3104      	adds	r1, #4

08006e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e2c:	480b      	ldr	r0, [pc, #44]	; (8006e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e34:	d3f6      	bcc.n	8006e24 <CopyDataInit>
  ldr  r2, =_sbss
 8006e36:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e38:	e002      	b.n	8006e40 <LoopFillZerobss>

08006e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e3c:	f842 3b04 	str.w	r3, [r2], #4

08006e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e44:	d3f9      	bcc.n	8006e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e46:	f000 f83b 	bl	8006ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e4a:	f000 fa51 	bl	80072f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e4e:	f7ff ff09 	bl	8006c64 <main>
  bx  lr    
 8006e52:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006e58:	08007b64 	.word	0x08007b64
  ldr  r0, =_sdata
 8006e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006e60:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8006e64:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8006e68:	20000798 	.word	0x20000798

08006e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e6c:	e7fe      	b.n	8006e6c <ADC_IRQHandler>

08006e6e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	af00      	add	r7, sp, #0
}
 8006e72:	bf00      	nop
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006e80:	e7fe      	b.n	8006e80 <HardFault_Handler+0x4>

08006e82 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006e82:	b480      	push	{r7}
 8006e84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006e86:	e7fe      	b.n	8006e86 <MemManage_Handler+0x4>

08006e88 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006e8c:	e7fe      	b.n	8006e8c <BusFault_Handler+0x4>

08006e8e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006e92:	e7fe      	b.n	8006e92 <UsageFault_Handler+0x4>

08006e94 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
}
 8006e98:	bf00      	nop
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	af00      	add	r7, sp, #0
}
 8006ea6:	bf00      	nop
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ec4:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <SystemInit+0x60>)
 8006ec6:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <SystemInit+0x60>)
 8006ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006ed4:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <SystemInit+0x64>)
 8006ed6:	4b13      	ldr	r3, [pc, #76]	; (8006f24 <SystemInit+0x64>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006ee0:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <SystemInit+0x64>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006ee6:	4a0f      	ldr	r2, [pc, #60]	; (8006f24 <SystemInit+0x64>)
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <SystemInit+0x64>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <SystemInit+0x64>)
 8006ef8:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <SystemInit+0x68>)
 8006efa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006efc:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <SystemInit+0x64>)
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <SystemInit+0x64>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <SystemInit+0x64>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8006f0e:	f000 f80d 	bl	8006f2c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006f12:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <SystemInit+0x60>)
 8006f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f18:	609a      	str	r2, [r3, #8]
#endif
}
 8006f1a:	bf00      	nop
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	e000ed00 	.word	0xe000ed00
 8006f24:	40023800 	.word	0x40023800
 8006f28:	24003010 	.word	0x24003010

08006f2c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	2300      	movs	r3, #0
 8006f38:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8006f3a:	4a36      	ldr	r2, [pc, #216]	; (8007014 <SetSysClock+0xe8>)
 8006f3c:	4b35      	ldr	r3, [pc, #212]	; (8007014 <SetSysClock+0xe8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f44:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8006f46:	4b33      	ldr	r3, [pc, #204]	; (8007014 <SetSysClock+0xe8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3301      	adds	r3, #1
 8006f54:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <SetSysClock+0x38>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006f62:	d1f0      	bne.n	8006f46 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006f64:	4b2b      	ldr	r3, [pc, #172]	; (8007014 <SetSysClock+0xe8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8006f70:	2301      	movs	r3, #1
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	e001      	b.n	8006f7a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8006f76:	2300      	movs	r3, #0
 8006f78:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d142      	bne.n	8007006 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8006f80:	4a24      	ldr	r2, [pc, #144]	; (8007014 <SetSysClock+0xe8>)
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <SetSysClock+0xe8>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <SetSysClock+0xec>)
 8006f8e:	4b22      	ldr	r3, [pc, #136]	; (8007018 <SetSysClock+0xec>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f96:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8006f98:	4a1e      	ldr	r2, [pc, #120]	; (8007014 <SetSysClock+0xe8>)
 8006f9a:	4b1e      	ldr	r3, [pc, #120]	; (8007014 <SetSysClock+0xe8>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8006fa0:	4a1c      	ldr	r2, [pc, #112]	; (8007014 <SetSysClock+0xe8>)
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <SetSysClock+0xe8>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006faa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006fac:	4a19      	ldr	r2, [pc, #100]	; (8007014 <SetSysClock+0xe8>)
 8006fae:	4b19      	ldr	r3, [pc, #100]	; (8007014 <SetSysClock+0xe8>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8006fb6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006fb8:	4b16      	ldr	r3, [pc, #88]	; (8007014 <SetSysClock+0xe8>)
 8006fba:	4a18      	ldr	r2, [pc, #96]	; (800701c <SetSysClock+0xf0>)
 8006fbc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <SetSysClock+0xe8>)
 8006fc0:	4b14      	ldr	r3, [pc, #80]	; (8007014 <SetSysClock+0xe8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fc8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006fca:	bf00      	nop
 8006fcc:	4b11      	ldr	r3, [pc, #68]	; (8007014 <SetSysClock+0xe8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f9      	beq.n	8006fcc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8006fd8:	4b11      	ldr	r3, [pc, #68]	; (8007020 <SetSysClock+0xf4>)
 8006fda:	f240 6205 	movw	r2, #1541	; 0x605
 8006fde:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006fe0:	4a0c      	ldr	r2, [pc, #48]	; (8007014 <SetSysClock+0xe8>)
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <SetSysClock+0xe8>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f023 0303 	bic.w	r3, r3, #3
 8006fea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006fec:	4a09      	ldr	r2, [pc, #36]	; (8007014 <SetSysClock+0xe8>)
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <SetSysClock+0xe8>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f043 0302 	orr.w	r3, r3, #2
 8006ff6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8006ff8:	bf00      	nop
 8006ffa:	4b06      	ldr	r3, [pc, #24]	; (8007014 <SetSysClock+0xe8>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 030c 	and.w	r3, r3, #12
 8007002:	2b08      	cmp	r3, #8
 8007004:	d1f9      	bne.n	8006ffa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40023800 	.word	0x40023800
 8007018:	40007000 	.word	0x40007000
 800701c:	07405408 	.word	0x07405408
 8007020:	40023c00 	.word	0x40023c00

08007024 <init_sd>:
// private variables

static uint8_t mount_state = 0;  // 1 means successfully mounted card, 0 means unsuccessful
uint16_t num_tries = 50;  // number of times filesystem operations should be retried before giving up

FRESULT init_sd(FATFS *FatFs) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
	if(mount_state == 0) {
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <init_sd+0x40>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10f      	bne.n	8007058 <init_sd+0x34>
		FRESULT res = f_mount(FatFs, "", 1);
 8007038:	2201      	movs	r2, #1
 800703a:	490b      	ldr	r1, [pc, #44]	; (8007068 <init_sd+0x44>)
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fe fbf7 	bl	8005830 <f_mount>
 8007042:	4603      	mov	r3, r0
 8007044:	73bb      	strb	r3, [r7, #14]
		mount_state = res == FR_OK ? 1 : 0;
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	2b00      	cmp	r3, #0
 800704a:	bf0c      	ite	eq
 800704c:	2301      	moveq	r3, #1
 800704e:	2300      	movne	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	4b03      	ldr	r3, [pc, #12]	; (8007064 <init_sd+0x40>)
 8007056:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	2000065c 	.word	0x2000065c
 8007068:	080075cc 	.word	0x080075cc

0800706c <deinit_sd>:

FRESULT deinit_sd() {
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
	FRESULT res = FR_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	71fb      	strb	r3, [r7, #7]
	if(mount_state == 1) {
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <deinit_sd+0x3c>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d10f      	bne.n	800709e <deinit_sd+0x32>
		res = f_mount(0, "", 1);
 800707e:	2201      	movs	r2, #1
 8007080:	490a      	ldr	r1, [pc, #40]	; (80070ac <deinit_sd+0x40>)
 8007082:	2000      	movs	r0, #0
 8007084:	f7fe fbd4 	bl	8005830 <f_mount>
 8007088:	4603      	mov	r3, r0
 800708a:	71fb      	strb	r3, [r7, #7]
		mount_state = res == FR_OK ? 0 : 1;
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	2b00      	cmp	r3, #0
 8007090:	bf14      	ite	ne
 8007092:	2301      	movne	r3, #1
 8007094:	2300      	moveq	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <deinit_sd+0x3c>)
 800709c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800709e:	79fb      	ldrb	r3, [r7, #7]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	2000065c 	.word	0x2000065c
 80070ac:	080075cc 	.word	0x080075cc

080070b0 <open_file>:

FRESULT open_file(FIL *fp, const TCHAR* filename, uint8_t flag) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	82fb      	strh	r3, [r7, #22]
	FRESULT res;
	do {
		res = f_open(fp, filename, flag);
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	461a      	mov	r2, r3
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7fe fbf5 	bl	80058b8 <f_open>
 80070ce:	4603      	mov	r3, r0
 80070d0:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK)
 80070d2:	7d7b      	ldrb	r3, [r7, #21]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <open_file+0x3a>
			break;
		i++;
 80070d8:	8afb      	ldrh	r3, [r7, #22]
 80070da:	3301      	adds	r3, #1
 80070dc:	82fb      	strh	r3, [r7, #22]
	} while(i < num_tries);
 80070de:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <open_file+0x48>)
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	8afa      	ldrh	r2, [r7, #22]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d3ec      	bcc.n	80070c2 <open_file+0x12>
 80070e8:	e000      	b.n	80070ec <open_file+0x3c>
			break;
 80070ea:	bf00      	nop
	return res;
 80070ec:	7d7b      	ldrb	r3, [r7, #21]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200000e8 	.word	0x200000e8

080070fc <read_header>:

FRESULT read_header(FIL *fp, wave_header *header, uint32_t buffer_size, uint16_t *bytes_read) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	FRESULT res;
	uint16_t i = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	82fb      	strh	r3, [r7, #22]
	do {
		res = f_read(fp, header, buffer_size, bytes_read);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7fe fd1e 	bl	8005b56 <f_read>
 800711a:	4603      	mov	r3, r0
 800711c:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK)
 800711e:	7d7b      	ldrb	r3, [r7, #21]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <read_header+0x3a>
			break;
		i++;
 8007124:	8afb      	ldrh	r3, [r7, #22]
 8007126:	3301      	adds	r3, #1
 8007128:	82fb      	strh	r3, [r7, #22]
	} while(i < num_tries);
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <read_header+0x48>)
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	8afa      	ldrh	r2, [r7, #22]
 8007130:	429a      	cmp	r2, r3
 8007132:	d3ec      	bcc.n	800710e <read_header+0x12>
 8007134:	e000      	b.n	8007138 <read_header+0x3c>
			break;
 8007136:	bf00      	nop
	return res;
 8007138:	7d7b      	ldrb	r3, [r7, #21]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200000e8 	.word	0x200000e8

08007148 <read_file>:

FRESULT read_file(FIL *fp, uint16_t *buffer, uint32_t buffer_size, uint16_t *bytes_read) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
	FRESULT res;
	uint16_t i = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	82fb      	strh	r3, [r7, #22]
	do {
		res = f_read(fp, buffer, buffer_size, bytes_read);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7fe fcf8 	bl	8005b56 <f_read>
 8007166:	4603      	mov	r3, r0
 8007168:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK)
 800716a:	7d7b      	ldrb	r3, [r7, #21]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d008      	beq.n	8007182 <read_file+0x3a>
			break;
		i++;
 8007170:	8afb      	ldrh	r3, [r7, #22]
 8007172:	3301      	adds	r3, #1
 8007174:	82fb      	strh	r3, [r7, #22]
	} while(i < num_tries);
 8007176:	4b06      	ldr	r3, [pc, #24]	; (8007190 <read_file+0x48>)
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	8afa      	ldrh	r2, [r7, #22]
 800717c:	429a      	cmp	r2, r3
 800717e:	d3ec      	bcc.n	800715a <read_file+0x12>
 8007180:	e000      	b.n	8007184 <read_file+0x3c>
			break;
 8007182:	bf00      	nop
	return res;
 8007184:	7d7b      	ldrb	r3, [r7, #21]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200000e8 	.word	0x200000e8

08007194 <read_wav_header>:
 * @see wave_header
 * @param fp FIL object
 * @param filename name of file on SD card
 * @param header pointer to struct in which to store header information
 * @return res result of operation*/
FRESULT read_wav_header(FIL *fp, const TCHAR* filename, wave_header* header) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
	FRESULT res = open_file(fp, filename, FA_READ);
 80071a0:	2201      	movs	r2, #1
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff ff83 	bl	80070b0 <open_file>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]
	if(res == FR_OK) {
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <read_wav_header+0x36>
		uint16_t bytes_read = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	82bb      	strh	r3, [r7, #20]
		res = read_header(fp, header, 44, &bytes_read);
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	222c      	movs	r2, #44	; 0x2c
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff ff9b 	bl	80070fc <read_header>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]
	}
	f_close(fp);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7fe fea2 	bl	8005f14 <f_close>
	return res;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <read_wav_data>:
 * @param buffer pointer to array in which to store data
 * @param buffer_size integer specifying number of words (16 bits) to read into `buffer`
 * @return res result of operation
 * */

FRESULT read_wav_data(FIL *fp, const TCHAR* filename, wave_header* header, uint16_t* buffer, uint32_t buffer_size) {
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
	FRESULT res = open_file(fp, filename, FA_READ);
 80071e8:	2201      	movs	r2, #1
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff ff5f 	bl	80070b0 <open_file>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
	if(res == FR_OK) {
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d116      	bne.n	800722a <read_wav_data+0x50>
		uint16_t bytes_read = 44;  // file offset
 80071fc:	232c      	movs	r3, #44	; 0x2c
 80071fe:	82bb      	strh	r3, [r7, #20]
		f_lseek(fp, bytes_read);  // seek to file offset of 44 bytes to beginning of data portion
 8007200:	8abb      	ldrh	r3, [r7, #20]
 8007202:	4619      	mov	r1, r3
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7fe fea1 	bl	8005f4c <f_lseek>
		res = read_file(fp, buffer, buffer_size * (header->BitsPerSample/8), &bytes_read);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800720e:	08db      	lsrs	r3, r3, #3
 8007210:	b29b      	uxth	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	fb03 f202 	mul.w	r2, r3, r2
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff ff91 	bl	8007148 <read_file>
 8007226:	4603      	mov	r3, r0
 8007228:	75fb      	strb	r3, [r7, #23]
	}
	f_close(fp);
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7fe fe72 	bl	8005f14 <f_close>
	return res;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <get_wav_size>:

/** Get size of data portion of wave file
 * @param filename name of wave file on sd card
 * @return size of data portion of file
 * */
uint32_t get_wav_size(FIL *fp, const TCHAR* filename) {
 800723a:	b580      	push	{r7, lr}
 800723c:	b090      	sub	sp, #64	; 0x40
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
	uint32_t size = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
	wave_header header;
	FRESULT res = read_wav_header(fp, filename, &header);
 8007248:	f107 030c 	add.w	r3, r7, #12
 800724c:	461a      	mov	r2, r3
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff ff9f 	bl	8007194 <read_wav_header>
 8007256:	4603      	mov	r3, r0
 8007258:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if(res == FR_OK)
 800725c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <get_wav_size+0x38>
		size = header.Subchunk2Size / (header.BitsPerSample / 8);
 8007264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007266:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007268:	08d2      	lsrs	r2, r2, #3
 800726a:	b292      	uxth	r2, r2
 800726c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
	return size;  // return 0 if failed to read header of wav file
 8007272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007274:	4618      	mov	r0, r3
 8007276:	3740      	adds	r7, #64	; 0x40
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <read_wav_file>:

/** Mount sd card and read wave file specified
 * @param filename name of file on sd card*/
FRESULT read_wav_file(FIL *fp, const TCHAR* filename, uint16_t* buffer, uint32_t buffer_size) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b092      	sub	sp, #72	; 0x48
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
	STM_EVAL_LEDOn(LED_BLUE);
 800728a:	2003      	movs	r0, #3
 800728c:	f7ff f9c2 	bl	8006614 <STM_EVAL_LEDOn>
	// get header
	wave_header header;
	read_wav_header(fp, filename, &header);
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	461a      	mov	r2, r3
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff ff7b 	bl	8007194 <read_wav_header>
	// get PCM
	uint16_t it;
	for(it = 0; it < buffer_size; it++) buffer[it] = 0; // zero out buffer
 800729e:	2300      	movs	r3, #0
 80072a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80072a2:	e008      	b.n	80072b6 <read_wav_file+0x3a>
 80072a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	2200      	movs	r2, #0
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80072b2:	3301      	adds	r3, #1
 80072b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80072b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d3f2      	bcc.n	80072a4 <read_wav_file+0x28>
	FRESULT res = read_wav_data(fp, filename, &header, buffer, buffer_size);
 80072be:	f107 0210 	add.w	r2, r7, #16
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff ff85 	bl	80071da <read_wav_data>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	// unmount
	if(res == FR_OK)
 80072d6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <read_wav_file+0x68>
		STM_EVAL_LEDOff(LED_BLUE);
 80072de:	2003      	movs	r0, #3
 80072e0:	f7ff f9b0 	bl	8006644 <STM_EVAL_LEDOff>

	return res;
 80072e4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d


}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3740      	adds	r7, #64	; 0x40
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <__libc_init_array>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	4e0d      	ldr	r6, [pc, #52]	; (8007328 <__libc_init_array+0x38>)
 80072f4:	4c0d      	ldr	r4, [pc, #52]	; (800732c <__libc_init_array+0x3c>)
 80072f6:	1ba4      	subs	r4, r4, r6
 80072f8:	10a4      	asrs	r4, r4, #2
 80072fa:	2500      	movs	r5, #0
 80072fc:	42a5      	cmp	r5, r4
 80072fe:	d109      	bne.n	8007314 <__libc_init_array+0x24>
 8007300:	4e0b      	ldr	r6, [pc, #44]	; (8007330 <__libc_init_array+0x40>)
 8007302:	4c0c      	ldr	r4, [pc, #48]	; (8007334 <__libc_init_array+0x44>)
 8007304:	f000 f900 	bl	8007508 <_init>
 8007308:	1ba4      	subs	r4, r4, r6
 800730a:	10a4      	asrs	r4, r4, #2
 800730c:	2500      	movs	r5, #0
 800730e:	42a5      	cmp	r5, r4
 8007310:	d105      	bne.n	800731e <__libc_init_array+0x2e>
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007318:	4798      	blx	r3
 800731a:	3501      	adds	r5, #1
 800731c:	e7ee      	b.n	80072fc <__libc_init_array+0xc>
 800731e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007322:	4798      	blx	r3
 8007324:	3501      	adds	r5, #1
 8007326:	e7f2      	b.n	800730e <__libc_init_array+0x1e>
 8007328:	08007b5c 	.word	0x08007b5c
 800732c:	08007b5c 	.word	0x08007b5c
 8007330:	08007b5c 	.word	0x08007b5c
 8007334:	08007b60 	.word	0x08007b60

08007338 <malloc>:
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <malloc+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f000 b865 	b.w	800740c <_malloc_r>
 8007342:	bf00      	nop
 8007344:	200000ec 	.word	0x200000ec

08007348 <free>:
 8007348:	4b02      	ldr	r3, [pc, #8]	; (8007354 <free+0xc>)
 800734a:	4601      	mov	r1, r0
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	f000 b80f 	b.w	8007370 <_free_r>
 8007352:	bf00      	nop
 8007354:	200000ec 	.word	0x200000ec

08007358 <memcpy>:
 8007358:	b510      	push	{r4, lr}
 800735a:	1e43      	subs	r3, r0, #1
 800735c:	440a      	add	r2, r1
 800735e:	4291      	cmp	r1, r2
 8007360:	d100      	bne.n	8007364 <memcpy+0xc>
 8007362:	bd10      	pop	{r4, pc}
 8007364:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007368:	f803 4f01 	strb.w	r4, [r3, #1]!
 800736c:	e7f7      	b.n	800735e <memcpy+0x6>
	...

08007370 <_free_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4605      	mov	r5, r0
 8007374:	2900      	cmp	r1, #0
 8007376:	d045      	beq.n	8007404 <_free_r+0x94>
 8007378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800737c:	1f0c      	subs	r4, r1, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	bfb8      	it	lt
 8007382:	18e4      	addlt	r4, r4, r3
 8007384:	f000 f8b0 	bl	80074e8 <__malloc_lock>
 8007388:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <_free_r+0x98>)
 800738a:	6813      	ldr	r3, [r2, #0]
 800738c:	4610      	mov	r0, r2
 800738e:	b933      	cbnz	r3, 800739e <_free_r+0x2e>
 8007390:	6063      	str	r3, [r4, #4]
 8007392:	6014      	str	r4, [r2, #0]
 8007394:	4628      	mov	r0, r5
 8007396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800739a:	f000 b8a6 	b.w	80074ea <__malloc_unlock>
 800739e:	42a3      	cmp	r3, r4
 80073a0:	d90c      	bls.n	80073bc <_free_r+0x4c>
 80073a2:	6821      	ldr	r1, [r4, #0]
 80073a4:	1862      	adds	r2, r4, r1
 80073a6:	4293      	cmp	r3, r2
 80073a8:	bf04      	itt	eq
 80073aa:	681a      	ldreq	r2, [r3, #0]
 80073ac:	685b      	ldreq	r3, [r3, #4]
 80073ae:	6063      	str	r3, [r4, #4]
 80073b0:	bf04      	itt	eq
 80073b2:	1852      	addeq	r2, r2, r1
 80073b4:	6022      	streq	r2, [r4, #0]
 80073b6:	6004      	str	r4, [r0, #0]
 80073b8:	e7ec      	b.n	8007394 <_free_r+0x24>
 80073ba:	4613      	mov	r3, r2
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	b10a      	cbz	r2, 80073c4 <_free_r+0x54>
 80073c0:	42a2      	cmp	r2, r4
 80073c2:	d9fa      	bls.n	80073ba <_free_r+0x4a>
 80073c4:	6819      	ldr	r1, [r3, #0]
 80073c6:	1858      	adds	r0, r3, r1
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d10b      	bne.n	80073e4 <_free_r+0x74>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	4401      	add	r1, r0
 80073d0:	1858      	adds	r0, r3, r1
 80073d2:	4282      	cmp	r2, r0
 80073d4:	6019      	str	r1, [r3, #0]
 80073d6:	d1dd      	bne.n	8007394 <_free_r+0x24>
 80073d8:	6810      	ldr	r0, [r2, #0]
 80073da:	6852      	ldr	r2, [r2, #4]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	4401      	add	r1, r0
 80073e0:	6019      	str	r1, [r3, #0]
 80073e2:	e7d7      	b.n	8007394 <_free_r+0x24>
 80073e4:	d902      	bls.n	80073ec <_free_r+0x7c>
 80073e6:	230c      	movs	r3, #12
 80073e8:	602b      	str	r3, [r5, #0]
 80073ea:	e7d3      	b.n	8007394 <_free_r+0x24>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	1821      	adds	r1, r4, r0
 80073f0:	428a      	cmp	r2, r1
 80073f2:	bf04      	itt	eq
 80073f4:	6811      	ldreq	r1, [r2, #0]
 80073f6:	6852      	ldreq	r2, [r2, #4]
 80073f8:	6062      	str	r2, [r4, #4]
 80073fa:	bf04      	itt	eq
 80073fc:	1809      	addeq	r1, r1, r0
 80073fe:	6021      	streq	r1, [r4, #0]
 8007400:	605c      	str	r4, [r3, #4]
 8007402:	e7c7      	b.n	8007394 <_free_r+0x24>
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	bf00      	nop
 8007408:	20000660 	.word	0x20000660

0800740c <_malloc_r>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	1ccd      	adds	r5, r1, #3
 8007410:	f025 0503 	bic.w	r5, r5, #3
 8007414:	3508      	adds	r5, #8
 8007416:	2d0c      	cmp	r5, #12
 8007418:	bf38      	it	cc
 800741a:	250c      	movcc	r5, #12
 800741c:	2d00      	cmp	r5, #0
 800741e:	4606      	mov	r6, r0
 8007420:	db01      	blt.n	8007426 <_malloc_r+0x1a>
 8007422:	42a9      	cmp	r1, r5
 8007424:	d903      	bls.n	800742e <_malloc_r+0x22>
 8007426:	230c      	movs	r3, #12
 8007428:	6033      	str	r3, [r6, #0]
 800742a:	2000      	movs	r0, #0
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	f000 f85b 	bl	80074e8 <__malloc_lock>
 8007432:	4a23      	ldr	r2, [pc, #140]	; (80074c0 <_malloc_r+0xb4>)
 8007434:	6814      	ldr	r4, [r2, #0]
 8007436:	4621      	mov	r1, r4
 8007438:	b991      	cbnz	r1, 8007460 <_malloc_r+0x54>
 800743a:	4c22      	ldr	r4, [pc, #136]	; (80074c4 <_malloc_r+0xb8>)
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	b91b      	cbnz	r3, 8007448 <_malloc_r+0x3c>
 8007440:	4630      	mov	r0, r6
 8007442:	f000 f841 	bl	80074c8 <_sbrk_r>
 8007446:	6020      	str	r0, [r4, #0]
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f000 f83c 	bl	80074c8 <_sbrk_r>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d126      	bne.n	80074a2 <_malloc_r+0x96>
 8007454:	230c      	movs	r3, #12
 8007456:	6033      	str	r3, [r6, #0]
 8007458:	4630      	mov	r0, r6
 800745a:	f000 f846 	bl	80074ea <__malloc_unlock>
 800745e:	e7e4      	b.n	800742a <_malloc_r+0x1e>
 8007460:	680b      	ldr	r3, [r1, #0]
 8007462:	1b5b      	subs	r3, r3, r5
 8007464:	d41a      	bmi.n	800749c <_malloc_r+0x90>
 8007466:	2b0b      	cmp	r3, #11
 8007468:	d90f      	bls.n	800748a <_malloc_r+0x7e>
 800746a:	600b      	str	r3, [r1, #0]
 800746c:	50cd      	str	r5, [r1, r3]
 800746e:	18cc      	adds	r4, r1, r3
 8007470:	4630      	mov	r0, r6
 8007472:	f000 f83a 	bl	80074ea <__malloc_unlock>
 8007476:	f104 000b 	add.w	r0, r4, #11
 800747a:	1d23      	adds	r3, r4, #4
 800747c:	f020 0007 	bic.w	r0, r0, #7
 8007480:	1ac3      	subs	r3, r0, r3
 8007482:	d01b      	beq.n	80074bc <_malloc_r+0xb0>
 8007484:	425a      	negs	r2, r3
 8007486:	50e2      	str	r2, [r4, r3]
 8007488:	bd70      	pop	{r4, r5, r6, pc}
 800748a:	428c      	cmp	r4, r1
 800748c:	bf0d      	iteet	eq
 800748e:	6863      	ldreq	r3, [r4, #4]
 8007490:	684b      	ldrne	r3, [r1, #4]
 8007492:	6063      	strne	r3, [r4, #4]
 8007494:	6013      	streq	r3, [r2, #0]
 8007496:	bf18      	it	ne
 8007498:	460c      	movne	r4, r1
 800749a:	e7e9      	b.n	8007470 <_malloc_r+0x64>
 800749c:	460c      	mov	r4, r1
 800749e:	6849      	ldr	r1, [r1, #4]
 80074a0:	e7ca      	b.n	8007438 <_malloc_r+0x2c>
 80074a2:	1cc4      	adds	r4, r0, #3
 80074a4:	f024 0403 	bic.w	r4, r4, #3
 80074a8:	42a0      	cmp	r0, r4
 80074aa:	d005      	beq.n	80074b8 <_malloc_r+0xac>
 80074ac:	1a21      	subs	r1, r4, r0
 80074ae:	4630      	mov	r0, r6
 80074b0:	f000 f80a 	bl	80074c8 <_sbrk_r>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d0cd      	beq.n	8007454 <_malloc_r+0x48>
 80074b8:	6025      	str	r5, [r4, #0]
 80074ba:	e7d9      	b.n	8007470 <_malloc_r+0x64>
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
 80074be:	bf00      	nop
 80074c0:	20000660 	.word	0x20000660
 80074c4:	20000664 	.word	0x20000664

080074c8 <_sbrk_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4c06      	ldr	r4, [pc, #24]	; (80074e4 <_sbrk_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4605      	mov	r5, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	f000 f80a 	bl	80074ec <_sbrk>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_sbrk_r+0x1a>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_sbrk_r+0x1a>
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	20000794 	.word	0x20000794

080074e8 <__malloc_lock>:
 80074e8:	4770      	bx	lr

080074ea <__malloc_unlock>:
 80074ea:	4770      	bx	lr

080074ec <_sbrk>:
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <_sbrk+0x14>)
 80074ee:	6819      	ldr	r1, [r3, #0]
 80074f0:	4602      	mov	r2, r0
 80074f2:	b909      	cbnz	r1, 80074f8 <_sbrk+0xc>
 80074f4:	4903      	ldr	r1, [pc, #12]	; (8007504 <_sbrk+0x18>)
 80074f6:	6019      	str	r1, [r3, #0]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	4402      	add	r2, r0
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	4770      	bx	lr
 8007500:	20000668 	.word	0x20000668
 8007504:	20000798 	.word	0x20000798

08007508 <_init>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	bf00      	nop
 800750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750e:	bc08      	pop	{r3}
 8007510:	469e      	mov	lr, r3
 8007512:	4770      	bx	lr

08007514 <_fini>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	bf00      	nop
 8007518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751a:	bc08      	pop	{r3}
 800751c:	469e      	mov	lr, r3
 800751e:	4770      	bx	lr
